<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright (c) 2010-2014 Dassault Systemes, 1993 - 2014 -->
<!DOCTYPE ematrix SYSTEM "ematrixml.dtd">
<ematrix>
<creationProperties>
<release>3DEXPERIENCE R2019x HotFix 7(29.0.0.0)</release>
<datetime>2020-07-13T05:28:51Z</datetime>
<event>export</event>
<dtdInfo>&ematrixProductDtd;</dtdInfo>
</creationProperties>


<program id="0.1.44064.24936">
<adminProperties>
<name>IMS_Adm_Utils</name>
<creationInfo>
<datetime>2020-04-20T10:07:27Z</datetime>
</creationInfo>
<modificationInfo>
<datetime>2020-05-07T14:36:36Z</datetime>
</modificationInfo>
<propertyList count="1">
<property>
<name>file date</name>
<value>05-06-2020 17:53:56.681</value>
<flags>0</flags>
</property>
</propertyList>
<historyList count="452">
<history>
<datetime>2020-04-20T10:07:27Z</datetime>
<agent>admin_platform</agent>
<event>create</event>
<order>1</order>
<string>add program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T10:07:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>2</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T10:07:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>3</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 09:53:06.327'</string>
</history>
<history>
<datetime>2020-04-20T10:07:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>4</order>
<string><![CDATA[mod program IMS_Adm_Utils code "import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} { /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * Owner * * @author Morozov */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String currentState = args[1]; String nextState = args[2]; String currentUser = args[3]; System.out.println("objectId: " + objectId + " -- cur: " + currentState + " -- next: " + args[2] + " user: " + currentUser); /*try { if ("Inactive".equals(currentState) || "Active".equals(currentState)) { DomainObject objCPF = DomainObject.newInstance(context, objectId); String currentUserFullName = PersonUtil.getFullName(context, currentUser); String sCPFname = objCPF.getName(context); String owner = (String) objCPF.getInfo(context, DomainConstants.SELECT_OWNER); //LOG.debug("owner " + owner); StringList toList = new StringList(owner);  String sCRFid = objCPF.getInfo(context, "from[Resolved To].to.id"); String sCRFname = objCPF.getInfo(context, "from[Resolved To].to.name");  String subject = "Change Proposal " + sCPFname + " was promoted to 'Accepted'"; String body = "<a> CPF: " + sCPFname + "</a><br></br> " + "<a> Description: " + objCPF.getDescription(context) + "</a><br></br> " + "<a> changed state from '" + currentState + "' to 'Accepted' by  </a><br></br>" + "<a> " + currentUserFullName + "</a><br></br><br></br>" + "<a> New CRF was created </a> <a href=\"" + "http://" + getLocalIPAdress().trim() + ":8080/enovia/" + "common/emxNavigator.jsp?objectId=" + sCRFid + "\">" + sCRFname + "</a> ";  ${CLASS:IMS_Notification} notificationToChngeManeger = new ${CLASS:IMS_Notification}(); notificationToChngeManeger.sendMessage(context, toList, subject, body, objectId); } } catch (Exception ex) { ContextUtil.abortTransaction(context); ${CLASS:emxContextUtil}.mqlWarning(context, "Warning during change state: \n" + ex.getMessage()); } */ } } "]]></string>
</history>
<history>
<datetime>2020-04-20T10:30:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>5</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T10:30:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>6</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T10:30:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>7</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 10:30:35.595'</string>
</history>
<history>
<datetime>2020-04-20T10:30:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>8</order>
<string><![CDATA[mod program IMS_Adm_Utils code "import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} { /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String currentState = args[1]; String nextState = args[2]; String currentUser = args[3]; System.out.println("objectId: " + objectId + " -- cur: " + currentState + " -- next: " + args[2] + " user: " + currentUser); /*try { if ("Inactive".equals(currentState) || "Active".equals(currentState)) { DomainObject objCPF = DomainObject.newInstance(context, objectId); String currentUserFullName = PersonUtil.getFullName(context, currentUser); String sCPFname = objCPF.getName(context); String owner = (String) objCPF.getInfo(context, DomainConstants.SELECT_OWNER); //LOG.debug("owner " + owner); StringList toList = new StringList(owner);  String sCRFid = objCPF.getInfo(context, "from[Resolved To].to.id"); String sCRFname = objCPF.getInfo(context, "from[Resolved To].to.name");  String subject = "Change Proposal " + sCPFname + " was promoted to 'Accepted'"; String body = "<a> CPF: " + sCPFname + "</a><br></br> " + "<a> Description: " + objCPF.getDescription(context) + "</a><br></br> " + "<a> changed state from '" + currentState + "' to 'Accepted' by  </a><br></br>" + "<a> " + currentUserFullName + "</a><br></br><br></br>" + "<a> New CRF was created </a> <a href=\"" + "http://" + getLocalIPAdress().trim() + ":8080/enovia/" + "common/emxNavigator.jsp?objectId=" + sCRFid + "\">" + sCRFname + "</a> ";  ${CLASS:IMS_Notification} notificationToChngeManeger = new ${CLASS:IMS_Notification}(); notificationToChngeManeger.sendMessage(context, toList, subject, body, objectId); } } catch (Exception ex) { ContextUtil.abortTransaction(context); ${CLASS:emxContextUtil}.mqlWarning(context, "Warning during change state: \n" + ex.getMessage()); } */ } } "]]></string>
</history>
<history>
<datetime>2020-04-20T11:37:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>9</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T11:37:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>10</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T11:37:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>11</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 11:34:12.841'</string>
</history>
<history>
<datetime>2020-04-20T11:37:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>12</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;   import java.util.Map;  public class ${CLASSNAME} { /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String currentState = args[1]; String nextState = args[2]; String currentUser = args[3]; System.out.println("objectId: " + objectId + " -- cur: " + currentState + " -- next: " + args[2] + " user: " + currentUser); try { if ("Inactive".equals(currentState) || "Active".equals(currentState)) { DomainObject classificationObject = DomainObject.newInstance(context, objectId); findAndPromotedRelatedSubclasses(context, classificationObject); } } catch (Exception ex) { System.out.println("promoteConnectedSubclasses-Error: " + ex); } }  private void findAndPromotedRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObject.promote(context); findAndPromotedRelatedSubclasses(context, relObject); } } } '</string>
</history>
<history>
<datetime>2020-04-20T11:45:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>13</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T11:45:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>14</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T11:45:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>15</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 11:44:15.782'</string>
</history>
<history>
<datetime>2020-04-20T11:45:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>16</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;   import java.util.Map;  public class ${CLASSNAME} { /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String currentState = args[1]; String nextState = args[2]; String currentUser = args[3]; System.out.println("objectId: " + objectId + " -- cur: " + currentState + " -- next: " + args[2] + " user: " + currentUser); try { if ("Inactive".equals(currentState) || "Active".equals(currentState)) { DomainObject classificationObject = DomainObject.newInstance(context, objectId); findAndPromotedRelatedSubclasses(context, classificationObject); } } catch (Exception ex) { System.out.println("promoteConnectedSubclasses-Error: " + ex); } }  private void findAndPromotedRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_*", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); System.out.println("mlResult = " + mlResult); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObject.promote(context); findAndPromotedRelatedSubclasses(context, relObject); } } } '</string>
</history>
<history>
<datetime>2020-04-20T11:55:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>17</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T11:55:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>18</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T11:55:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>19</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 11:55:13.201'</string>
</history>
<history>
<datetime>2020-04-20T11:55:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>20</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;   import java.util.Map;  public class ${CLASSNAME} { /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String currentState = args[1]; String nextState = args[2]; String currentUser = args[3]; System.out.println("objectId: " + objectId + " -- cur: " + currentState + " -- next: " + args[2] + " user: " + currentUser); try { if ("Inactive".equals(currentState) || "Active".equals(currentState)) { DomainObject classificationObject = DomainObject.newInstance(context, objectId); findAndPromotedRelatedSubclasses(context, classificationObject); } } catch (Exception ex) { System.out.println("promoteConnectedSubclasses-Error: " + ex); } }  private void findAndPromotedRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); System.out.println("mlResult = " + mlResult); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObject.promote(context); findAndPromotedRelatedSubclasses(context, relObject); } } } '</string>
</history>
<history>
<datetime>2020-04-20T12:07:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>21</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T12:07:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>22</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T12:07:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>23</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 12:07:02.732'</string>
</history>
<history>
<datetime>2020-04-20T12:07:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>24</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;   import java.util.Map;  public class ${CLASSNAME} { /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String currentState = args[1]; String nextState = args[2]; String currentUser = args[3]; System.out.println("1) objectId: " + objectId + " -- cur: " + currentState + " -- next: " + args[2] + " user: " + currentUser); try { if ("Inactive".equals(currentState) || "Active".equals(currentState)) { System.out.println("in if"); DomainObject classificationObject = DomainObject.newInstance(context, objectId); findAndPromotedRelatedSubclasses(context, classificationObject); } } catch (Exception ex) { System.out.println("promoteConnectedSubclasses-Error: " + ex); } }  private void findAndPromotedRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); System.out.println("mlResult = " + mlResult); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObject.promote(context); findAndPromotedRelatedSubclasses(context, relObject); } } } '</string>
</history>
<history>
<datetime>2020-04-20T13:59:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>25</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T13:59:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>26</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T13:59:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>27</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 13:57:50.543'</string>
</history>
<history>
<datetime>2020-04-20T13:59:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>28</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;   import java.util.Map;  public class ${CLASSNAME} { /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { System.out.println("promoteConnectedSubclasses START"); String objectId = args[0]; String currentState = args[1]; String nextState = args[2]; String currentUser = args[3]; System.out.println("1) objectId: " + objectId + " -- cur: " + currentState + " -- next: " + args[2] + " user: " + currentUser); try { if ("Inactive".equals(currentState) || "Active".equals(currentState)) { System.out.println("in if"); DomainObject classificationObject = DomainObject.newInstance(context, objectId); findAndPromoteRelatedSubclasses(context, classificationObject); } } catch (Exception ex) { System.out.println("promoteConnectedSubclasses-Error: " + ex); } }  private void findAndPromoteRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); System.out.println("mlResult = " + mlResult); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObject.promote(context); findAndPromoteRelatedSubclasses(context, relObject); } } } '</string>
</history>
<history>
<datetime>2020-04-20T14:28:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>29</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T14:28:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>30</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T14:28:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>31</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 14:27:39.956'</string>
</history>
<history>
<datetime>2020-04-20T14:28:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>32</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("TEST LOG"); System.out.println("promoteConnectedSubclasses START"); String objectId = args[0]; String currentState = args[1]; String nextState = args[2]; String currentUser = args[3]; System.out.println("1) objectId: " + objectId + " -- cur: " + currentState + " -- next: " + args[2] + " user: " + currentUser); try { if ("Inactive".equals(currentState) || "Active".equals(currentState)) { System.out.println("in if"); DomainObject classificationObject = DomainObject.newInstance(context, objectId); findAndPromoteRelatedSubclasses(context, classificationObject); } } catch (Exception ex) { System.out.println("promoteConnectedSubclasses-Error: " + ex); } }  private void findAndPromoteRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); System.out.println("mlResult = " + mlResult); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObject.promote(context); findAndPromoteRelatedSubclasses(context, relObject); } } } '</string>
</history>
<history>
<datetime>2020-04-20T14:34:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>33</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T14:34:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>34</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T14:34:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>35</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 14:34:20.445'</string>
</history>
<history>
<datetime>2020-04-20T14:34:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>36</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("TEST LOG"); System.out.println("promoteConnectedSubclasses START"); String objectId = args[0]; String currentState = args[1]; String nextState = args[2]; String currentUser = args[3]; log.debug("currentState = " + currentState); System.out.println("1) objectId: " + objectId + " -- cur: " + currentState + " -- next: " + args[2] + " user: " + currentUser); try { if ("Inactive".equals(currentState) || "Active".equals(currentState)) { System.out.println("in if"); DomainObject classificationObject = DomainObject.newInstance(context, objectId); findAndPromoteRelatedSubclasses(context, classificationObject); } } catch (Exception ex) { System.out.println("promoteConnectedSubclasses-Error: " + ex); } }  private void findAndPromoteRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); System.out.println("mlResult = " + mlResult); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObject.promote(context); findAndPromoteRelatedSubclasses(context, relObject); } } } '</string>
</history>
<history>
<datetime>2020-04-20T14:36:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>37</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T14:36:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>38</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T14:36:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>39</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 14:36:15.767'</string>
</history>
<history>
<datetime>2020-04-20T14:36:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>40</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("TEST LOG"); System.out.println("promoteConnectedSubclasses START"); String objectId = args[0]; String currentState = args[1]; String currentUser = args[3]; log.debug("currentState = " + currentState); System.out.println("1) objectId: " + objectId + " -- cur: " + currentState + " -- next: " + args[2] + " user: " + currentUser); try { DomainObject classificationObject = DomainObject.newInstance(context, objectId); findAndPromoteRelatedSubclasses(context, classificationObject); } catch (Exception ex) { System.out.println("promoteConnectedSubclasses-Error: " + ex); } }  private void findAndPromoteRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); System.out.println("mlResult = " + mlResult); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObject.promote(context); findAndPromoteRelatedSubclasses(context, relObject); } } } '</string>
</history>
<history>
<datetime>2020-04-20T15:08:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>41</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T15:08:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>42</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T15:08:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>43</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 14:59:24.497'</string>
</history>
<history>
<datetime>2020-04-20T15:08:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>44</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("TEST LOG"); System.out.println("promoteConnectedSubclasses START"); String objectId = args[0]; String currentUser = args[1]; try { DomainObject classificationObject = DomainObject.newInstance(context, objectId); findAndPromoteRelatedSubclasses(context, classificationObject); } catch (Exception ex) { System.out.println("promoteConnectedSubclasses-Error: " + ex); } }  private void findAndPromoteRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); System.out.println("mlResult = " + mlResult); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObject.promote(context); findAndPromoteRelatedSubclasses(context, relObject); } } } '</string>
</history>
<history>
<datetime>2020-04-20T15:35:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>45</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T15:35:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>46</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T15:35:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>47</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 15:35:07.756'</string>
</history>
<history>
<datetime>2020-04-20T15:35:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>48</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("TEST LOG"); System.out.println("promoteConnectedSubclasses START"); String objectId = args[0]; String currentUser = args[1]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findAndPromoteRelatedSubclasses(context, classificationObject)); log.debug("relObjectsList = " + relObjectsList); } catch (Exception ex) { System.out.println("promoteConnectedSubclasses-Error: " + ex); } }  private StringList findAndPromoteRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); System.out.println("mlResult = " + mlResult); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObjectsList.addAll(findAndPromoteRelatedSubclasses(context, relObject)); } return relObjectsList; } } '</string>
</history>
<history>
<datetime>2020-04-20T16:46:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>49</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T16:46:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>50</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T16:46:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>51</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 16:46:09.956'</string>
</history>
<history>
<datetime>2020-04-20T16:46:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>52</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("TEST LOG"); String objectId = args[0]; String currentUser = args[1]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("relObjectsList = " + relObjectsList); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }  private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 1, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); DomainObject relObject = DomainObject.newInstance(context, relSubclassId); relObjectsList.addAll(findRelatedSubclasses(context, relObject)); } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } } } '</string>
</history>
<history>
<datetime>2020-04-20T17:10:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>53</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-20T17:10:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>54</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-20T17:10:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>55</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-20-2020 17:10:42.998'</string>
</history>
<history>
<datetime>2020-04-20T17:10:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>56</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * * */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("TEST LOG"); String objectId = args[0]; String currentUser = args[1]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("relObjectsList = " + relObjectsList); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }  private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); log.debug("mlResult - " + mlResult); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); //	DomainObject relObject = DomainObject.newInstance(context, relSubclassId); //	relObjectsList.addAll(findRelatedSubclasses(context, relObject)); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } } } '</string>
</history>
<history>
<datetime>2020-04-23T14:59:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>57</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T14:59:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>58</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T14:59:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>59</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 14:58:44.711'</string>
</history>
<history>
<datetime>2020-04-23T14:59:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>60</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLog"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("paramMap"); log.debug("programMap = " + programMap); //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship); } catch(Exception ex) { throw new FrameworkException(ex.getMessage()); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:09:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>61</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:09:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>62</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:09:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>63</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:09:18.207'</string>
</history>
<history>
<datetime>2020-04-23T15:09:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>64</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("paramMap"); log.debug("programMap = " + programMap); //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship); } catch(Exception ex) { throw new FrameworkException(ex.getMessage()); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:15:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>65</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:15:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>66</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:15:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>67</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:14:57.392'</string>
</history>
<history>
<datetime>2020-04-23T15:15:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>68</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("requestMap"); HashMap postProcessURL                = (HashMap)paramMap.get("postProcessURL"); log.debug("postProcessURL = " + postProcessURL); //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship); } catch(Exception ex) { throw new FrameworkException(ex.getMessage()); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:16:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>69</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:16:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>70</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:16:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>71</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:16:36.333'</string>
</history>
<history>
<datetime>2020-04-23T15:16:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>72</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("requestMap"); String[] postProcessURL                = (String[]) paramMap.get("postProcessURL"); for (String test: postProcessURL) { log.debug("test = " + test); } //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship); } catch(Exception ex) { throw new FrameworkException(ex.getMessage()); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:18:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>73</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:18:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>74</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:18:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>75</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:18:50.011'</string>
</history>
<history>
<datetime>2020-04-23T15:18:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>76</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("requestMap"); String[]  parentOID                = (String[]) paramMap.get(" parentOID"); for (String test:  parentOID) { log.debug("parentOID = " + test); } String[]  objectId                = (String[]) paramMap.get(" parentOID"); for (String test:  objectId) { log.debug("objectId = " + test); } //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship); } catch(Exception ex) { throw new FrameworkException(ex.getMessage()); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:20:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>77</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:20:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>78</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:20:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>79</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:20:34.204'</string>
</history>
<history>
<datetime>2020-04-23T15:20:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>80</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("requestMap"); String[]  parentOID                = (String[]) paramMap.get(" parentOID"); for (String test:  parentOID) { log.debug("parentOID = " + test); } String[]  objectId                = (String[]) paramMap.get(" objectId"); for (String test:  objectId) { log.debug("objectId = " + test); } //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship); } catch(Exception ex) { throw new FrameworkException(ex.getMessage()); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:22:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>81</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:22:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>82</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:22:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>83</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:22:12.078'</string>
</history>
<history>
<datetime>2020-04-23T15:22:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>84</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("requestMap"); log.debug("requestMap = " + paramMap); String[]  parentOID                = (String[]) paramMap.get(" parentOID"); for (String test:  parentOID) { log.debug("parentOID = " + test); } String[]  objectId                = (String[]) paramMap.get(" objectId"); for (String test:  objectId) { log.debug("objectId = " + test); } //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship); } catch(Exception ex) { throw new FrameworkException(ex.getMessage()); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:24:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>85</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:24:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>86</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:24:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>87</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:24:45.969'</string>
</history>
<history>
<datetime>2020-04-23T15:24:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>88</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("requestMap"); log.debug("requestMap = " + paramMap); String  parentOID                = (String) paramMap.get(" parentOID"); for (String test:  parentOID) { log.debug("parentOID = " + test); } String[]  objectId                = (String[]) paramMap.get(" objectId"); for (String test:  objectId) { log.debug("objectId = " + test); } //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship);  } } '</string>
</history>
<history>
<datetime>2020-04-23T15:26:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>89</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:26:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>90</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:26:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>91</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:26:00.922'</string>
</history>
<history>
<datetime>2020-04-23T15:26:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>92</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("requestMap"); log.debug("requestMap = " + paramMap); String  parentOID                = (String) paramMap.get(" parentOID"); log.debug("parentOID = " + parentOID);  String  objectId                = (String) paramMap.get(" objectId"); log.debug("objectId = " + test); //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship);  } } '</string>
</history>
<history>
<datetime>2020-04-23T15:26:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>93</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:26:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>94</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:26:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>95</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:26:29.441'</string>
</history>
<history>
<datetime>2020-04-23T15:26:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>96</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("requestMap"); log.debug("requestMap = " + paramMap); String  parentOID                = (String) paramMap.get(" parentOID"); log.debug("parentOID = " + parentOID);  String  objectId                = (String) paramMap.get(" objectId"); log.debug("objectId = " + objectId); //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship);  } } '</string>
</history>
<history>
<datetime>2020-04-23T15:28:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>97</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:28:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>98</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:28:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>99</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:28:44.191'</string>
</history>
<history>
<datetime>2020-04-23T15:28:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>100</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("requestMap"); log.debug("requestMap = " + paramMap); String  parentOID                = (String) paramMap.get("parentOID"); log.debug("parentOID = " + parentOID);  String  objectId                = (String) paramMap.get("objectId"); log.debug("objectId = " + objectId); //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship);  } } '</string>
</history>
<history>
<datetime>2020-04-23T15:29:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>101</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:29:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>102</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:29:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>103</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:29:32.493'</string>
</history>
<history>
<datetime>2020-04-23T15:29:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>104</order>
<string>mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap              = (HashMap) JPO.unpackArgs(args); HashMap paramMap                = (HashMap)programMap.get("requestMap");  String[]  parentOID                = (String[]) paramMap.get("parentOID"); for (String test:  parentOID) { log.debug("parentOID = " + test); } String[]  objectId                = (String[]) paramMap.get("parentOID"); for (String test:  objectId) { log.debug("objectId = " + test); } //			String objectId                 = (String)paramMap.get(OBJECT_ID); //			String containingObjectId       = (String)paramMap.get(JPO_ARGS_NEW_OID); //			String containingRelationship   = LibraryCentralConstants.RELATIONSHIP_SUBCLASS; //			DomainObject dObj               = new DomainObject(objectId); // //			StringList slContainingObjIds   = (StringList) (FrameworkUtil.split(containingObjectId, "|")); //			String[] containingObjIdsArray  = (String[]) slContainingObjIds.toArray(new String[slContainingObjIds.size()]); //			addToContainingObject(context,dObj,containingObjIdsArray, containingRelationship); } catch(Exception ex) { throw new FrameworkException(ex.getMessage()); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:36:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>105</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:36:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>106</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:36:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>107</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:36:17.542'</string>
</history>
<history>
<datetime>2020-04-23T15:36:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>108</order>
<string>mod program IMS_Adm_Utils code 'import com.aspose.pdf.operators.Do; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("promoteConnectedSubclasses Start"); String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String[]  parentOID = (String[]) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID[0]); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); ContextUtil.pushContext(context); newObject.promote(context); ContextUtil.popContext(context); } } catch(Exception ex)	{ ex.printStackTrace(); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:39:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>109</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:39:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>110</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:39:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>111</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:38:54.511'</string>
</history>
<history>
<datetime>2020-04-23T15:39:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>112</order>
<string>mod program IMS_Adm_Utils code 'import com.aspose.pdf.operators.Do; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("promoteConnectedSubclasses Start"); String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String[]  parentOID = (String[]) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID[0]); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); newObject.promote(context); MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); } } catch(Exception ex)	{ ex.printStackTrace(); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:50:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>113</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:50:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>114</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:50:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>115</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:49:54.805'</string>
</history>
<history>
<datetime>2020-04-23T15:50:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>116</order>
<string>mod program IMS_Adm_Utils code 'import com.aspose.pdf.operators.Do; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("promoteConnectedSubclasses Start"); String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); log.debug("progMap = " + programMap); HashMap requestMap = (HashMap)programMap.get("requestMap");  String[]  parentOID = (String[]) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID[0]); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); newObject.promote(context); MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); } } catch(Exception ex)	{ ex.printStackTrace(); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:52:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>117</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:52:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>118</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:52:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>119</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:52:52.593'</string>
</history>
<history>
<datetime>2020-04-23T15:52:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>120</order>
<string>mod program IMS_Adm_Utils code 'import com.aspose.pdf.operators.Do; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("promoteConnectedSubclasses Start"); String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); log.debug("progMap = " + programMap); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String[]) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); newObject.promote(context); MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); } } catch(Exception ex)	{ ex.printStackTrace(); } } } '</string>
</history>
<history>
<datetime>2020-04-23T15:53:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>121</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T15:53:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>122</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-23T15:53:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>123</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-23-2020 15:53:15.118'</string>
</history>
<history>
<datetime>2020-04-23T15:53:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>124</order>
<string>mod program IMS_Adm_Utils code 'import com.aspose.pdf.operators.Do; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIMenu; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;   import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger"); /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId * Kharitonova A. */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { log.debug("promoteConnectedSubclasses Start"); String objectId = args[0]; try { StringList relObjectsList = new StringList(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }   private StringList findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }   private void promoteRelatedSubclasses(Context context, StringList relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); log.debug("progMap = " + programMap); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); newObject.promote(context); MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); } } catch(Exception ex)	{ ex.printStackTrace(); } } } '</string>
</history>
<history>
<datetime>2020-04-24T09:51:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>125</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-24T09:51:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>126</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-24T09:51:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>127</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-24-2020 09:47:02.152'</string>
</history>
<history>
<datetime>2020-04-24T09:51:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>128</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); newObject.promote(context); MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); } } catch(Exception ex)	{ ex.printStackTrace(); } } } ']]></string>
</history>
<history>
<datetime>2020-04-27T08:55:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>129</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T08:55:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>130</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T08:55:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>131</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 08:55:18.613'</string>
</history>
<history>
<datetime>2020-04-27T08:55:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>132</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; try { List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList); } catch (Exception ex) { ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.popContext(context); ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); ContextUtil.pushContext(context); MqlUtil.mqlCommand(context, "trigger off", true, false); newObject.promote(context); MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.popContext(context); } } catch(Exception ex)	{ ex.printStackTrace(); } } } ']]></string>
</history>
<history>
<datetime>2020-04-27T10:31:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>133</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T10:31:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>134</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T10:31:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>135</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 10:31:03.583'</string>
</history>
<history>
<datetime>2020-04-27T10:31:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>136</order>
<string><![CDATA[mod program IMS_Adm_Utils code "import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Inactive")) action = "Publish"; else if (current.equals("Active")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); } catch (Exception ex) { ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); String mqlCommandDeleteHistory = "mod bus %s delete history promote"; String mqlCommandAddHistory = "mod bus %s add history %s comment ''"; for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); MQLCommand.exec(context, String.format(mqlCommandDeleteHistory, relatedSubclass), false, true); MQLCommand.exec(context, String.format(mqlCommandAddHistory, relatedSubclass, action), false, true); //add history VALUE [comment VALUE] } MqlUtil.mqlCommand(context, "trigger on", true, false); } catch(Exception e) { ContextUtil.popContext(context); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); MqlUtil.mqlCommand(context, "trigger off", true, false); MqlUtil.mqlCommand(context, "trigger on", true, false); } } catch(Exception ex)	{ ]]></string>
</history>
<history>
<datetime>2020-04-27T10:45:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>137</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T10:45:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>138</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T10:45:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>139</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 10:44:58.568'</string>
</history>
<history>
<datetime>2020-04-27T10:45:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>140</order>
<string><![CDATA[mod program IMS_Adm_Utils code "import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; log.debug("current = " + current); try { if (current.equals("Inactive")) action = "Publish"; else if (current.equals("Active")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("action = " + action); promoteRelatedSubclasses(context, relObjectsList, action); } catch (Exception ex) { ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); String mqlCommandDeleteHistory = "mod bus %s delete history promote"; String mqlCommandAddHistory = "mod bus %s add history %s comment ''"; for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); MQLCommand.exec(context, String.format(mqlCommandDeleteHistory, relatedSubclass), false, true); MQLCommand.exec(context, String.format(mqlCommandAddHistory, relatedSubclass, action), false, true); //add history VALUE [comment VALUE] } MqlUtil.mqlCommand(context, "trigger on", true, false); } catch(Exception e) { ContextUtil.abortTransaction(context); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); MqlUtil.mqlCom]]></string>
</history>
<history>
<datetime>2020-04-27T10:50:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>141</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T10:50:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>142</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T10:50:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>143</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 10:50:13.162'</string>
</history>
<history>
<datetime>2020-04-27T10:50:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>144</order>
<string><![CDATA[mod program IMS_Adm_Utils code "import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; log.debug("current = " + current); try { if (current.equals("Inactive")) action = "Publish"; else if (current.equals("Active")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("action = " + action); promoteRelatedSubclasses(context, relObjectsList, action); } catch (Exception ex) { ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); //	String mqlCommandDeleteHistory = "mod bus %s delete history promote"; String mqlCommandAddHistory = "mod bus %s add history %s comment ''"; for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); //		MQLCommand.exec(context, String.format(mqlCommandDeleteHistory, relatedSubclass), false, true); MQLCommand.exec(context, String.format(mqlCommandAddHistory, relatedSubclass, action), false, true); //add history VALUE [comment VALUE] } MqlUtil.mqlCommand(context, "trigger on", true, false); } catch(Exception e) { ContextUtil.abortTransaction(context); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); MqlUtil]]></string>
</history>
<history>
<datetime>2020-04-27T10:52:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>145</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T10:52:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>146</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T10:52:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>147</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 10:52:36.791'</string>
</history>
<history>
<datetime>2020-04-27T10:52:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>148</order>
<string><![CDATA[mod program IMS_Adm_Utils code "import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; log.debug("current = " + current); try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("action = " + action); promoteRelatedSubclasses(context, relObjectsList, action); } catch (Exception ex) { ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); //	String mqlCommandDeleteHistory = "mod bus %s delete history promote"; String mqlCommandAddHistory = "mod bus %s add history %s comment 'Comment'"; for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); //		MQLCommand.exec(context, String.format(mqlCommandDeleteHistory, relatedSubclass), false, true); MQLCommand.exec(context, String.format(mqlCommandAddHistory, relatedSubclass, action), false, true); //add history VALUE [comment VALUE] } MqlUtil.mqlCommand(context, "trigger on", true, false); } catch(Exception e) { ContextUtil.abortTransaction(context); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject.newInstance(context, newObjectId); ]]></string>
</history>
<history>
<datetime>2020-04-27T10:59:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>149</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T10:59:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>150</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T10:59:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>151</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 10:59:26.515'</string>
</history>
<history>
<datetime>2020-04-27T10:59:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>152</order>
<string><![CDATA[mod program IMS_Adm_Utils code "import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; log.debug("current = " + current); try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; MqlUtil.mqlCommand(context, "mod bus %s delete history last", objectId); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("action = " + action); promoteRelatedSubclasses(context, relObjectsList, action); } catch (Exception ex) { ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); String mqlCommandDeleteHistory = "mod bus %s delete history last"; String mqlCommandAddHistory = "mod bus %s add history %s comment 'Comment'"; for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); MqlUtil.mqlCommand(context, "mod bus %s delete history last", relatedSubclass); //		MQLCommand.exec(context, String.format(mqlCommandDeleteHistory, relatedSubclass), false, true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); //add history VALUE [comment VALUE] } MqlUtil.mqlCommand(context, "trigger on", true, false); } catch(Exception e) { ContextUtil.abortTransaction(context); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); S]]></string>
</history>
<history>
<datetime>2020-04-27T11:03:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>153</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T11:03:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>154</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T11:03:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>155</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 11:02:46.029'</string>
</history>
<history>
<datetime>2020-04-27T11:03:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>156</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; log.debug("current = " + current); try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; MqlUtil.mqlCommand(context, "mod bus %s delete history last", objectId); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("action = " + action); promoteRelatedSubclasses(context, relObjectsList, action); } catch (Exception ex) { ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "mod bus %s delete history last", relatedSubclass); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMa]]></string>
</history>
<history>
<datetime>2020-04-27T12:10:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>157</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T12:10:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>158</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T12:10:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>159</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 12:10:22.605'</string>
</history>
<history>
<datetime>2020-04-27T12:10:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>160</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; log.debug("current = " + current); try { ContextUtil.pushContext(context); ContextUtil.startTransaction(context,true); if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; MqlUtil.mqlCommand(context, "mod bus %s delete history last event promote", objectId); ContextUtil.popContext(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("action = " + action); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "mod bus %s delete history last", relatedSubclass); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent =]]></string>
</history>
<history>
<datetime>2020-04-27T12:17:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>161</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T12:17:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>162</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T12:17:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>163</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 12:17:22.672'</string>
</history>
<history>
<datetime>2020-04-27T12:17:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>164</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; log.debug("current = " + current); try { ContextUtil.startTransaction(context,true); ContextUtil.pushContext(context); if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; MqlUtil.mqlCommand(context, "mod bus $1 delete history last event promote", objectId); ContextUtil.popContext(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("action = " + action); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "mod bus %s delete history last", relatedSubclass); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent =]]></string>
</history>
<history>
<datetime>2020-04-27T13:01:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>165</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:01:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>166</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T13:01:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>167</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 12:56:59.905'</string>
</history>
<history>
<datetime>2020-04-27T13:01:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>168</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; log.debug("current = " + current); try { ContextUtil.startTransaction(context,true); ContextUtil.pushContext(context); if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; MqlUtil.mqlCommand(context, "mod bus $1 delete history last event promote", objectId); ContextUtil.popContext(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("action = " + action); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "mod bus $1 delete history last event promote", relatedSubclass); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainO]]></string>
</history>
<history>
<datetime>2020-04-27T13:07:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>169</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:07:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>170</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T13:07:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>171</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 13:07:19.368'</string>
</history>
<history>
<datetime>2020-04-27T13:07:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>172</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; log.debug("current = " + current); try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("action = " + action); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (Str]]></string>
</history>
<history>
<datetime>2020-04-27T14:16:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>173</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T14:16:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>174</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T14:16:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>175</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 14:16:20.163'</string>
</history>
<history>
<datetime>2020-04-27T14:16:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>176</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; log.debug("current = " + current); try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); log.debug("action = " + action); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (Str]]></string>
</history>
<history>
<datetime>2020-04-27T14:45:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>177</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T14:45:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>178</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T14:45:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>179</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 14:45:21.103'</string>
</history>
<history>
<datetime>2020-04-27T14:45:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>180</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = DomainObject]]></string>
</history>
<history>
<datetime>2020-04-27T19:04:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>181</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T19:04:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>182</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T19:04:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>183</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 19:04:28.768'</string>
</history>
<history>
<datetime>2020-04-27T19:04:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>184</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = Doma]]></string>
</history>
<history>
<datetime>2020-04-27T19:47:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>185</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T19:47:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>186</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T19:47:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>187</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 19:47:31.358'</string>
</history>
<history>
<datetime>2020-04-27T19:47:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>188</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (String) paramMap.get("objectId"); DomainObject newObject = Doma]]></string>
</history>
<history>
<datetime>2020-04-27T19:56:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>189</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T19:56:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>190</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T19:56:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>191</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 19:56:01.461'</string>
</history>
<history>
<datetime>2020-04-27T19:56:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>192</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMa]]></string>
</history>
<history>
<datetime>2020-04-27T21:15:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>193</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T21:15:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>194</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T21:15:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>195</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 21:15:17.423'</string>
</history>
<history>
<datetime>2020-04-27T21:15:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>196</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get]]></string>
</history>
<history>
<datetime>2020-04-27T21:54:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>197</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T21:54:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>198</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-27T21:54:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>199</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-27-2020 21:54:02.311'</string>
</history>
<history>
<datetime>2020-04-27T21:54:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>200</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get]]></string>
</history>
<history>
<datetime>2020-04-28T20:26:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>201</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T20:26:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>202</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-28T20:26:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>203</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-28-2020 20:26:10.492'</string>
</history>
<history>
<datetime>2020-04-28T20:26:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>204</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.library.LibraryCentralConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get]]></string>
</history>
<history>
<datetime>2020-04-28T21:13:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>205</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T21:13:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>206</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-28T21:13:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>207</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-28-2020 21:13:38.810'</string>
</history>
<history>
<datetime>2020-04-28T21:13:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>208</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (S]]></string>
</history>
<history>
<datetime>2020-04-28T21:31:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>209</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T21:31:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>210</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-28T21:31:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>211</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-28-2020 21:31:20.264'</string>
</history>
<history>
<datetime>2020-04-28T21:31:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>212</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (S]]></string>
</history>
<history>
<datetime>2020-04-28T21:34:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>213</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T21:34:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>214</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-28T21:34:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>215</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-28-2020 21:33:55.916'</string>
</history>
<history>
<datetime>2020-04-28T21:34:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>216</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (S]]></string>
</history>
<history>
<datetime>2020-04-28T21:34:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>217</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T21:34:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>218</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-28T21:34:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>219</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-28-2020 21:34:39.978'</string>
</history>
<history>
<datetime>2020-04-28T21:34:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>220</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (S]]></string>
</history>
<history>
<datetime>2020-04-28T21:35:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>221</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T21:35:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>222</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-28T21:35:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>223</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-28-2020 21:35:17.102'</string>
</history>
<history>
<datetime>2020-04-28T21:35:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>224</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (S]]></string>
</history>
<history>
<datetime>2020-04-28T21:35:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>225</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T21:35:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>226</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-28T21:35:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>227</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-28-2020 21:35:17.102'</string>
</history>
<history>
<datetime>2020-04-28T21:35:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>228</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (S]]></string>
</history>
<history>
<datetime>2020-04-28T21:36:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>229</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T21:36:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>230</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-28T21:36:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>231</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-28-2020 21:36:21.430'</string>
</history>
<history>
<datetime>2020-04-28T21:36:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>232</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (S]]></string>
</history>
<history>
<datetime>2020-04-28T21:38:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>233</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T21:38:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>234</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-28T21:38:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>235</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-28-2020 21:37:57.116'</string>
</history>
<history>
<datetime>2020-04-28T21:38:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>236</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (S]]></string>
</history>
<history>
<datetime>2020-04-29T10:46:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>237</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T10:46:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>238</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T10:46:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>239</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 10:46:32.513'</string>
</history>
<history>
<datetime>2020-04-29T10:46:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>240</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (S]]></string>
</history>
<history>
<datetime>2020-04-29T10:48:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>241</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T10:48:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>242</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T10:48:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>243</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 10:47:59.876'</string>
</history>
<history>
<datetime>2020-04-29T10:48:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>244</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.library.Libraries; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)progr]]></string>
</history>
<history>
<datetime>2020-04-29T11:01:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>245</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T11:01:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>246</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T11:01:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>247</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 11:00:57.943'</string>
</history>
<history>
<datetime>2020-04-29T11:01:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>248</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.library.Libraries; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)progr]]></string>
</history>
<history>
<datetime>2020-04-29T11:06:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>249</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T11:06:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>250</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T11:06:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>251</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 11:06:48.911'</string>
</history>
<history>
<datetime>2020-04-29T11:06:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>252</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.library.Libraries; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)progr]]></string>
</history>
<history>
<datetime>2020-04-29T11:25:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>253</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T11:25:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>254</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T11:25:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>255</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 11:20:40.332'</string>
</history>
<history>
<datetime>2020-04-29T11:25:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>256</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap"); String newObjectId = (]]></string>
</history>
<history>
<datetime>2020-04-29T11:26:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>257</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T11:26:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>258</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T11:26:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>259</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 11:26:25.241'</string>
</history>
<history>
<datetime>2020-04-29T11:26:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>260</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T11:28:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>261</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T11:28:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>262</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T11:28:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>263</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 11:28:01.309'</string>
</history>
<history>
<datetime>2020-04-29T11:28:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>264</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T11:55:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>265</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T11:55:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>266</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T11:55:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>267</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 11:55:34.157'</string>
</history>
<history>
<datetime>2020-04-29T11:55:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>268</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T13:52:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>269</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T13:52:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>270</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T13:52:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>271</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 13:52:15.812'</string>
</history>
<history>
<datetime>2020-04-29T13:52:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>272</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T13:57:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>273</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T13:57:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>274</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T13:57:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>275</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 13:57:12.916'</string>
</history>
<history>
<datetime>2020-04-29T13:57:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>276</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T14:06:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>277</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T14:06:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>278</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T14:06:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>279</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 14:06:18.918'</string>
</history>
<history>
<datetime>2020-04-29T14:06:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>280</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T16:22:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>281</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T16:22:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>282</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T16:22:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>283</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 16:22:02.732'</string>
</history>
<history>
<datetime>2020-04-29T16:22:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>284</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T16:30:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>285</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T16:30:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>286</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T16:30:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>287</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 16:30:40.616'</string>
</history>
<history>
<datetime>2020-04-29T16:30:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>288</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T16:38:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>289</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T16:38:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>290</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T16:38:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>291</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 16:38:02.501'</string>
</history>
<history>
<datetime>2020-04-29T16:38:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>292</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T16:51:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>293</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T16:51:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>294</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T16:51:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>295</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 16:51:13.258'</string>
</history>
<history>
<datetime>2020-04-29T16:51:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>296</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T18:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>297</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T18:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>298</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T18:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>299</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 18:55:59.253'</string>
</history>
<history>
<datetime>2020-04-29T18:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>300</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T19:09:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>301</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T19:09:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>302</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T19:09:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>303</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 19:09:42.340'</string>
</history>
<history>
<datetime>2020-04-29T19:09:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>304</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T19:11:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>305</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T19:11:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>306</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T19:11:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>307</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 19:11:49.661'</string>
</history>
<history>
<datetime>2020-04-29T19:11:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>308</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T19:14:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>309</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T19:14:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>310</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T19:14:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>311</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 19:13:54.648'</string>
</history>
<history>
<datetime>2020-04-29T19:14:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>312</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T19:17:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>313</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T19:17:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>314</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T19:17:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>315</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 19:13:54.648'</string>
</history>
<history>
<datetime>2020-04-29T19:17:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>316</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T19:20:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>317</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T19:20:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>318</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T19:20:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>319</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 19:20:40.136'</string>
</history>
<history>
<datetime>2020-04-29T19:20:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>320</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T20:28:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>321</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T20:28:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>322</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T20:28:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>323</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 20:28:14.987'</string>
</history>
<history>
<datetime>2020-04-29T20:28:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>324</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-29T20:45:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>325</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T20:45:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>326</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-29T20:45:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>327</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-29-2020 20:44:58.467'</string>
</history>
<history>
<datetime>2020-04-29T20:45:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>328</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T00:27:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>329</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T00:27:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>330</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T00:27:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>331</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 00:26:43.343'</string>
</history>
<history>
<datetime>2020-04-30T00:27:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>332</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T00:44:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>333</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T00:44:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>334</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T00:44:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>335</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 00:44:35.952'</string>
</history>
<history>
<datetime>2020-04-30T00:44:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>336</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T00:46:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>337</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T00:46:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>338</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T00:46:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>339</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 00:46:46.246'</string>
</history>
<history>
<datetime>2020-04-30T00:46:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>340</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T00:47:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>341</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T00:47:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>342</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T00:47:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>343</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 00:47:16.903'</string>
</history>
<history>
<datetime>2020-04-30T00:47:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>344</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T00:51:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>345</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T00:51:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>346</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T00:51:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>347</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 00:51:05.431'</string>
</history>
<history>
<datetime>2020-04-30T00:51:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>348</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T01:02:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>349</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T01:02:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>350</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T01:02:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>351</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 01:01:37.309'</string>
</history>
<history>
<datetime>2020-04-30T01:02:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>352</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T01:12:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>353</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T01:12:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>354</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T01:12:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>355</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 01:11:49.476'</string>
</history>
<history>
<datetime>2020-04-30T01:12:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>356</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T01:12:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>357</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T01:12:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>358</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T01:12:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>359</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 01:12:48.586'</string>
</history>
<history>
<datetime>2020-04-30T01:12:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>360</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T01:15:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>361</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T01:15:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>362</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T01:15:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>363</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 01:14:57.122'</string>
</history>
<history>
<datetime>2020-04-30T01:15:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>364</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T01:19:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>365</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T01:19:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>366</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T01:19:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>367</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 01:19:15.484'</string>
</history>
<history>
<datetime>2020-04-30T01:19:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>368</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T01:37:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>369</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T01:37:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>370</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T01:37:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>371</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 01:37:26.968'</string>
</history>
<history>
<datetime>2020-04-30T01:37:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>372</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T01:38:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>373</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T01:38:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>374</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T01:38:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>375</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 01:38:13.656'</string>
</history>
<history>
<datetime>2020-04-30T01:38:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>376</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T02:12:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>377</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T02:12:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>378</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T02:12:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>379</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 02:12:28.795'</string>
</history>
<history>
<datetime>2020-04-30T02:12:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>380</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-04-30T02:54:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>381</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-30T02:54:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>382</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-04-30T02:54:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>383</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '04-30-2020 02:53:53.773'</string>
</history>
<history>
<datetime>2020-04-30T02:54:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>384</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-05-05T20:49:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>385</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-05T20:49:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>386</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-05T20:49:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>387</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-05-2020 20:49:43.677'</string>
</history>
<history>
<datetime>2020-05-05T20:49:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>388</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-05-06T09:32:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>389</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T09:32:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>390</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T09:32:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>391</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 09:32:14.792'</string>
</history>
<history>
<datetime>2020-05-06T09:32:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>392</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass,Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("p]]></string>
</history>
<history>
<datetime>2020-05-06T09:39:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>393</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T09:39:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>394</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T09:39:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>395</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 09:39:32.291'</string>
</history>
<history>
<datetime>2020-05-06T09:39:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>396</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T16:30:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>397</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T16:30:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>398</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T16:30:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>399</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 16:28:44.123'</string>
</history>
<history>
<datetime>2020-05-06T16:30:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>400</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T16:36:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>401</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T16:36:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>402</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T16:36:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>403</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 16:36:44.908'</string>
</history>
<history>
<datetime>2020-05-06T16:36:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>404</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T16:44:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>405</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T16:44:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>406</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T16:44:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>407</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 16:43:52.733'</string>
</history>
<history>
<datetime>2020-05-06T16:44:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>408</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T16:44:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>409</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T16:44:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>410</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T16:44:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>411</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 16:44:30.624'</string>
</history>
<history>
<datetime>2020-05-06T16:44:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>412</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T16:48:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>413</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T16:48:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>414</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T16:48:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>415</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 16:48:19.253'</string>
</history>
<history>
<datetime>2020-05-06T16:48:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>416</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T16:49:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>417</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T16:49:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>418</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T16:49:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>419</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 16:49:18.178'</string>
</history>
<history>
<datetime>2020-05-06T16:49:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>420</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T16:50:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>421</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T16:50:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>422</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T16:50:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>423</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 16:50:44.682'</string>
</history>
<history>
<datetime>2020-05-06T16:50:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>424</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T16:51:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>425</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T16:51:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>426</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T16:51:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>427</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 16:51:15.214'</string>
</history>
<history>
<datetime>2020-05-06T16:51:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>428</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T17:01:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>429</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T17:01:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>430</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T17:01:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>431</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 17:01:25.516'</string>
</history>
<history>
<datetime>2020-05-06T17:01:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>432</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T17:04:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>433</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T17:04:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>434</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T17:04:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>435</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 17:04:25.547'</string>
</history>
<history>
<datetime>2020-05-06T17:04:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>436</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T17:14:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>437</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T17:14:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>438</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T17:14:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>439</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 17:14:30.322'</string>
</history>
<history>
<datetime>2020-05-06T17:14:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>440</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T17:28:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>441</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T17:28:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>442</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T17:28:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>443</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 17:28:35.225'</string>
</history>
<history>
<datetime>2020-05-06T17:28:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>444</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T17:52:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>445</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T17:52:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>446</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T17:52:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>447</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 17:52:42.583'</string>
</history>
<history>
<datetime>2020-05-06T17:52:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>448</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
<history>
<datetime>2020-05-06T17:54:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>449</order>
<string>mod program IMS_Adm_Utils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T17:54:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>450</order>
<string>mod program IMS_Adm_Utils java</string>
</history>
<history>
<datetime>2020-05-06T17:54:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>451</order>
<string>mod program IMS_Adm_Utils add property 'file date' value '05-06-2020 17:53:56.681'</string>
</history>
<history>
<datetime>2020-05-06T17:54:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>452</order>
<string><![CDATA[mod program IMS_Adm_Utils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("KharitonovaLogger");  /** * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses * args[0] - objectId */ public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { String objectId = args[0]; String current = args[1]; String action = "promote"; try { if (current.equals("Active")) action = "Publish"; else if (current.equals("Obsolete")) action = "Delete"; List<String> relObjectsList = new ArrayList<String>(); DomainObject classificationObject = DomainObject.newInstance(context, objectId); relObjectsList.addAll(findRelatedSubclasses(context, classificationObject)); promoteRelatedSubclasses(context, relObjectsList, action); ContextUtil.startTransaction(context,true); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action); ContextUtil.commitTransaction(context); } catch (Exception ex) { ContextUtil.abortTransaction(context); ex.printStackTrace(); } }  private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<String>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.add(DomainConstants.SELECT_ID); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "IMS_Adm_Subclass", "IMS_Adm_GeneralClass", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; }  private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException { try { ContextUtil.startTransaction(context, true); MqlUtil.mqlCommand(context, "trigger off", true, false); for (String relatedSubclass : relObjectsList) { DomainObject relObject = DomainObject.newInstance(context, relatedSubclass); relObject.promote(context); MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action); } MqlUtil.mqlCommand(context, "trigger on", true, false); ContextUtil.commitTransaction(context); } catch(Exception e) { ContextUtil.abortTransaction(context); e.printStackTrace(); } }  /** * Used in postProcess (command IMS_Adm_CreateGeneralClass) * Promote ne subclass to Active state, if parent is active already * args[0] */ public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap requestMap = (HashMap)programMap.get("requestMap");  String  parentOID = (String) requestMap.get("parentOID"); DomainObject parent = DomainObject.newInstance(context, parentOID); String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT); if (current.equals("Active")) { HashMap paramMap = (HashMap)programMap.get("paramMap")]]></string>
</history>
</historyList>
</adminProperties>
<code><![CDATA[import com.matrixone.apps.common.Download;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.ContextUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.MqlUtil;
import com.matrixone.apps.domain.DomainRelationship;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.db.MQLCommand;
import matrix.db.BusinessObject;
import matrix.util.MatrixException;
import matrix.util.StringList;
import org.apache.log4j.Logger;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class ${CLASSNAME} {
	private static final Logger log = Logger.getLogger("KharitonovaLogger");

	/**
	 * Used in trigger IMS_Adm_PolicyAdmGeneralLibraryPromoteAction Promote all connected Subclasses
	 * args[0] - objectId
	 */
	public void promoteConnectedSubclasses(Context context, String[] args) throws Exception {
		String objectId = args[0];
		String current = args[1];
		String action = "promote";
		try {
			if (current.equals("Active"))
				action = "Publish";
			else if (current.equals("Obsolete"))
				action = "Delete";
			List<String> relObjectsList = new ArrayList<String>();
			DomainObject classificationObject = DomainObject.newInstance(context, objectId);
			relObjectsList.addAll(findRelatedSubclasses(context, classificationObject));
			promoteRelatedSubclasses(context, relObjectsList, action);
			ContextUtil.startTransaction(context,true);
			MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",objectId, action, action);
			ContextUtil.commitTransaction(context);
		} catch (Exception ex) {
			ContextUtil.abortTransaction(context);
			ex.printStackTrace();
		}
	}

	private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException {
		List<String> relObjectsList = new ArrayList<String>();
		StringList QAGbusSelects = new StringList();  // Object
		QAGbusSelects.add(DomainConstants.SELECT_ID);
		QAGbusSelects.add(DomainConstants.SELECT_CURRENT);
		StringList QAGrelSelects = new StringList();  // Rel
		MapList mlResult = classificationObject.getRelatedObjects(context,
				"IMS_Adm_Subclass",
				"IMS_Adm_GeneralClass",
				QAGbusSelects,
				QAGrelSelects,
				/*from*/ false,
				/*to*/ true,
				(short) 0,
				null,
				null,
				0);
		for (Object relatedSubclass: mlResult) {
			Map relSubclass = (Map) relatedSubclass;
			String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT);
			if (!relSubclassCurrentState.equals("Obsolete")) {
				String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID);
				relObjectsList.add(relSubclassId);
			}
		}
		return relObjectsList;
	}

	private void promoteRelatedSubclasses(Context context, List<String> relObjectsList, String action) throws MatrixException {
		try {
			ContextUtil.startTransaction(context, true);
			MqlUtil.mqlCommand(context, "trigger off", true, false);
			for (String relatedSubclass : relObjectsList) {
				DomainObject relObject = DomainObject.newInstance(context, relatedSubclass);
				relObject.promote(context);
				MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",relatedSubclass, action, action);
			}
			MqlUtil.mqlCommand(context, "trigger on", true, false);
			ContextUtil.commitTransaction(context);
		} catch(Exception e) {
			ContextUtil.abortTransaction(context);
			e.printStackTrace();
		}
	}

	/**
	 * Used in postProcess (command IMS_Adm_CreateGeneralClass)
	 * Promote ne subclass to Active state, if parent is active already
	 * args[0]
	 */
	public void promoteNewSubclassInActiveParent(Context context, String[] args) throws Exception {
		try {
			HashMap programMap = (HashMap) JPO.unpackArgs(args);
			HashMap requestMap = (HashMap)programMap.get("requestMap");

			String  parentOID = (String) requestMap.get("parentOID");
			DomainObject parent = DomainObject.newInstance(context, parentOID);
			String current = parent.getInfo(context, DomainConstants.SELECT_CURRENT);
			if (current.equals("Active")) {
				HashMap paramMap = (HashMap)programMap.get("paramMap");
				String newObjectId = (String) paramMap.get("objectId");
				DomainObject newObject = DomainObject.newInstance(context, newObjectId);
				MqlUtil.mqlCommand(context, "trigger off", true, false);
				newObject.promote(context);
				MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3",newObjectId, "Publish", "Publish");
				MqlUtil.mqlCommand(context, "trigger on", true, false);
			}

		}
		
		catch(Exception ex)	{
			ex.printStackTrace();
		}
	}

	/**
	 * Used in trigger IMS_Adm_RelationIMSAdmSubclassCreateAction________CreateSubclasses
	 * args[0] - objectId
	 */
	public static void makeGeneralClassRevised (Context context, String[] args) throws Exception
	{
		try {
			//trigger needed to override default trigger from Subclass relation
			String objectID = args[0];
		}
		catch(Exception ex)	{
			ex.printStackTrace();
		}
	} 
	/**
	 * Used for JSP IMS_Adm_Revise.jsp, creates new revision for IMS_Adm_GeneralClass
	 * args[0] - objectId
	 */
	public HashMap createNewClassRevision (Context context, String[] args) throws Exception
	{
		HashMap returnMap 	= new HashMap();
		Map paramMap = (Map) JPO.unpackArgs(args);
	    String objectID = (String) paramMap.get("objectId");
		String parentID = "";
		try {
			System.out.println("1");
			System.out.println("2");
			DomainObject generalClass = DomainObject.newInstance(context, objectID);
			System.out.println("21");
			BusinessObject lastClassRevision = generalClass.getLastRevision(context);
			System.out.println("22");
			BusinessObject newRevision = lastClassRevision.revise(context,lastClassRevision.getNextSequence(context),lastClassRevision.getVault());
			System.out.println("3");

			newRevision.open(context);
			String newClassId = newRevision.getObjectId();
			newRevision.close(context);
			DomainObject newClassRevision = new DomainObject(newClassId);
			lastClassRevision.open(context);
			String lastClassRevisionId = lastClassRevision.getObjectId();
			lastClassRevision.close(context);
			DomainObject oldClass = new DomainObject(lastClassRevisionId);
			newClassRevision.setState(context, "Active");
			oldClass.setState(context, "Obsolete");
			System.out.println("4");
							
			StringList QAGbusSelects = new StringList();  // Object
			QAGbusSelects.add(DomainConstants.SELECT_ID);
			StringList QAGrelSelects = new StringList();  // Rel
			QAGrelSelects.add(DomainConstants.SELECT_RELATIONSHIP_ID);
			Map parent = oldClass.getRelatedObject(context,"Subclass",false,QAGbusSelects,QAGrelSelects);	
			MapList mlResult = oldClass.getRelatedObjects(context,
						"Subclass",
						"IMS_Adm_GeneralClass",
						QAGbusSelects,
						QAGrelSelects,
						/*from*/ false,
						/*to*/ true,
						(short) 0,
						null,
						null,
						0);
						System.out.println("1");
						
			MapList classifiedItem = newClassRevision.getRelatedObjects(context,
						"Classified Item",
						"*",
						QAGbusSelects,
						QAGrelSelects,
						/*from*/ false,
						/*to*/ true,
						(short) 0,
						null,
						null,
						0);
			DomainRelationship.disconnect(context, parent.get(DomainConstants.SELECT_RELATIONSHIP_ID).toString());
			DomainRelationship.connect(context, parent.get(DomainConstants.SELECT_ID).toString(), "IMS_Adm_Subclass", newClassId, true);
			for (Object relatedSubclass: mlResult) {
				Map relSubclass = (Map) relatedSubclass;
				DomainRelationship.disconnect(context, relSubclass.get(DomainConstants.SELECT_RELATIONSHIP_ID).toString());
				String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID);
				DomainRelationship.connect(context,newClassId, "IMS_Adm_Subclass", relSubclassId, true);		
			}
			System.out.println("1");
			for (Object relatedItem: classifiedItem) {
				Map item = (Map) relatedItem;
				DomainRelationship.disconnect(context, item.get(DomainConstants.SELECT_RELATIONSHIP_ID).toString());			
			}
			parentID = parent.get(DomainConstants.SELECT_ID).toString();
			
			returnMap.put("parentID", parentID);
			returnMap.put("newClassId", newClassId);
		}
		catch(Exception ex)	{
			ex.printStackTrace();
		}
		
		return returnMap;
	} 

}
]]></code>
<javaProgram/>
</program>
</ematrix>
