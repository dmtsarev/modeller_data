<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright (c) 2010-2014 Dassault Systemes, 1993 - 2014 -->
<!DOCTYPE ematrix SYSTEM "ematrixml.dtd">
<ematrix>
<creationProperties>
<release>3DEXPERIENCE R2019x HotFix 7(29.0.0.0)</release>
<datetime>2020-07-13T05:28:51Z</datetime>
<event>export</event>
<dtdInfo>&ematrixProductDtd;</dtdInfo>
</creationProperties>


<program id="0.1.18690.37480">
<adminProperties>
<name>IMS_Adm_TypeChooserSupport</name>
<creationInfo>
<datetime>2020-04-15T14:30:04Z</datetime>
</creationInfo>
<modificationInfo>
<datetime>2020-05-07T17:25:35Z</datetime>
</modificationInfo>
<propertyList count="1">
<property>
<name>file date</name>
<value>04-29-2020 08:02:50.592</value>
<flags>0</flags>
</property>
</propertyList>
<historyList count="248">
<history>
<datetime>2020-04-15T14:30:04Z</datetime>
<agent>admin_platform</agent>
<event>create</event>
<order>1</order>
<string>add program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-15T14:30:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>2</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-15T14:30:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>3</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-15-2020 14:28:33.818'</string>
</history>
<history>
<datetime>2020-04-15T14:30:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>4</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context;  public class ${CLASSNAME} {  public void setSelectedFlag(Context context, String[] args) { for (String item: args) { System.out.println("flag argument: " + item); } }  } '</string>
</history>
<history>
<datetime>2020-04-15T15:27:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>5</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-15T15:27:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>6</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-15T15:27:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>7</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-15-2020 15:27:16.536'</string>
</history>
<history>
<datetime>2020-04-15T15:27:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>8</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context;  public class ${CLASSNAME} {  public void setSelectedFlag(Context context, String[] args) { System.out.println("flag argument: "); for (String item: args) { System.out.println("flag argument: " + item); } }  } '</string>
</history>
<history>
<datetime>2020-04-15T15:36:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>9</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-15T15:36:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>10</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-15T15:36:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>11</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-15-2020 15:36:42.845'</string>
</history>
<history>
<datetime>2020-04-15T15:36:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>12</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context;  public class ${CLASSNAME} {  public boolean setSelectedFlag(Context context, String[] args) { System.out.println("flag argument: "); for (String item: args) { System.out.println("flag argument: " + item); } return true; }  } '</string>
</history>
<history>
<datetime>2020-04-15T15:45:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>13</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-15T15:45:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>14</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-15T15:45:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>15</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-15-2020 15:45:30.602'</string>
</history>
<history>
<datetime>2020-04-15T15:45:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>16</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} { public void setSelectedFlag(Context context, String[] args) { Map programMap = (Map) JPO.unpackArgs(args); for(Map.Entry entry: programMap.entrySet()) { System.out.println("flag argument key: " + entry.getKey()); System.out.println("flag argument value: " + entry.getValue()); } } } '</string>
</history>
<history>
<datetime>2020-04-15T16:02:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>17</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-15T16:02:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>18</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-15T16:02:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>19</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-15-2020 16:02:29.063'</string>
</history>
<history>
<datetime>2020-04-15T16:02:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>20</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} { public String setSelectedFlag(Context context, String[] args) { System.out.println("flag argument key: triggered"): Map programMap = (Map) JPO.unpackArgs(args); for(Map.Entry entry: programMap.entrySet()) { System.out.println("flag argument key: " + entry.getKey()); System.out.println("flag argument value: " + entry.getValue()); } } } '</string>
</history>
<history>
<datetime>2020-04-15T18:08:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>21</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-15T18:08:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>22</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-15T18:08:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>23</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-15-2020 18:08:04.187'</string>
</history>
<history>
<datetime>2020-04-15T18:08:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>24</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} { public String setSelectedFlag(Context context, String[] args) { System.out.println("flag argument key: triggered"): Map programMap = (Map) JPO.unpackArgs(args); for(Map.Entry entry: programMap.entrySet()) { System.out.println("flag argument key: " + entry.getKey()); System.out.println("flag argument value: " + entry.getValue()); } return "hello" } } '</string>
</history>
<history>
<datetime>2020-04-23T19:43:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>25</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T19:43:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>26</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T19:43:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>27</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 18:11:27.577'</string>
</history>
<history>
<datetime>2020-04-23T19:43:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>28</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} { public String setSelectedFlag(Context context, String[] args) { System.out.println("flag argument key: triggered"): Map programMap = (Map) JPO.unpackArgs(args); for(Map.Entry entry: programMap.entrySet()) { System.out.println("flag argument key: " + entry.getKey()); System.out.println("flag argument value: " + entry.getValue()); } return "hello" } } '</string>
</history>
<history>
<datetime>2020-04-23T19:57:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>29</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T19:57:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>30</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T19:57:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>31</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 19:56:37.018'</string>
</history>
<history>
<datetime>2020-04-23T19:57:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>32</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME} {  }  public String setSelectedFlag(Context context, String[] args) { System.out.println("flag argument key: triggered"): Map programMap = (Map) JPO.unpackArgs(args); for(Map.Entry entry: programMap.entrySet()) { System.out.println("flag argument key: " + entry.getKey()); System.out.println("flag argument value: " + entry.getValue()); } return "hello" } } '</string>
</history>
<history>
<datetime>2020-04-23T20:28:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>33</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T20:28:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>34</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T20:28:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>35</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 20:28:39.694'</string>
</history>
<history>
<datetime>2020-04-23T20:28:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>36</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() {  }  public String setSelectedFlag(Context context, String[] args) { System.out.println("flag argument key: triggered"): Map programMap = (Map) JPO.unpackArgs(args); for(Map.Entry entry: programMap.entrySet()) { System.out.println("flag argument key: " + entry.getKey()); System.out.println("flag argument value: " + entry.getValue()); } return "hello" } } '</string>
</history>
<history>
<datetime>2020-04-23T20:29:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>37</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T20:29:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>38</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T20:29:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>39</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 20:29:49.572'</string>
</history>
<history>
<datetime>2020-04-23T20:29:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>40</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() {  }  public String setSelectedFlag(Context context, String[] args) { System.out.println("flag argument key: triggered"): Map programMap = (Map) JPO.unpackArgs(args); for(Map.Entry entry: programMap.entrySet()) { System.out.println("flag argument key: " + entry.getKey()); System.out.println("flag argument value: " + entry.getValue()); } return "hello"; } } '</string>
</history>
<history>
<datetime>2020-04-23T20:31:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>41</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T20:31:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>42</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T20:31:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>43</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 20:31:15.104'</string>
</history>
<history>
<datetime>2020-04-23T20:31:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>44</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() {  }  public String setSelectedFlag(Context context, String[] args) { System.out.println("flag argument key: triggered"); Map programMap = (Map) JPO.unpackArgs(args); for(Map.Entry entry: programMap.entrySet()) { System.out.println("flag argument key: " + entry.getKey()); System.out.println("flag argument value: " + entry.getValue()); } return "hello"; } } '</string>
</history>
<history>
<datetime>2020-04-23T20:32:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>45</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T20:32:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>46</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T20:32:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>47</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 20:32:23.671'</string>
</history>
<history>
<datetime>2020-04-23T20:32:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>48</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() {  }  public String setSelectedFlag(Context context, String[] args) { System.out.println("flag argument key: triggered"); Map programMap = (Map) JPO.unpackArgs(args); return "hello"; } } '</string>
</history>
<history>
<datetime>2020-04-23T20:34:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>49</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T20:34:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>50</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T20:34:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>51</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 20:33:56.678'</string>
</history>
<history>
<datetime>2020-04-23T20:34:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>52</order>
<string>mod program IMS_Adm_TypeChooserSupport code 'import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() {  }  public String setSelectedFlag(Context context, String[] args) { System.out.println("flag argument key: triggered"); return "hello"; } } '</string>
</history>
<history>
<datetime>2020-04-23T22:16:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>53</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T22:16:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>54</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T22:16:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>55</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 22:15:01.761'</string>
</history>
<history>
<datetime>2020-04-23T22:16:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>56</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() { }  public String getSelectedTypes(Context context, String[] args) throws Exception{ Map<String, Object> programMap = JPO.unpackArgs(args); Object objectId = programMap.get("objectId"); String typesValue = ""; if(!(objectId instanceof String)) { throw new Exception(); } try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception{ return "Paretn Types"; } } ']]></string>
</history>
<history>
<datetime>2020-04-23T22:19:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>57</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T22:19:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>58</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T22:19:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>59</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 22:19:12.794'</string>
</history>
<history>
<datetime>2020-04-23T22:19:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>60</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() { }  public String getSelectedTypes(Context context, String[] args) throws Exception{ Map<String, Object> programMap = JPO.unpackArgs(args); Object objectId = programMap.get("objectId"); System.out.println(objectId); String typesValue = ""; if(!(objectId instanceof String)) { throw new Exception(); } try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception{ return "Paretn Types"; } } ']]></string>
</history>
<history>
<datetime>2020-04-23T22:21:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>61</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T22:21:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>62</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T22:21:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>63</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 22:21:45.712'</string>
</history>
<history>
<datetime>2020-04-23T22:21:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>64</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() { }  public String getSelectedTypes(Context context, String[] args) throws Exception{ Map<String, Object> programMap = JPO.unpackArgs(args); for(String key: programMap.keySet()) { System.out.println(key); } Object objectId = programMap.get("objectId"); String typesValue = ""; if(!(objectId instanceof String)) { throw new Exception(); } try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception{ return "Paretn Types"; } } ']]></string>
</history>
<history>
<datetime>2020-04-23T22:25:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>65</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T22:25:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>66</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T22:25:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>67</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 22:25:10.854'</string>
</history>
<history>
<datetime>2020-04-23T22:25:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>68</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() { }  public String getSelectedTypes(Context context, String[] args) throws Exception{ Map<String, Object> programMap = JPO.unpackArgs(args); for(String key: programMap.keySet()) { System.out.println(key); } for(String key: ((Map<String, Object>)programMap.get("paramMap")).keySet()) { System.out.println(key); } Object objectId = programMap.get("objectId"); String typesValue = ""; if(!(objectId instanceof String)) { throw new Exception(); } try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception{ return "Paretn Types"; } } ']]></string>
</history>
<history>
<datetime>2020-04-23T22:27:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>69</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T22:27:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>70</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T22:27:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>71</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 22:26:55.995'</string>
</history>
<history>
<datetime>2020-04-23T22:27:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>72</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() { }  public String getSelectedTypes(Context context, String[] args) throws Exception{ Map<String, Object> programMap = JPO.unpackArgs(args); Map<String, Object) paramMap = programMap.get("paramMap")) Object objectId = paramMap.get("objectId"); String typesValue = ""; if(!(objectId instanceof String)) { throw new Exception(); } try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception{ return "Paretn Types"; } } ']]></string>
</history>
<history>
<datetime>2020-04-23T22:27:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>73</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T22:27:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>74</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T22:27:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>75</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 22:27:38.026'</string>
</history>
<history>
<datetime>2020-04-23T22:27:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>76</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() { }  public String getSelectedTypes(Context context, String[] args) throws Exception{ Map<String, Object> programMap = JPO.unpackArgs(args); Map<String, Object) paramMap = programMap.get("paramMap")); Object objectId = paramMap.get("objectId"); String typesValue = ""; if(!(objectId instanceof String)) { throw new Exception(); } try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception{ return "Paretn Types"; } } ']]></string>
</history>
<history>
<datetime>2020-04-23T22:29:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>77</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-23T22:29:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>78</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-23T22:29:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>79</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-23-2020 22:29:03.541'</string>
</history>
<history>
<datetime>2020-04-23T22:29:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>80</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() { }  public String getSelectedTypes(Context context, String[] args) throws Exception{ Map<String, Object> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = (Map<String, Object>) programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; if(!(objectId instanceof String)) { throw new Exception(); } try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception{ return "Paretn Types"; } } ']]></string>
</history>
<history>
<datetime>2020-04-24T08:47:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>81</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-24T08:47:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>82</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-24T08:47:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>83</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-24-2020 08:46:55.503'</string>
</history>
<history>
<datetime>2020-04-24T08:47:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>84</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, String>> programMap = JPO.unpackArgs(args); Map<String, String> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception{ return "Parent Types"; }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, String>> programMap = JPO.unpackArgs(args); Map<String, String> paramMap = programMap.get("paramMap"); for(Map.Entry<String, String> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } } } ']]></string>
</history>
<history>
<datetime>2020-04-24T08:51:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>85</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-24T08:51:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>86</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-24T08:51:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>87</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-24-2020 08:51:28.824'</string>
</history>
<history>
<datetime>2020-04-24T08:51:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>88</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, String>> programMap = JPO.unpackArgs(args); Map<String, String> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception{ return "Paretn Types"; }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } } } ']]></string>
</history>
<history>
<datetime>2020-04-24T08:55:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>89</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-24T08:55:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>90</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-24T08:55:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>91</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-24-2020 08:55:25.295'</string>
</history>
<history>
<datetime>2020-04-24T08:55:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>92</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import matrix.db.JPO;  import java.util.Map;  public class ${CLASSNAME} {  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception{ return "Paretn Types"; }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
<history>
<datetime>2020-04-27T12:38:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>93</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T12:38:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>94</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T12:38:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>95</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 12:38:30.660'</string>
</history>
<history>
<datetime>2020-04-27T12:38:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>96</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "IMS_ClassificationTypes";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringBuilder stringBuilder = new StringBuilder(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.append(item + ","); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE)); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, QAGrelSelects, /*from*/ false, /*to*/ true, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T12:48:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>97</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T12:48:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>98</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T12:48:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>99</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 12:48:36.857'</string>
</history>
<history>
<datetime>2020-04-27T12:48:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>100</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "IMS_ClassificationTypes";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringBuilder stringBuilder = new StringBuilder(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.append(item + ","); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE)); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, QAGrelSelects, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID); relObjectsList.add(relSubclassId); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T12:51:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>101</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T12:51:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>102</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T12:51:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>103</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 12:51:09.964'</string>
</history>
<history>
<datetime>2020-04-27T12:51:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>104</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "IMS_ClassificationTypes";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringBuilder stringBuilder = new StringBuilder(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.append(item + ","); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE)); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, QAGrelSelects, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); relObjectsList.add(relSubclassId); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T12:56:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>105</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T12:56:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>106</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T12:56:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>107</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 12:56:38.578'</string>
</history>
<history>
<datetime>2020-04-27T12:56:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>108</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[\"IMS_ClassificationTypes\"]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringBuilder stringBuilder = new StringBuilder(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.append(item + ","); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE)); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, QAGrelSelects, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSubclassId = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); relObjectsList.add(relSubclassId); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T13:00:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>109</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:00:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>110</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T13:00:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>111</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 13:00:50.765'</string>
</history>
<history>
<datetime>2020-04-27T13:00:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>112</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[\"IMS_ClassificationTypes\"]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringBuilder stringBuilder = new StringBuilder(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.append(item + ","); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE)); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); StringList QAGrelSelects = new StringList();  // Rel MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, QAGrelSelects, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSuperObject = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); System.out.println(relSuperObject + ":" + relSuperObjectTypes); relObjectsList.add(relSuperObjectTypes); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T13:07:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>113</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:07:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>114</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T13:07:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>115</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 13:07:47.010'</string>
</history>
<history>
<datetime>2020-04-27T13:07:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>116</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[\"IMS_ClassificationTypes\"]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.add(item); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { StringList relObjectsList = new StringList(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE)); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSuperObject = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); System.out.println(relSuperObject + ":" + relSuperObjectTypes); relObjectsList.add(relSuperObjectTypes); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T13:17:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>117</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:17:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>118</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T13:17:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>119</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 13:17:50.736'</string>
</history>
<history>
<datetime>2020-04-27T13:17:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>120</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[attribute_IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.add(item); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE)); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSuperObject = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); System.out.println(relSuperObject + ":" + relSuperObjectTypes); relObjectsList.add(relSuperObjectTypes); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T13:20:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>121</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:20:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>122</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T13:20:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>123</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 13:20:05.881'</string>
</history>
<history>
<datetime>2020-04-27T13:20:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>124</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "IMS_ClassificationTypes";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.add(item); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE)); QAGbusSelects.add(DomainConstants.SELECT_CURRENT); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSuperObject = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); System.out.println(relSuperObject + ":" + relSuperObjectTypes); relObjectsList.add(relSuperObjectTypes); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T13:24:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>125</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:24:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>126</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T13:24:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>127</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 13:23:46.904'</string>
</history>
<history>
<datetime>2020-04-27T13:24:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>128</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "IMS_ClassificationTypes";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.add(item); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSuperObject = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); System.out.println(relSuperObject + ":" + relSuperObjectTypes); relObjectsList.add(relSuperObjectTypes); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T13:29:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>129</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:29:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>130</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T13:29:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>131</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 13:29:09.456'</string>
</history>
<history>
<datetime>2020-04-27T13:29:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>132</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[\"IMS_ClassificationTypes\"]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.add(item); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSuperObject = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); System.out.println(relSuperObject + ":" + relSuperObjectTypes); for(Object stringKey: relSubclass.keySet()) { System.out.println(stringKey + ":" + relSubclass.get(stringKey)); } relObjectsList.add(relSuperObjectTypes); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T13:31:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>133</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:31:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>134</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T13:31:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>135</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 13:31:25.770'</string>
</history>
<history>
<datetime>2020-04-27T13:31:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>136</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.add(item); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String relSuperObject = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); System.out.println(relSuperObject + ":" + relSuperObjectTypes); for(Object stringKey: relSubclass.keySet()) { System.out.println(stringKey + ":" + relSubclass.get(stringKey)); } relObjectsList.add(relSuperObjectTypes); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T13:35:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>137</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:35:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>138</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T13:35:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>139</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 13:35:02.922'</string>
</history>
<history>
<datetime>2020-04-27T13:35:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>140</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); List<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.add(item); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private List<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { List<String> relObjectsList = new ArrayList<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); relObjectsList.add(relSuperObjectTypes); DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjectsList.addAll(findRelatedSubclasses(context, objDO)); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T13:39:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>141</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:39:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>142</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T13:39:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>143</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 13:38:53.533'</string>
</history>
<history>
<datetime>2020-04-27T13:39:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>144</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject); for(String item: relatedSubclasses) { stringBuilder.add(item); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); relObjectsList.add(relSuperObjectTypes); DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjectsList.addAll(findRelatedSubclasses(context, objDO)); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T13:49:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>145</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T13:49:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>146</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T13:49:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>147</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 13:49:49.076'</string>
</history>
<history>
<datetime>2020-04-27T13:49:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>148</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } private Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); relObjectsList.add(relSuperObjectTypes); DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjectsList.addAll(findRelatedSubclasses(context, objDO)); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T21:46:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>149</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T21:46:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>150</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T21:46:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>151</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 21:46:35.261'</string>
</history>
<history>
<datetime>2020-04-27T21:46:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>152</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public static String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
<history>
<datetime>2020-04-27T21:59:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>153</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T21:59:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>154</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T21:59:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>155</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 21:46:35.261'</string>
</history>
<history>
<datetime>2020-04-27T21:59:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>156</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public static String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
<history>
<datetime>2020-04-27T22:03:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>157</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T22:03:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>158</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T22:03:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>159</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 21:46:35.261'</string>
</history>
<history>
<datetime>2020-04-27T22:03:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>160</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public static String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
<history>
<datetime>2020-04-27T22:15:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>161</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T22:15:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>162</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T22:15:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>163</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 21:46:35.261'</string>
</history>
<history>
<datetime>2020-04-27T22:15:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>164</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public static String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
<history>
<datetime>2020-04-27T22:16:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>165</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T22:16:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>166</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T22:16:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>167</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 21:46:35.261'</string>
</history>
<history>
<datetime>2020-04-27T22:16:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>168</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public static String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
<history>
<datetime>2020-04-27T22:19:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>169</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T22:19:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>170</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T22:19:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>171</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 22:19:06.118'</string>
</history>
<history>
<datetime>2020-04-27T22:19:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>172</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public static Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); relObjectsList.add(relSuperObjectTypes); DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjectsList.addAll(findRelatedSubclasses(context, objDO)); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T22:49:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>173</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T22:49:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>174</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T22:49:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>175</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 22:49:08.944'</string>
</history>
<history>
<datetime>2020-04-27T22:49:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>176</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public static Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); relObjectsList.add(relSuperObjectTypes); DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjectsList.addAll(findRelatedSubclasses(context, objDO)); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-27T23:15:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>177</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-27T23:15:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>178</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-27T23:15:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>179</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-27-2020 23:15:28.227'</string>
</history>
<history>
<datetime>2020-04-27T23:15:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>180</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); relObjectsList.add(relSuperObjectTypes); DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjectsList.addAll(findRelatedSubclasses(context, objDO)); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-28T11:30:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>181</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T11:30:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>182</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-28T11:30:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>183</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-28-2020 11:30:34.505'</string>
</history>
<history>
<datetime>2020-04-28T11:30:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>184</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { if(item.length()>0) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  } return stringBuilder.toString(); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); relObjectsList.add(relSuperObjectTypes); DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjectsList.addAll(findRelatedSubclasses(context, objDO)); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-28T11:32:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>185</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T11:32:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>186</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-28T11:32:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>187</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-28-2020 11:32:03.847'</string>
</history>
<history>
<datetime>2020-04-28T11:32:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>188</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { if(item.length()>0) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringBuilder.toString().length()>0? stringBuilder.toString(): "All Types"; }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); relObjectsList.add(relSuperObjectTypes); DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjectsList.addAll(findRelatedSubclasses(context, objDO)); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-28T11:36:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>189</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T11:36:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>190</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-28T11:36:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>191</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-28-2020 11:36:29.284'</string>
</history>
<history>
<datetime>2020-04-28T11:36:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>192</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); String typesValue = ""; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { typesValue = objDO.getAttributeValue(context, "IMS_ClassificationTypes"); } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return typesValue.length()>0? typesValue: "All Types"; }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringBuilder = new StringJoiner(","); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject); String language = context.getSession().getLanguage(); for(String item: relatedSubclasses) { if(item.length()>0) { stringBuilder.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringBuilder.toString().length()>0? stringBuilder.toString(): "All Types"; }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); if(relSuperObjectTypes.length() > 0) { relObjectsList.add(relSuperObjectTypes); } DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjectsList.addAll(findRelatedSubclasses(context, objDO)); } } return relObjectsList; } } ']]></string>
</history>
<history>
<datetime>2020-04-28T17:46:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>193</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T17:46:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>194</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-28T17:46:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>195</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-28-2020 17:46:29.542'</string>
</history>
<history>
<datetime>2020-04-28T17:46:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>196</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(typeValue); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); if(relSuperObjectTypes.length() > 0) { relObjectsList.add(relSuperObjectTypes); } DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjectsList.addAll(findRelatedSubclasses(c]]></string>
</history>
<history>
<datetime>2020-04-28T19:41:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>197</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-28T19:41:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>198</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-28T19:41:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>199</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-28-2020 19:41:02.915'</string>
</history>
<history>
<datetime>2020-04-28T19:41:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>200</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId");  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); if(relSuperObjectTypes.length() > 0) { relObjectsList.add(relSuperObjectTypes); } DomainObject objDO = DomainObject.newInstance(context, superObjectId); relObjec]]></string>
</history>
<history>
<datetime>2020-04-29T06:29:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>201</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T06:29:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>202</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-29T06:29:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>203</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 06:28:45.987'</string>
</history>
<history>
<datetime>2020-04-29T06:29:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>204</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); if(relSuperObj]]></string>
</history>
<history>
<datetime>2020-04-29T06:33:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>205</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T06:33:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>206</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-29T06:33:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>207</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 06:33:01.401'</string>
</history>
<history>
<datetime>2020-04-29T06:33:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>208</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFICATION_TYPE_ATTRIBUTE); if(relSuperObj]]></string>
</history>
<history>
<datetime>2020-04-29T06:35:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>209</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T06:35:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>210</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-29T06:35:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>211</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 06:35:43.420'</string>
</history>
<history>
<datetime>2020-04-29T06:35:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>212</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes"; public static final String NONE = "None";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFIC]]></string>
</history>
<history>
<datetime>2020-04-29T06:36:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>213</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T06:36:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>214</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-29T06:36:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>215</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 06:36:41.161'</string>
</history>
<history>
<datetime>2020-04-29T06:36:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>216</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes"; public static final String NONE = "None";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (String) relSubclass.get(DomainConstants.SELECT_ID); String relSuperObjectTypes = (String) relSubclass.get(CLASSIFIC]]></string>
</history>
<history>
<datetime>2020-04-29T06:52:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>217</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T06:52:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>218</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-29T06:52:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>219</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 06:52:30.746'</string>
</history>
<history>
<datetime>2020-04-29T06:52:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>220</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes"; public static final String NONE = "None";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); if (getParentTypes(context, args).equals(ALL_TYPES)) { return i18nNow.getTypeI18NString(ALL_TYPES, language); }; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentState.equals("Obsolete")) { String superObjectId = (St]]></string>
</history>
<history>
<datetime>2020-04-29T07:21:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>221</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T07:21:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>222</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-29T07:21:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>223</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 07:21:45.120'</string>
</history>
<history>
<datetime>2020-04-29T07:21:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>224</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes"; public static final String NONE = "None";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); if (getParentTypes(context, args).equals(ALL_TYPES)) { return i18nNow.getTypeI18NString(ALL_TYPES, language); }; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstants.SELECT_CURRENT); if (!relSubclassCurrentS]]></string>
</history>
<history>
<datetime>2020-04-29T07:25:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>225</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T07:25:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>226</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-29T07:25:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>227</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 07:25:40.461'</string>
</history>
<history>
<datetime>2020-04-29T07:25:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>228</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes"; public static final String NONE = "None";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); if (getParentTypes(context, args).equals(ALL_TYPES)) { return i18nNow.getTypeI18NString(ALL_TYPES, language); }; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
<history>
<datetime>2020-04-29T07:52:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>229</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T07:52:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>230</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-29T07:52:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>231</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 07:51:58.290'</string>
</history>
<history>
<datetime>2020-04-29T07:52:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>232</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes"; public static final String NONE = "None";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); if (getParentTypes(context, args).equals(ALL_TYPES)) { return i18nNow.getTypeI18NString(ALL_TYPES, language); }; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { System.out.println("parentTypes:" + item); if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } public Set<String> findRelatedSubclasses(Context context, DomainObject classificationObject) throws MatrixException { Set<String> relObjectsList = new HashSet<>(); StringList QAGbusSelects = new StringList();  // Object QAGbusSelects.addAll(Arrays.asList(DomainConstants.SELECT_ID, CLASSIFICATION_TYPE_ATTRIBUTE, DomainConstants.SELECT_CURRENT)); MapList mlResult = classificationObject.getRelatedObjects(context, "Subclass", "*", QAGbusSelects, null, /*from*/ true, /*to*/ false, (short) 0, null, null, 0); for (Object relatedSubclass: mlResult) { Map relSubclass = (Map) relatedSubclass; String relSubclassCurrentState = (String) relSubclass.get(DomainConstant]]></string>
</history>
<history>
<datetime>2020-04-29T08:02:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>233</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-04-29T08:02:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>234</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-04-29T08:02:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>235</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 08:02:50.592'</string>
</history>
<history>
<datetime>2020-04-29T08:02:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>236</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes"; public static final String NONE = "None";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); if (getParentTypes(context, args).equals(ALL_TYPES)) { return i18nNow.getTypeI18NString(ALL_TYPES, language); }; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { System.out.println("parentTypes:" + item); if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
<history>
<datetime>2020-05-06T11:10:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>237</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:10:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>238</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-05-06T11:10:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>239</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 08:02:50.592'</string>
</history>
<history>
<datetime>2020-05-06T11:10:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>240</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes"; public static final String NONE = "None";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); if (getParentTypes(context, args).equals(ALL_TYPES)) { return i18nNow.getTypeI18NString(ALL_TYPES, language); }; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { System.out.println("parentTypes:" + item); if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
<history>
<datetime>2020-05-06T11:14:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>241</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:14:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>242</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-05-06T11:14:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>243</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 08:02:50.592'</string>
</history>
<history>
<datetime>2020-05-06T11:14:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>244</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes"; public static final String NONE = "None";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); if (getParentTypes(context, args).equals(ALL_TYPES)) { return i18nNow.getTypeI18NString(ALL_TYPES, language); }; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { System.out.println("parentTypes:" + item); if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
<history>
<datetime>2020-05-06T11:20:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>245</order>
<string>mod program IMS_Adm_TypeChooserSupport remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:20:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>246</order>
<string>mod program IMS_Adm_TypeChooserSupport java</string>
</history>
<history>
<datetime>2020-05-06T11:20:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>247</order>
<string>mod program IMS_Adm_TypeChooserSupport add property 'file date' value '04-29-2020 08:02:50.592'</string>
</history>
<history>
<datetime>2020-05-06T11:20:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>248</order>
<string><![CDATA[mod program IMS_Adm_TypeChooserSupport code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.IMS_AdminTools;  import java.util.*;  public class ${CLASSNAME} {  public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]"; public static final String ALL_TYPES = "AllTypes"; public static final String NONE = "None";  public ${CLASSNAME}() { }  public String getTypes(Context context, String[] args) throws Exception{ Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); if (getParentTypes(context, args).equals(ALL_TYPES)) { return i18nNow.getTypeI18NString(ALL_TYPES, language); }; try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");  for(String typeValue: typesValues) { if(typesValues.length > 0) { stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language)); } } } catch (Exception ex) { ex.printStackTrace(); } Map<String, String> resultMap = new HashMap<>();  return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language); }  public String getParentTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); Object objectId = paramMap.get("objectId"); StringJoiner stringJoiner = new StringJoiner(","); String language = context.getSession().getLanguage(); try { DomainObject classObject= DomainObject.newInstance(context, (String) objectId); Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject);  for(String item: relatedSubclasses) { System.out.println("parentTypes:" + item); if(item.equals("-1")) { return i18nNow.getTypeI18NString(ALL_TYPES, language); } if(item.length()>0) { stringJoiner.add(i18nNow.getTypeI18NString(item, language)); } } } catch (Exception ex) { ex.printStackTrace();  }  return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language); }  public void updateTypes(Context context, String[] args) throws Exception { Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args); Map<String, Object> paramMap = programMap.get("paramMap"); for(Map.Entry<String, Object> entry: paramMap.entrySet()) { System.out.println(entry.getKey() + ":" + entry.getValue()); } String newValue = (String) paramMap.get("New Value"); Object objectId = paramMap.get("objectId"); if (getParentTypes(context, args).equals(ALL_TYPES)) { return; };  try { DomainObject objDO = DomainObject.newInstance(context, (String)objectId); objDO.openObject(context); { objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue); } } catch (Exception ex) { ex.printStackTrace(); }   } } ']]></string>
</history>
</historyList>
</adminProperties>
<code><![CDATA[import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.domain.util.*;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.util.MatrixException;
import matrix.util.StringList;
import ru.ase.md.ims3.IMS_AdminTools;

import java.util.*;

public class ${CLASSNAME} {

    public static final String CLASSIFICATION_TYPE_ATTRIBUTE = "attribute[IMS_ClassificationTypes]";
    public static final String ALL_TYPES = "AllTypes";
    public static final String NONE = "None";

    public ${CLASSNAME}() {
    }

    public String getTypes(Context context, String[] args) throws Exception{
        Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args);
        Map<String, Object> paramMap = programMap.get("paramMap");
        Object objectId = paramMap.get("objectId");
        StringJoiner stringJoiner = new StringJoiner(",");
        String language = context.getSession().getLanguage();
        if (getParentTypes(context, args).equals(ALL_TYPES)) {
            return i18nNow.getTypeI18NString(ALL_TYPES, language);
        };
        try {
            DomainObject objDO = DomainObject.newInstance(context, (String)objectId);
            objDO.openObject(context);
            String[] typesValues = objDO.getAttributeValue(context, "IMS_ClassificationTypes").split(",");

            for(String typeValue: typesValues) {
                if(typesValues.length > 0) {
                    stringJoiner.add(i18nNow.getTypeI18NString(typeValue, language));
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        Map<String, String> resultMap = new HashMap<>();

        return stringJoiner.length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(ALL_TYPES, language);
    }

    public String getParentTypes(Context context, String[] args) throws Exception {
        Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args);
        Map<String, Object> paramMap = programMap.get("paramMap");
        Object objectId = paramMap.get("objectId");
        StringJoiner stringJoiner = new StringJoiner(",");
        String language = context.getSession().getLanguage();
        try {
            DomainObject classObject= DomainObject.newInstance(context, (String) objectId);
            Set<String> relatedSubclasses = IMS_AdminTools.findRelatedSubclasses(context, classObject);

            for(String item: relatedSubclasses) {
                System.out.println("parentTypes:" + item);
                if(item.equals("-1")) {
                    return i18nNow.getTypeI18NString(ALL_TYPES, language);
                }
                if(item.length()>0) {
                    stringJoiner.add(i18nNow.getTypeI18NString(item, language));
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();

        }

        return stringJoiner.toString().length()>0? stringJoiner.toString(): i18nNow.getTypeI18NString(NONE, language);
    }

    public void updateTypes(Context context, String[] args) throws Exception {
        Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args);
        Map<String, Object> paramMap = programMap.get("paramMap");
        for(Map.Entry<String, Object> entry: paramMap.entrySet()) {
            System.out.println(entry.getKey() + ":" + entry.getValue());
        }
        String newValue = (String) paramMap.get("New Value");
        Object objectId = paramMap.get("objectId");
        if (getParentTypes(context, args).equals(ALL_TYPES)) {
            return;
        };

        try {
            DomainObject objDO = DomainObject.newInstance(context, (String)objectId);
            objDO.openObject(context);
            {
                objDO.setAttributeValue(context, "IMS_ClassificationTypes", newValue);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }


    }
}
]]></code>
<javaProgram/>
</program>
</ematrix>
