<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright (c) 2010-2014 Dassault Systemes, 1993 - 2014 -->
<!DOCTYPE ematrix SYSTEM "ematrixml.dtd">
<ematrix>
<creationProperties>
<release>3DEXPERIENCE R2019x HotFix 7(29.0.0.0)</release>
<datetime>2020-07-13T05:28:51Z</datetime>
<event>export</event>
<dtdInfo>&ematrixProductDtd;</dtdInfo>
</creationProperties>


<program id="0.1.41865.44852">
<adminProperties>
<name>IMS_PM_StatementUtils</name>
<creationInfo>
<datetime>2020-05-18T12:12:26Z</datetime>
</creationInfo>
<modificationInfo>
<datetime>2020-07-06T21:30:36Z</datetime>
</modificationInfo>
<propertyList count="1">
<property>
<name>file date</name>
<value>07-06-2020 21:30:21.570</value>
<flags>0</flags>
</property>
</propertyList>
<historyList count="1996">
<history>
<datetime>2020-05-18T12:12:26Z</datetime>
<agent>admin_platform</agent>
<event>create</event>
<order>1</order>
<string>add program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-18T12:12:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>2</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-18T12:12:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>3</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-18-2020 12:10:46.755'</string>
</history>
<history>
<datetime>2020-05-18T12:12:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>4</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;  public class ${CLASSNAME} {  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Statement", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } '</string>
</history>
<history>
<datetime>2020-05-18T12:15:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>5</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-18T12:15:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>6</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-18T12:15:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>7</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-18-2020 12:15:40.153'</string>
</history>
<history>
<datetime>2020-05-18T12:15:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>8</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;  public class ${CLASSNAME} {  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } '</string>
</history>
<history>
<datetime>2020-05-18T12:16:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>9</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-18T12:16:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>10</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-18T12:16:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>11</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-18-2020 12:16:06.013'</string>
</history>
<history>
<datetime>2020-05-18T12:16:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>12</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;  public class ${CLASSNAME} {  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } '</string>
</history>
<history>
<datetime>2020-05-20T11:50:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>13</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T11:50:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>14</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T11:50:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>15</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 11:50:05.877'</string>
</history>
<history>
<datetime>2020-05-20T11:50:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>16</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.util.StringList; import java.util.*;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId();, attribute); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T11:50:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>17</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T11:50:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>18</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T11:50:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>19</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 11:50:45.471'</string>
</history>
<history>
<datetime>2020-05-20T11:50:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>20</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.util.StringList; import java.util.*;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), attribute); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T11:51:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>21</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T11:51:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>22</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T11:51:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>23</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 11:51:38.064'</string>
</history>
<history>
<datetime>2020-05-20T11:51:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>24</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.util.StringList; import matrix.db.JPO; import java.util.*;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), attribute); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T11:52:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>25</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T11:52:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>26</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T11:52:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>27</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 11:52:04.471'</string>
</history>
<history>
<datetime>2020-05-20T11:52:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>28</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.util.StringList; import matrix.db.JPO; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), attribute); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T11:52:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>29</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T11:52:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>30</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T11:52:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>31</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 11:52:33.627'</string>
</history>
<history>
<datetime>2020-05-20T11:52:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>32</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.util.StringList; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), attribute); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T11:53:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>33</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T11:53:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>34</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T11:53:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>35</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 11:53:08.643'</string>
</history>
<history>
<datetime>2020-05-20T11:53:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>36</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.util.StringList; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), attribute); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T11:54:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>37</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T11:54:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>38</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T11:54:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>39</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 11:54:44.002'</string>
</history>
<history>
<datetime>2020-05-20T11:54:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>40</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.util.StringList; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId()); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T11:57:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>41</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T11:57:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>42</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T11:57:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>43</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 11:57:18.283'</string>
</history>
<history>
<datetime>2020-05-20T11:57:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>44</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.util.StringList; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), true); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:00:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>45</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:00:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>46</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:00:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>47</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:00:08.565'</string>
</history>
<history>
<datetime>2020-05-20T12:00:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>48</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.db.MQLCommand; import matrix.db.BusinessObject; import matrix.util.MatrixException; import matrix.util.StringList; import org.apache.log4j.Logger;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), true); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:01:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>49</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:01:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>50</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:01:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>51</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:00:55.597'</string>
</history>
<history>
<datetime>2020-05-20T12:01:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>52</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger;  import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), true); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:15:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>53</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:15:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>54</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:15:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>55</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:15:27.171'</string>
</history>
<history>
<datetime>2020-05-20T12:15:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>56</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.common.Download; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger;  import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = DomainObject.newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), true); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:16:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>57</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:16:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>58</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:16:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>59</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:16:34.921'</string>
</history>
<history>
<datetime>2020-05-20T12:16:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>60</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = DomainObject.newInstance(context); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), true); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:26:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>61</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:26:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>62</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:26:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>63</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:26:11.444'</string>
</history>
<history>
<datetime>2020-05-20T12:26:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>64</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); System.out.println("attribute" +attribute); DomainObject statementMaster = DomainObject.newInstance(context); System.out.println("statementMaster" +statementMaster); String name = statementMaster.getAutoGeneratedName(context, "type_IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), true); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()+"2222"); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:27:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>65</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:27:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>66</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:27:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>67</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:27:28.502'</string>
</history>
<history>
<datetime>2020-05-20T12:27:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>68</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("1 - objectId = " +objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); System.out.println("attribute" +attribute); DomainObject statementMaster = DomainObject.newInstance(context); System.out.println("statementMaster" +statementMaster); String name = statementMaster.getAutoGeneratedName(context, "IMS_PM_Statement", ""); System.out.println("name" +name); statementMaster.createObject(context, "IMS_PM_Statement", name, "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), true); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()+"2222"); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:31:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>69</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:31:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>70</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:31:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>71</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:31:05.160'</string>
</history>
<history>
<datetime>2020-05-20T12:31:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>72</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); statementMaster.createObject(context, "IMS_PM_Statement", statement.getName(), "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), true); System.out.println("5" +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()+"2222"); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:40:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>73</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:40:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>74</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:40:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>75</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:39:52.880'</string>
</history>
<history>
<datetime>2020-05-20T12:40:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>76</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); System.out.println("statement= " +statement); statementMaster.createObject(context, "IMS_PM_Statement", statement.getName(), "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), true); relation.setAttributeValues(context, relAttr); System.out.println("= " +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()+"2222"); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:41:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>77</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:41:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>78</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:41:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>79</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:41:50.192'</string>
</history>
<history>
<datetime>2020-05-20T12:41:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>80</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); System.out.println("statement= " +statement); statementMaster.createObject(context, "IMS_PM_Statement", statement.getName(), "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, objectId, "IMS_PM_Revision", statementMaster.getId(), true); relation.setAttributeValues(context, attribute); System.out.println("= " +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()+"2222"); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:43:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>81</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:43:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>82</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:43:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>83</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:43:37.847'</string>
</history>
<history>
<datetime>2020-05-20T12:43:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>84</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); System.out.println("statement= " +statement); statementMaster.createObject(context, "IMS_PM_Statement", statement.getName(), "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statement, "IMS_PM_Revision", statementMaster, true); relation.setAttributeValues(context, attribute); System.out.println("= " +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()+"2222"); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:44:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>85</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:44:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>86</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:44:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>87</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:44:06.191'</string>
</history>
<history>
<datetime>2020-05-20T12:44:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>88</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Created"); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); System.out.println("statement= " +statement); statementMaster.createObject(context, "IMS_PM_Statement", statement.getName(), "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statement, "IMS_PM_Revision", statementMaster); relation.setAttributeValues(context, attribute); System.out.println("= " +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()+"2222"); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:45:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>89</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:45:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>90</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:45:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>91</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:45:32.680'</string>
</history>
<history>
<datetime>2020-05-20T12:45:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>92</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Create"); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); System.out.println("statement= " +statement); statementMaster.createObject(context, "IMS_PM_Statement", statement.getName(), "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statement, "IMS_PM_Revision", statementMaster); relation.setAttributeValues(context, attribute); System.out.println("= " +statementMaster.getId()); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()+"2222"); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:46:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>93</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:46:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>94</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:46:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>95</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:46:23.399'</string>
</history>
<history>
<datetime>2020-05-20T12:46:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>96</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", "Create");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); statementMaster.createObject(context, "IMS_PM_Statement", statement.getName(), "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statement, "IMS_PM_Revision", statementMaster); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T12:55:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>97</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:55:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>98</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T12:55:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>99</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 12:55:01.719'</string>
</history>
<history>
<datetime>2020-05-20T12:55:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>100</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); HashMap attribute = new HashMap(); attribute.put("IMS_PM_StatementState", statement.getCurrentState(context)); statementMaster.createObject(context, "IMS_PM_Statement", statement.getName(), "-", "IMS_PM_Statement", context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statement, "IMS_PM_Revision", statementMaster); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T13:04:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>101</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T13:04:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>102</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T13:04:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>103</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 13:04:14.351'</string>
</history>
<history>
<datetime>2020-05-20T13:04:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>104</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statement, RELATIONSHIP_IMS_PM_REVISION, statementMaster); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T14:28:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>105</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T14:28:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>106</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T14:28:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>107</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 14:28:27.801'</string>
</history>
<history>
<datetime>2020-05-20T14:28:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>108</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T14:29:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>109</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T14:29:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>110</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T14:29:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>111</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 14:29:12.356'</string>
</history>
<history>
<datetime>2020-05-20T14:29:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>112</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final Logger log = Logger.getLogger("IsaevaLogger");  private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-20T14:29:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>113</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T14:29:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>114</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-20T14:29:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>115</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-20-2020 14:29:42.773'</string>
</history>
<history>
<datetime>2020-05-20T14:29:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>116</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where.toString(), select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-21T10:27:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>117</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T10:27:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>118</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-21T10:27:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>119</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-21-2020 10:27:46.201'</string>
</history>
<history>
<datetime>2020-05-21T10:27:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>120</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String where = new String(); where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-21T12:51:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>121</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T12:51:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>122</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-21T12:51:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>123</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-21-2020 12:27:05.781'</string>
</history>
<history>
<datetime>2020-05-21T12:51:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>124</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-21T14:14:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>125</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T14:14:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>126</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-21T14:14:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>127</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-21-2020 14:14:01.060'</string>
</history>
<history>
<datetime>2020-05-21T14:14:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>128</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-21T14:15:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>129</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T14:15:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>130</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-21T14:15:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>131</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-21-2020 14:15:08.710'</string>
</history>
<history>
<datetime>2020-05-21T14:15:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>132</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-21T17:05:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>133</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T17:05:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>134</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-21T17:05:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>135</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-21-2020 17:04:08.658'</string>
</history>
<history>
<datetime>2020-05-21T17:05:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>136</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } } } '</string>
</history>
<history>
<datetime>2020-05-21T17:06:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>137</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T17:06:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>138</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-21T17:06:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>139</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-21-2020 17:06:15.400'</string>
</history>
<history>
<datetime>2020-05-21T17:06:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>140</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; } } '</string>
</history>
<history>
<datetime>2020-05-21T17:10:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>141</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T17:10:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>142</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-21T17:10:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>143</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-21-2020 17:09:43.388'</string>
</history>
<history>
<datetime>2020-05-21T17:10:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>144</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getCurrentState(context)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; } } '</string>
</history>
<history>
<datetime>2020-05-22T09:52:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>145</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T09:52:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>146</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T09:52:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>147</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 09:52:34.993'</string>
</history>
<history>
<datetime>2020-05-22T09:52:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>148</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; } } '</string>
</history>
<history>
<datetime>2020-05-22T13:02:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>149</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T13:02:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>150</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T13:02:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>151</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 13:02:33.281'</string>
</history>
<history>
<datetime>2020-05-22T13:02:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>152</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); Map test = domainObject.getAttributeMap(context); System.out.println("Map = " + test); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; } } '</string>
</history>
<history>
<datetime>2020-05-22T13:08:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>153</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T13:08:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>154</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T13:08:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>155</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 13:08:17.538'</string>
</history>
<history>
<datetime>2020-05-22T13:08:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>156</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.db.RelationshipList; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); Map test = domainObject.getAttributeMap(context); RelationshipList test2 = domainObject.getAllRelationship(context); System.out.println("test2 = " + test2); System.out.println("Map = " + test); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval</string>
</history>
<history>
<datetime>2020-05-22T13:25:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>157</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T13:25:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>158</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T13:25:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>159</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 13:25:07.356'</string>
</history>
<history>
<datetime>2020-05-22T13:25:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>160</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.db.RelationshipList; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); Map test = domainObject.getAttributeMap(context); RelationshipList test2 = domainObject.getAllRelationship(context); System.out.println("test2 = " + test2); System.out.println("Map = " + test); String[] test3 = domainObject.getAllRelationship(context).getNames(); for (String s: test3){ System.out.println("..: " + s); } StringList attributeStateList = domainObject.ge</string>
</history>
<history>
<datetime>2020-05-22T13:32:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>161</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T13:32:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>162</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T13:32:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>163</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 13:32:23.026'</string>
</history>
<history>
<datetime>2020-05-22T13:32:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>164</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); Map test = domainObject.getAttributeMap(context); RelationshipList test2 = domainObject.getAllRelationship(context); for (Relationship test3: test2) { System.out.println(test3.getName()); } System.out.println("test2 = " + test2); System.out.println("Map = " + test); String[] test3 = domainObject.getAllRelationship(context).getNames(); </string>
</history>
<history>
<datetime>2020-05-22T13:35:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>165</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T13:35:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>166</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T13:35:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>167</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 13:35:49.859'</string>
</history>
<history>
<datetime>2020-05-22T13:35:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>168</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); Map test = domainObject.getAttributeMap(context); RelationshipList test2 = domainObject.getAllRelationship(context); for (Relationship test3: test2) { System.out.println("1:"+test3.getTypeName()); System.out.println("2:"+test3.getRelationshipType()); } System.out.println("test2 = " + test2); System.out.println("Map = " + test); String[</string>
</history>
<history>
<datetime>2020-05-22T13:46:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>169</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T13:46:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>170</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T13:46:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>171</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 13:46:27.492'</string>
</history>
<history>
<datetime>2020-05-22T13:46:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>172</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); Map test = domainObject.getAttributeMap(context); RelationshipList test2 = domainObject.getAllRelationship(context); for (Relationship test3: test2) { System.out.println("1:"+test3.getTypeName()); System.out.println("2:"+test3.getRelationshipType()); } System.out.println("test2 = " + test2); System.out.println("Map = " + test); String[</string>
</history>
<history>
<datetime>2020-05-22T13:47:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>173</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T13:47:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>174</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T13:47:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>175</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 13:46:58.649'</string>
</history>
<history>
<datetime>2020-05-22T13:47:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>176</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); Map test = domainObject.getAttributeMap(context); RelationshipList test2 = domainObject.getAllRelationship(context); for (Relationship test3: test2) { System.out.println("1:"+test3.getTypeName()); System.out.println("2:"+test3.getRelationshipType()); } System.out.println("test2 = " + test2); System.out.println("Map = " + test); String[] test3 = domainObject.getAllRelationship(context).getNames(); for (String s: test3){ System.o</string>
</history>
<history>
<datetime>2020-05-22T13:50:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>177</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T13:50:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>178</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T13:50:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>179</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 13:49:50.304'</string>
</history>
<history>
<datetime>2020-05-22T13:50:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>180</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; } } '</string>
</history>
<history>
<datetime>2020-05-22T14:37:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>181</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T14:37:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>182</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T14:37:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>183</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 14:37:44.090'</string>
</history>
<history>
<datetime>2020-05-22T14:37:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>184</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; } } '</string>
</history>
<history>
<datetime>2020-05-22T15:33:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>185</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:33:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>186</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:33:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>187</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:33:09.395'</string>
</history>
<history>
<datetime>2020-05-22T15:33:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>188</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void promoteConnectedSubclasses(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(context, objectId); Strin</string>
</history>
<history>
<datetime>2020-05-22T15:34:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>189</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:34:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>190</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:34:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>191</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:34:25.133'</string>
</history>
<history>
<datetime>2020-05-22T15:34:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>192</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void promoteConnectedSubclasses(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(context, objectId); Strin</string>
</history>
<history>
<datetime>2020-05-22T15:35:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>193</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:35:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>194</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:35:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>195</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:35:18.683'</string>
</history>
<history>
<datetime>2020-05-22T15:35:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>196</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void promoteConnectedSubclasses(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(context, objectId); Strin</string>
</history>
<history>
<datetime>2020-05-22T15:35:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>197</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:35:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>198</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:35:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>199</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:35:43.527'</string>
</history>
<history>
<datetime>2020-05-22T15:35:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>200</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void promoteConnectedSubclasses(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(context, objectId); Strin</string>
</history>
<history>
<datetime>2020-05-22T15:36:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>201</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:36:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>202</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:36:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>203</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:36:15.636'</string>
</history>
<history>
<datetime>2020-05-22T15:36:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>204</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void promoteConnectedSubclasses(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(context, objectId); Strin</string>
</history>
<history>
<datetime>2020-05-22T15:36:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>205</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:36:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>206</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:36:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>207</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:36:33.433'</string>
</history>
<history>
<datetime>2020-05-22T15:36:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>208</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void promoteConnectedSubclasses(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(context, objectId); Strin</string>
</history>
<history>
<datetime>2020-05-22T15:38:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>209</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:38:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>210</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:38:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>211</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:37:59.518'</string>
</history>
<history>
<datetime>2020-05-22T15:38:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>212</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { StringList relSelects = new StringList(); String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObj</string>
</history>
<history>
<datetime>2020-05-22T15:38:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>213</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:38:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>214</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:38:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>215</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:38:41.803'</string>
</history>
<history>
<datetime>2020-05-22T15:38:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>216</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void promoteConnectedSubclasses(Context context, String[] args) throws Exception { StringList relSelects = new StringList(); String objectId = args[0]; String current = args[1]; try { DomainObject</string>
</history>
<history>
<datetime>2020-05-22T15:39:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>217</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:39:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>218</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:39:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>219</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:39:05.615'</string>
</history>
<history>
<datetime>2020-05-22T15:39:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>220</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void promoteConnectedSubclasses(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(con</string>
</history>
<history>
<datetime>2020-05-22T15:51:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>221</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:51:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>222</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:51:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>223</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:51:26.475'</string>
</history>
<history>
<datetime>2020-05-22T15:51:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>224</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void updateRelation(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(context, object</string>
</history>
<history>
<datetime>2020-05-22T15:52:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>225</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T15:52:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>226</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-22T15:52:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>227</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-22-2020 15:52:29.112'</string>
</history>
<history>
<datetime>2020-05-22T15:52:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>228</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void updateRelation(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(context, object</string>
</history>
<history>
<datetime>2020-05-25T07:44:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>229</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-25T07:44:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>230</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-25T07:44:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>231</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-25-2020 07:44:34.581'</string>
</history>
<history>
<datetime>2020-05-25T07:44:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>232</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void updateRelation(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(co</string>
</history>
<history>
<datetime>2020-05-25T08:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>233</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-25T08:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>234</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-25T08:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>235</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-25-2020 08:30:49.461'</string>
</history>
<history>
<datetime>2020-05-25T08:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>236</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void updateRelation(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; System.out.println("updateRelation START"); System.out.pri</string>
</history>
<history>
<datetime>2020-05-25T08:31:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>237</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-25T08:31:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>238</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-25T08:31:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>239</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-25-2020 08:31:36.958'</string>
</history>
<history>
<datetime>2020-05-25T08:31:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>240</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribute["); selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE); selects.append("]"); DomainObject domainObject = DomainObject.newInstance(context, objectId); StringList attributeStateList = domainObject.getInfoList(context, selects.toString()); if (attributeStateList.contains("Create") || attributeStateList.contains("UnderApproval")) result = false; return result; }  public void updateRelation(Context context, String[] args) throws Exception {  String objectId = args[0]; String current = args[1]; try { DomainObject statement = DomainObject.newInstance(co</string>
</history>
<history>
<datetime>2020-05-29T06:51:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>241</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T06:51:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>242</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-29T06:51:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>243</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-29-2020 06:51:24.623'</string>
</history>
<history>
<datetime>2020-05-29T06:51:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>244</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.contains(TYPE_IMS_PM_STATEMENT_MASTER))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.contains("IMS_PM_StatementItem"))	{ statementMaster.createObject(context, "IMS_PM_StatementItemMaster", statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].attribut</string>
</history>
<history>
<datetime>2020-05-29T06:53:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>245</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T06:53:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>246</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-29T06:53:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>247</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-29-2020 06:53:42.752'</string>
</history>
<history>
<datetime>2020-05-29T06:53:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>248</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.contains(TYPE_IMS_PM_STATEMENT_MASTER))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.contains("IMS_PM_StatementItem"))	{ statementMaster.createObject(context, "IMS_PM_StatementItemMaster", statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS</string>
</history>
<history>
<datetime>2020-05-29T10:44:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>249</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T10:44:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>250</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-29T10:44:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>251</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-29-2020 10:44:01.386'</string>
</history>
<history>
<datetime>2020-05-29T10:44:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>252</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT_MASTER))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals("IMS_PM_StatementItem"))	{ statementMaster.createObject(context, "IMS_PM_StatementItemMaster", statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_IMS_PM_</string>
</history>
<history>
<datetime>2020-05-29T10:44:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>253</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T10:44:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>254</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-29T10:44:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>255</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-29-2020 10:44:43.136'</string>
</history>
<history>
<datetime>2020-05-29T10:44:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>256</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT_MASTER))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals("IMS_PM_StatementItem"))	{ statementMaster.createObject(context, "IMS_PM_StatementItemMaster", statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects</string>
</history>
<history>
<datetime>2020-05-29T10:47:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>257</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T10:47:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>258</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-29T10:47:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>259</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-29-2020 10:47:18.271'</string>
</history>
<history>
<datetime>2020-05-29T10:47:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>260</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.contains("IMS"))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals("IMS_PM_StatementItem"))	{ statementMaster.createObject(context, "IMS_PM_StatementItemMaster", statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(RELATIONSHIP_</string>
</history>
<history>
<datetime>2020-05-29T10:49:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>261</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T10:49:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>262</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-29T10:49:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>263</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-29-2020 10:48:56.489'</string>
</history>
<history>
<datetime>2020-05-29T10:49:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>264</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.contains("IMS_PM_Statement"))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals("IMS_PM_StatementItem"))	{ statementMaster.createObject(context, "IMS_PM_StatementItemMaster", statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append(</string>
</history>
<history>
<datetime>2020-05-29T10:49:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>265</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T10:49:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>266</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-29T10:49:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>267</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-29-2020 10:49:44.205'</string>
</history>
<history>
<datetime>2020-05-29T10:49:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>268</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.contains(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals("IMS_PM_StatementItem"))	{ statementMaster.createObject(context, "IMS_PM_StatementItemMaster", statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.appe</string>
</history>
<history>
<datetime>2020-05-29T10:50:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>269</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T10:50:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>270</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-29T10:50:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>271</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-29-2020 10:50:19.736'</string>
</history>
<history>
<datetime>2020-05-29T10:50:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>272</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals("IMS_PM_StatementItem"))	{ statementMaster.createObject(context, "IMS_PM_StatementItemMaster", statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)inputMap.get("objectId"); StringBuilder selects = new StringBuilder(); selects.append("to["); selects.append(RELATIONSHIP_IMS_PM_REVISION); selects.append("].from.from["); selects.append</string>
</history>
<history>
<datetime>2020-05-29T10:52:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>273</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T10:52:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>274</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-05-29T10:52:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>275</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '05-29-2020 10:52:07.331'</string>
</history>
<history>
<datetime>2020-05-29T10:52:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>276</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)in</string>
</history>
<history>
<datetime>2020-06-02T05:03:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>277</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:03:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>278</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:03:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>279</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:03:12.355'</string>
</history>
<history>
<datetime>2020-06-02T05:03:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>280</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)in</string>
</history>
<history>
<datetime>2020-06-02T05:06:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>281</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:06:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>282</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:06:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>283</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:05:50.989'</string>
</history>
<history>
<datetime>2020-06-02T05:06:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>284</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)in</string>
</history>
<history>
<datetime>2020-06-02T05:08:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>285</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:08:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>286</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:08:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>287</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:08:23.640'</string>
</history>
<history>
<datetime>2020-06-02T05:08:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>288</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)in</string>
</history>
<history>
<datetime>2020-06-02T05:11:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>289</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:11:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>290</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:11:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>291</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:10:56.741'</string>
</history>
<history>
<datetime>2020-06-02T05:11:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>292</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import com.matrixone.apps.domain.*; import com.matrixone.apps.common.*; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.*; import com.matrixone.apps.common.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public </string>
</history>
<history>
<datetime>2020-06-02T05:13:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>293</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:13:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>294</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:13:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>295</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:13:20.951'</string>
</history>
<history>
<datetime>2020-06-02T05:13:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>296</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JPO.unpackArgs(args); String objectId = (String)in</string>
</history>
<history>
<datetime>2020-06-02T05:13:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>297</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:13:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>298</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:13:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>299</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:13:52.470'</string>
</history>
<history>
<datetime>2020-06-02T05:13:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>300</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;   import com.matrixone.apps.domain.*; import com.matrixone.apps.common.*; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.*; import com.matrixone.apps.common.util.*; public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public </string>
</history>
<history>
<datetime>2020-06-02T05:14:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>301</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:14:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>302</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:14:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>303</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:14:25.004'</string>
</history>
<history>
<datetime>2020-06-02T05:14:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>304</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import matrix.db.*; import matrix.util.*; import com.matrixone.apps.domain.*; import com.matrixone.apps.common.*; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.*; import com.matrixone.apps.common.util.*; public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw ne</string>
</history>
<history>
<datetime>2020-06-02T05:15:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>305</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:15:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>306</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:15:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>307</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:15:17.855'</string>
</history>
<history>
<datetime>2020-06-02T05:15:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>308</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import matrix.db.*; import matrix.util.*; import java.io.*; import java.util.*; import java.lang.*;  import com.matrixone.apps.domain.*; import com.matrixone.apps.common.*; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.*; import com.matrixone.apps.common.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute</string>
</history>
<history>
<datetime>2020-06-02T05:15:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>309</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:15:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>310</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:15:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>311</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:15:34.122'</string>
</history>
<history>
<datetime>2020-06-02T05:15:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>312</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import matrix.db.*; import matrix.util.*; import java.io.*; import java.util.*; import java.lang.*;  import com.matrixone.apps.domain.*; import com.matrixone.apps.common.*; import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toStrin</string>
</history>
<history>
<datetime>2020-06-02T05:15:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>313</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:15:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>314</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:15:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>315</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:15:48.060'</string>
</history>
<history>
<datetime>2020-06-02T05:15:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>316</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import matrix.db.*; import matrix.util.*; import java.lang.*;  import com.matrixone.apps.domain.*; import com.matrixone.apps.common.*; import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean check</string>
</history>
<history>
<datetime>2020-06-02T05:16:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>317</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:16:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>318</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:16:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>319</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:16:02.029'</string>
</history>
<history>
<datetime>2020-06-02T05:16:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>320</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import matrix.db.*; import matrix.util.*; import java.util.*; import java.lang.*;  import com.matrixone.apps.domain.*; import com.matrixone.apps.common.*; import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public </string>
</history>
<history>
<datetime>2020-06-02T05:16:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>321</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:16:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>322</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:16:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>323</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:16:24.514'</string>
</history>
<history>
<datetime>2020-06-02T05:16:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>324</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import matrix.db.*; import matrix.util.*;  import com.matrixone.apps.domain.*; import com.matrixone.apps.common.*; import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStateme</string>
</history>
<history>
<datetime>2020-06-02T05:16:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>325</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:16:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>326</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:16:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>327</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:16:38.375'</string>
</history>
<history>
<datetime>2020-06-02T05:16:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>328</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import matrix.db.*; import matrix.util.*; import java.util.*;  import com.matrixone.apps.domain.*; import com.matrixone.apps.common.*; import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean check</string>
</history>
<history>
<datetime>2020-06-02T05:16:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>329</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:16:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>330</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:16:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>331</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:16:51.703'</string>
</history>
<history>
<datetime>2020-06-02T05:16:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>332</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import matrix.db.*; import matrix.util.*; import java.util.*;  import com.matrixone.apps.domain.*; import com.matrixone.apps.common.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, S</string>
</history>
<history>
<datetime>2020-06-02T05:17:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>333</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:17:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>334</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:17:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>335</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:17:17.017'</string>
</history>
<history>
<datetime>2020-06-02T05:17:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>336</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import matrix.db.*; import matrix.util.*; import java.util.*;  import com.matrixone.apps.domain.*;  import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context cont</string>
</history>
<history>
<datetime>2020-06-02T05:17:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>337</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:17:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>338</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:17:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>339</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:17:30.675'</string>
</history>
<history>
<datetime>2020-06-02T05:17:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>340</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import matrix.util.*; import java.util.*;  import com.matrixone.apps.domain.*;  import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) </string>
</history>
<history>
<datetime>2020-06-02T05:17:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>341</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:17:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>342</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:17:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>343</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:17:44.005'</string>
</history>
<history>
<datetime>2020-06-02T05:17:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>344</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import java.util.*;  import com.matrixone.apps.domain.*;  import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boo</string>
</history>
<history>
<datetime>2020-06-02T05:18:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>345</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:18:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>346</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:18:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>347</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:17:59.257'</string>
</history>
<history>
<datetime>2020-06-02T05:18:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>348</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;    import com.matrixone.apps.domain.*;  import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true;</string>
</history>
<history>
<datetime>2020-06-02T05:19:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>349</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:19:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>350</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:19:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>351</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:19:21.920'</string>
</history>
<history>
<datetime>2020-06-02T05:19:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>352</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Map;  import java.util.Hashtable;  import com.matrixone.apps.domain.*;  import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Excepti</string>
</history>
<history>
<datetime>2020-06-02T05:20:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>353</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:20:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>354</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:20:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>355</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:19:54.687'</string>
</history>
<history>
<datetime>2020-06-02T05:20:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>356</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;    import com.matrixone.apps.domain.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap </string>
</history>
<history>
<datetime>2020-06-02T05:20:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>357</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:20:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>358</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:20:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>359</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:20:36.344'</string>
</history>
<history>
<datetime>2020-06-02T05:20:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>360</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.DomainConstants; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;    import com.matrixone.apps.domain.util.PropertyUtil;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = tru</string>
</history>
<history>
<datetime>2020-06-02T05:21:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>361</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:21:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>362</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:21:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>363</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:21:30.704'</string>
</history>
<history>
<datetime>2020-06-02T05:21:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>364</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); System.out.println("1111 type = "+type); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, "IMS_PM_ItemRevision", statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = tru</string>
</history>
<history>
<datetime>2020-06-02T05:45:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>365</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T05:45:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>366</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T05:45:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>367</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 05:45:43.148'</string>
</history>
<history>
<datetime>2020-06-02T05:45:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>368</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JP</string>
</history>
<history>
<datetime>2020-06-02T07:19:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>369</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T07:19:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>370</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T07:19:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>371</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 07:19:50.319'</string>
</history>
<history>
<datetime>2020-06-02T07:19:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>372</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JP</string>
</history>
<history>
<datetime>2020-06-02T08:52:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>373</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T08:52:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>374</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T08:52:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>375</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 08:51:35.755'</string>
</history>
<history>
<datetime>2020-06-02T08:52:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>376</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JP</string>
</history>
<history>
<datetime>2020-06-02T10:04:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>377</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T10:04:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>378</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T10:04:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>379</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 10:03:55.204'</string>
</history>
<history>
<datetime>2020-06-02T10:04:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>380</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args)throws Exception { try{ HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("true"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); }  }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } }  public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception { boolean result = true; HashMap inputMap = (HashMap) JP</string>
</history>
<history>
<datetime>2020-06-02T12:31:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>381</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T12:31:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>382</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T12:31:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>383</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 12:31:25.367'</string>
</history>
<history>
<datetime>2020-06-02T12:31:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>384</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);  relation.setAttributeValues(context, attribute); StringBuilder selects = new StringBuilder(); selects.</string>
</history>
<history>
<datetime>2020-06-02T12:38:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>385</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T12:38:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>386</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T12:38:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>387</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 12:38:30.133'</string>
</history>
<history>
<datetime>2020-06-02T12:38:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>388</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);  relation.setAttributeValues(context, attribute); StringBuilder selects = new StringBuilder(); selects.</string>
</history>
<history>
<datetime>2020-06-02T15:57:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>389</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T15:57:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>390</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T15:57:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>391</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 15:56:51.929'</string>
</history>
<history>
<datetime>2020-06-02T15:57:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>392</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);  relation.setAttributeValues(context, attribute); StringBuilder selects = new StringBuilder(); selects.append</string>
</history>
<history>
<datetime>2020-06-02T16:12:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>393</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:12:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>394</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:12:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>395</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:12:18.463'</string>
</history>
<history>
<datetime>2020-06-02T16:12:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>396</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);  System.out.println("parentId = "+parentId); relation.setAttributeValues(context, attribute); StringBui</string>
</history>
<history>
<datetime>2020-06-02T16:30:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>397</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:30:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>398</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:30:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>399</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:30:43.847'</string>
</history>
<history>
<datetime>2020-06-02T16:30:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>400</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);  System.out.println("parentId = "+parentId); relation.setAttributeValues(context, attribute); StringBui</string>
</history>
<history>
<datetime>2020-06-02T16:31:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>401</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:31:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>402</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:31:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>403</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:31:50.291'</string>
</history>
<history>
<datetime>2020-06-02T16:31:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>404</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);  System.out.println("parentId = "+parentId); relation.setAttributeValues(context, attribute); StringBui</string>
</history>
<history>
<datetime>2020-06-02T16:33:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>405</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:33:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>406</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:33:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>407</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:33:34.309'</string>
</history>
<history>
<datetime>2020-06-02T16:33:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>408</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);  relation.setAttributeValues(context, attribute); StringBuilder selects = new StringBuilder(); selects.</string>
</history>
<history>
<datetime>2020-06-02T16:38:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>409</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:38:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>410</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:38:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>411</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:38:15.871'</string>
</history>
<history>
<datetime>2020-06-02T16:38:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>412</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);  relation.setAttributeValues(context, attribute); StringBuilder selects = new StringBuilder(); selects.</string>
</history>
<history>
<datetime>2020-06-02T16:40:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>413</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:40:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>414</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:40:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>415</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:40:05.916'</string>
</history>
<history>
<datetime>2020-06-02T16:40:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>416</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);  relation.setAttributeValues(context, attribute); StringBuilder selects = new StringBuilder(); selects.</string>
</history>
<history>
<datetime>2020-06-02T16:42:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>417</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:42:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>418</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:42:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>419</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:42:26.231'</string>
</history>
<history>
<datetime>2020-06-02T16:42:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>420</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stat</string>
</history>
<history>
<datetime>2020-06-02T16:43:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>421</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:43:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>422</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:43:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>423</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:43:15.279'</string>
</history>
<history>
<datetime>2020-06-02T16:43:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>424</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stat</string>
</history>
<history>
<datetime>2020-06-02T16:46:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>425</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:46:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>426</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:46:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>427</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:46:34.367'</string>
</history>
<history>
<datetime>2020-06-02T16:46:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>428</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stat</string>
</history>
<history>
<datetime>2020-06-02T16:48:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>429</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:48:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>430</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:48:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>431</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:48:41.663'</string>
</history>
<history>
<datetime>2020-06-02T16:48:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>432</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stat</string>
</history>
<history>
<datetime>2020-06-02T16:49:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>433</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:49:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>434</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:49:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>435</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:49:52.446'</string>
</history>
<history>
<datetime>2020-06-02T16:49:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>436</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stat</string>
</history>
<history>
<datetime>2020-06-02T16:51:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>437</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:51:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>438</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:51:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>439</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:51:47.485'</string>
</history>
<history>
<datetime>2020-06-02T16:51:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>440</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stat</string>
</history>
<history>
<datetime>2020-06-02T16:55:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>441</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:55:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>442</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:55:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>443</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:55:14.625'</string>
</history>
<history>
<datetime>2020-06-02T16:55:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>444</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stat</string>
</history>
<history>
<datetime>2020-06-02T16:56:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>445</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-02T16:56:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>446</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-02T16:56:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>447</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-02-2020 16:56:08.875'</string>
</history>
<history>
<datetime>2020-06-02T16:56:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>448</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stat</string>
</history>
<history>
<datetime>2020-06-03T07:02:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>449</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T07:02:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>450</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T07:02:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>451</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 07:02:32.166'</string>
</history>
<history>
<datetime>2020-06-03T07:02:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>452</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stat</string>
</history>
<history>
<datetime>2020-06-03T09:02:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>453</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T09:02:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>454</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T09:02:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>455</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 09:02:06.050'</string>
</history>
<history>
<datetime>2020-06-03T09:02:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>456</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stat</string>
</history>
<history>
<datetime>2020-06-03T09:07:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>457</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T09:07:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>458</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T09:07:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>459</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 09:07:19.072'</string>
</history>
<history>
<datetime>2020-06-03T09:07:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>460</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); System.out.println("0 = "+attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMast</string>
</history>
<history>
<datetime>2020-06-03T09:08:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>461</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T09:08:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>462</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T09:08:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>463</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 09:08:31.581'</string>
</history>
<history>
<datetime>2020-06-03T09:08:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>464</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID"); System.out.println("-1 = "+parentId); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); System.out.println("0 = "+attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelati</string>
</history>
<history>
<datetime>2020-06-03T09:10:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>465</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T09:10:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>466</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T09:10:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>467</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 09:10:31.426'</string>
</history>
<history>
<datetime>2020-06-03T09:10:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>468</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID"); System.out.println("-1 = "+parentId); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); System.out.println("statement "+statement); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("hi"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); System.out.println("0 = "+attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ System.out.println("hi2"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeV</string>
</history>
<history>
<datetime>2020-06-03T09:12:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>469</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T09:12:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>470</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T09:12:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>471</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 09:12:18.755'</string>
</history>
<history>
<datetime>2020-06-03T09:12:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>472</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID"); System.out.println("-1 = "+parentId); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); System.out.println("statement "+statement); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("hi"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); System.out.println("0 = "+attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ System.out.println("hi2"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeV</string>
</history>
<history>
<datetime>2020-06-03T09:13:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>473</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T09:13:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>474</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T09:13:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>475</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 09:13:51.661'</string>
</history>
<history>
<datetime>2020-06-03T09:13:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>476</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID"); System.out.println("-1 = "+parentId); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); System.out.println("statement "+statement); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("hi"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); System.out.println("0 = "+attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ System.out.println("hi2"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeV</string>
</history>
<history>
<datetime>2020-06-03T09:17:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>477</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T09:17:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>478</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T09:17:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>479</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 09:17:51.102'</string>
</history>
<history>
<datetime>2020-06-03T09:17:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>480</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID"); System.out.println("-1 = "+parentId); DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); System.out.println("statement "+statement); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ System.out.println("hi"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); System.out.println("0 = "+attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ System.out.println("hi2"); statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeV</string>
</history>
<history>
<datetime>2020-06-03T09:38:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>481</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T09:38:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>482</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T09:38:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>483</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 09:38:28.498'</string>
</history>
<history>
<datetime>2020-06-03T09:38:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>484</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList; import org.apache.log4j.Logger; import java.util.HashMap; import java.util.Hashtable; import java.util.Map;     public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args)throws Exception	{  MapList result = new MapList(); try{ String where = new String (); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap)programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String  parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM))	{ statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVI</string>
</history>
<history>
<datetime>2020-06-03T13:17:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>485</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T13:17:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>486</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T13:17:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>487</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 13:16:53.036'</string>
</history>
<history>
<datetime>2020-06-03T13:17:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>488</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-03T13:20:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>489</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T13:20:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>490</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T13:20:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>491</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 13:20:31.931'</string>
</history>
<history>
<datetime>2020-06-03T13:20:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>492</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-03T13:33:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>493</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T13:33:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>494</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T13:33:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>495</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 13:33:25.681'</string>
</history>
<history>
<datetime>2020-06-03T13:33:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>496</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-03T13:38:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>497</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T13:38:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>498</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T13:38:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>499</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 13:37:56.128'</string>
</history>
<history>
<datetime>2020-06-03T13:38:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>500</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-03T13:42:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>501</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T13:42:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>502</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T13:42:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>503</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 13:42:12.615'</string>
</history>
<history>
<datetime>2020-06-03T13:42:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>504</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-03T13:43:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>505</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T13:43:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>506</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T13:43:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>507</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 13:43:18.601'</string>
</history>
<history>
<datetime>2020-06-03T13:43:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>508</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-03T13:45:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>509</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T13:45:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>510</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T13:45:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>511</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 13:44:59.308'</string>
</history>
<history>
<datetime>2020-06-03T13:45:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>512</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-03T13:50:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>513</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T13:50:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>514</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T13:50:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>515</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 13:50:06.085'</string>
</history>
<history>
<datetime>2020-06-03T13:50:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>516</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-03T14:06:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>517</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T14:06:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>518</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T14:06:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>519</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 14:06:46.888'</string>
</history>
<history>
<datetime>2020-06-03T14:06:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>520</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-03T14:08:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>521</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-03T14:08:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>522</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-03T14:08:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>523</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-03-2020 14:08:34.781'</string>
</history>
<history>
<datetime>2020-06-03T14:08:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>524</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-04T06:33:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>525</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T06:33:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>526</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T06:33:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>527</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 06:33:33.350'</string>
</history>
<history>
<datetime>2020-06-04T06:33:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>528</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-04T06:40:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>529</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T06:40:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>530</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T06:40:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>531</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 06:40:04.086'</string>
</history>
<history>
<datetime>2020-06-04T06:40:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>532</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-04T06:42:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>533</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T06:42:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>534</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T06:42:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>535</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 06:42:22.683'</string>
</history>
<history>
<datetime>2020-06-04T06:42:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>536</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-04T06:46:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>537</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T06:46:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>538</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T06:46:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>539</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 06:46:04.498'</string>
</history>
<history>
<datetime>2020-06-04T06:46:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>540</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relati</string>
</history>
<history>
<datetime>2020-06-04T07:50:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>541</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T07:50:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>542</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T07:50:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>543</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 07:49:58.597'</string>
</history>
<history>
<datetime>2020-06-04T07:50:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>544</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, s</string>
</history>
<history>
<datetime>2020-06-04T07:57:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>545</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T07:57:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>546</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T07:57:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>547</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 07:56:43.475'</string>
</history>
<history>
<datetime>2020-06-04T07:57:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>548</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, s</string>
</history>
<history>
<datetime>2020-06-04T08:01:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>549</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:01:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>550</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:01:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>551</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:00:56.431'</string>
</history>
<history>
<datetime>2020-06-04T08:01:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>552</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, s</string>
</history>
<history>
<datetime>2020-06-04T08:03:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>553</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:03:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>554</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:03:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>555</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:03:25.671'</string>
</history>
<history>
<datetime>2020-06-04T08:03:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>556</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, s</string>
</history>
<history>
<datetime>2020-06-04T08:07:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>557</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:07:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>558</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:07:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>559</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:07:09.442'</string>
</history>
<history>
<datetime>2020-06-04T08:07:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>560</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelation</string>
</history>
<history>
<datetime>2020-06-04T08:08:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>561</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:08:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>562</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:08:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>563</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:08:24.849'</string>
</history>
<history>
<datetime>2020-06-04T08:08:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>564</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.ContextUtil; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelation</string>
</history>
<history>
<datetime>2020-06-04T08:20:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>565</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:20:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>566</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:20:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>567</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:20:00.502'</string>
</history>
<history>
<datetime>2020-06-04T08:20:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>568</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); rela</string>
</history>
<history>
<datetime>2020-06-04T08:24:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>569</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:24:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>570</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:24:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>571</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:24:53.436'</string>
</history>
<history>
<datetime>2020-06-04T08:24:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>572</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); rela</string>
</history>
<history>
<datetime>2020-06-04T08:26:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>573</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:26:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>574</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:26:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>575</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:26:29.189'</string>
</history>
<history>
<datetime>2020-06-04T08:26:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>576</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); rela</string>
</history>
<history>
<datetime>2020-06-04T08:28:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>577</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:28:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>578</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:28:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>579</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:28:08.814'</string>
</history>
<history>
<datetime>2020-06-04T08:28:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>580</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); rela</string>
</history>
<history>
<datetime>2020-06-04T08:30:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>581</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:30:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>582</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:30:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>583</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:30:36.865'</string>
</history>
<history>
<datetime>2020-06-04T08:30:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>584</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); rela</string>
</history>
<history>
<datetime>2020-06-04T08:32:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>585</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:32:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>586</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:32:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>587</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:32:39.233'</string>
</history>
<history>
<datetime>2020-06-04T08:32:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>588</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.AttributeList; import matrix.db.AttributeType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); rela</string>
</history>
<history>
<datetime>2020-06-04T08:47:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>589</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T08:47:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>590</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T08:47:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>591</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 08:47:43.385'</string>
</history>
<history>
<datetime>2020-06-04T08:47:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>592</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T10:38:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>593</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T10:38:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>594</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T10:38:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>595</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 10:37:35.703'</string>
</history>
<history>
<datetime>2020-06-04T10:38:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>596</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T10:42:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>597</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T10:42:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>598</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T10:42:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>599</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 10:42:36.113'</string>
</history>
<history>
<datetime>2020-06-04T10:42:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>600</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T10:44:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>601</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T10:44:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>602</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T10:44:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>603</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 10:44:31.281'</string>
</history>
<history>
<datetime>2020-06-04T10:44:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>604</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T10:50:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>605</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T10:50:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>606</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T10:50:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>607</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 10:50:13.965'</string>
</history>
<history>
<datetime>2020-06-04T10:50:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>608</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T10:52:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>609</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T10:52:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>610</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T10:52:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>611</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 10:52:03.511'</string>
</history>
<history>
<datetime>2020-06-04T10:52:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>612</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T10:53:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>613</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T10:53:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>614</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T10:53:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>615</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 10:53:26.432'</string>
</history>
<history>
<datetime>2020-06-04T10:53:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>616</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T11:02:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>617</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T11:02:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>618</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T11:02:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>619</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 11:02:09.102'</string>
</history>
<history>
<datetime>2020-06-04T11:02:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>620</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T11:23:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>621</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T11:23:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>622</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T11:23:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>623</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 11:22:59.751'</string>
</history>
<history>
<datetime>2020-06-04T11:23:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>624</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T12:33:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>625</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T12:33:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>626</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T12:33:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>627</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 12:33:29.135'</string>
</history>
<history>
<datetime>2020-06-04T12:33:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>628</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T12:36:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>629</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T12:36:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>630</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T12:36:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>631</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 12:36:35.489'</string>
</history>
<history>
<datetime>2020-06-04T12:36:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>632</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T12:43:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>633</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T12:43:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>634</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T12:43:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>635</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 12:43:29.388'</string>
</history>
<history>
<datetime>2020-06-04T12:43:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>636</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T13:07:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>637</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T13:07:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>638</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T13:07:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>639</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 13:07:36.763'</string>
</history>
<history>
<datetime>2020-06-04T13:07:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>640</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T13:18:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>641</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T13:18:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>642</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T13:18:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>643</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 13:17:59.442'</string>
</history>
<history>
<datetime>2020-06-04T13:18:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>644</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T13:19:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>645</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T13:19:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>646</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T13:19:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>647</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 13:19:14.591'</string>
</history>
<history>
<datetime>2020-06-04T13:19:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>648</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T13:21:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>649</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T13:21:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>650</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T13:21:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>651</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 13:21:23.959'</string>
</history>
<history>
<datetime>2020-06-04T13:21:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>652</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T13:39:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>653</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T13:39:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>654</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T13:39:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>655</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 13:39:06.398'</string>
</history>
<history>
<datetime>2020-06-04T13:39:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>656</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T13:49:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>657</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T13:49:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>658</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T13:49:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>659</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 13:49:43.717'</string>
</history>
<history>
<datetime>2020-06-04T13:49:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>660</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T13:53:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>661</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T13:53:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>662</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T13:53:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>663</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 13:53:38.893'</string>
</history>
<history>
<datetime>2020-06-04T13:53:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>664</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T13:56:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>665</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T13:56:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>666</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T13:56:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>667</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 13:55:58.622'</string>
</history>
<history>
<datetime>2020-06-04T13:56:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>668</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T13:59:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>669</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T13:59:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>670</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T13:59:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>671</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 13:59:20.500'</string>
</history>
<history>
<datetime>2020-06-04T13:59:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>672</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T14:01:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>673</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T14:01:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>674</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T14:01:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>675</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 14:01:35.065'</string>
</history>
<history>
<datetime>2020-06-04T14:01:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>676</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T14:17:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>677</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T14:17:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>678</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T14:17:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>679</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 14:17:30.937'</string>
</history>
<history>
<datetime>2020-06-04T14:17:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>680</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T15:04:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>681</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T15:04:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>682</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T15:04:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>683</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 15:04:24.571'</string>
</history>
<history>
<datetime>2020-06-04T15:04:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>684</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T15:05:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>685</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T15:05:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>686</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T15:05:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>687</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 15:05:12.961'</string>
</history>
<history>
<datetime>2020-06-04T15:05:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>688</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T16:22:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>689</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T16:22:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>690</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T16:22:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>691</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 16:21:02.506'</string>
</history>
<history>
<datetime>2020-06-04T16:22:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>692</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-04T20:23:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>693</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T20:23:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>694</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T20:23:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>695</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 20:23:08.735'</string>
</history>
<history>
<datetime>2020-06-04T20:23:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>696</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(</string>
</history>
<history>
<datetime>2020-06-04T20:36:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>697</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-04T20:36:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>698</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-04T20:36:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>699</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-04-2020 20:36:42.492'</string>
</history>
<history>
<datetime>2020-06-04T20:36:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>700</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_P</string>
</history>
<history>
<datetime>2020-06-05T07:26:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>701</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T07:26:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>702</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T07:26:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>703</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 07:25:54.973'</string>
</history>
<history>
<datetime>2020-06-05T07:26:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>704</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-05T07:55:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>705</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T07:55:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>706</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T07:55:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>707</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 07:55:25.635'</string>
</history>
<history>
<datetime>2020-06-05T07:55:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>708</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-05T07:56:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>709</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T07:56:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>710</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T07:56:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>711</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 07:56:14.885'</string>
</history>
<history>
<datetime>2020-06-05T07:56:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>712</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); DomainObject parent = DomainObject.newInstance(context, parentId);</string>
</history>
<history>
<datetime>2020-06-05T08:32:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>713</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T08:32:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>714</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T08:32:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>715</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 08:31:54.355'</string>
</history>
<history>
<datetime>2020-06-05T08:32:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>716</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T08:42:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>717</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T08:42:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>718</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T08:42:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>719</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 08:42:35.607'</string>
</history>
<history>
<datetime>2020-06-05T08:42:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>720</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T08:44:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>721</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T08:44:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>722</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T08:44:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>723</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 08:44:33.188'</string>
</history>
<history>
<datetime>2020-06-05T08:44:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>724</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T08:47:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>725</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T08:47:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>726</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T08:47:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>727</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 08:47:52.359'</string>
</history>
<history>
<datetime>2020-06-05T08:47:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>728</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T08:50:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>729</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T08:50:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>730</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T08:50:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>731</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 08:50:36.316'</string>
</history>
<history>
<datetime>2020-06-05T08:50:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>732</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T09:43:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>733</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T09:43:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>734</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T09:43:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>735</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 09:42:59.888'</string>
</history>
<history>
<datetime>2020-06-05T09:43:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>736</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T13:32:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>737</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T13:32:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>738</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T13:32:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>739</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 13:32:16.461'</string>
</history>
<history>
<datetime>2020-06-05T13:32:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>740</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T13:34:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>741</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T13:34:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>742</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T13:34:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>743</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 13:34:54.657'</string>
</history>
<history>
<datetime>2020-06-05T13:34:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>744</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T13:36:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>745</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T13:36:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>746</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T13:36:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>747</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 13:36:20.173'</string>
</history>
<history>
<datetime>2020-06-05T13:36:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>748</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T13:37:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>749</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T13:37:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>750</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T13:37:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>751</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 13:37:47.510'</string>
</history>
<history>
<datetime>2020-06-05T13:37:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>752</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T13:41:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>753</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T13:41:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>754</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T13:41:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>755</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 13:41:41.425'</string>
</history>
<history>
<datetime>2020-06-05T13:41:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>756</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T14:38:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>757</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T14:38:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>758</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T14:38:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>759</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 14:37:58.345'</string>
</history>
<history>
<datetime>2020-06-05T14:38:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>760</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T14:44:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>761</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T14:44:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>762</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T14:44:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>763</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 14:44:25.081'</string>
</history>
<history>
<datetime>2020-06-05T14:44:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>764</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, stateme</string>
</history>
<history>
<datetime>2020-06-05T14:46:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>765</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T14:46:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>766</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T14:46:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>767</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 14:46:00.628'</string>
</history>
<history>
<datetime>2020-06-05T14:46:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>768</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import matrix.db.Context; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_</string>
</history>
<history>
<datetime>2020-06-05T14:54:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>769</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T14:54:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>770</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T14:54:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>771</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 14:54:03.732'</string>
</history>
<history>
<datetime>2020-06-05T14:54:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>772</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.db.JPO; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(co</string>
</history>
<history>
<datetime>2020-06-05T15:06:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>773</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T15:06:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>774</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T15:06:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>775</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 15:06:15.560'</string>
</history>
<history>
<datetime>2020-06-05T15:06:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>776</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Doma</string>
</history>
<history>
<datetime>2020-06-05T15:13:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>777</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T15:13:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>778</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T15:13:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>779</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 15:13:38.438'</string>
</history>
<history>
<datetime>2020-06-05T15:13:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>780</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-05T15:22:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>781</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T15:22:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>782</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T15:22:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>783</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 15:22:12.335'</string>
</history>
<history>
<datetime>2020-06-05T15:22:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>784</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-05T15:45:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>785</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T15:45:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>786</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T15:45:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>787</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 15:45:08.285'</string>
</history>
<history>
<datetime>2020-06-05T15:45:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>788</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-05T15:51:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>789</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T15:51:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>790</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T15:51:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>791</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 15:51:10.603'</string>
</history>
<history>
<datetime>2020-06-05T15:51:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>792</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-05T16:04:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>793</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T16:04:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>794</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T16:04:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>795</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 16:04:32.667'</string>
</history>
<history>
<datetime>2020-06-05T16:04:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>796</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-05T16:07:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>797</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T16:07:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>798</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T16:07:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>799</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 16:07:03.507'</string>
</history>
<history>
<datetime>2020-06-05T16:07:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>800</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-05T16:08:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>801</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-05T16:08:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>802</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-05T16:08:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>803</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-05-2020 16:08:13.178'</string>
</history>
<history>
<datetime>2020-06-05T16:08:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>804</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-06T08:09:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>805</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-06T08:09:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>806</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-06T08:09:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>807</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-06-2020 08:09:24.780'</string>
</history>
<history>
<datetime>2020-06-06T08:09:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>808</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-06T08:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>809</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-06T08:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>810</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-06T08:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>811</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-06-2020 08:30:46.339'</string>
</history>
<history>
<datetime>2020-06-06T08:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>812</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-06T10:19:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>813</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-06T10:19:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>814</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-06T10:19:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>815</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-06-2020 10:19:02.104'</string>
</history>
<history>
<datetime>2020-06-06T10:19:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>816</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-06T10:20:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>817</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-06T10:20:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>818</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-06T10:20:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>819</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-06-2020 10:20:10.903'</string>
</history>
<history>
<datetime>2020-06-06T10:20:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>820</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObjec</string>
</history>
<history>
<datetime>2020-06-06T10:20:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>821</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-06T10:20:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>822</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-06T10:20:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>823</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-06-2020 10:20:44.077'</string>
</history>
<history>
<datetime>2020-06-06T10:20:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>824</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relatio</string>
</history>
<history>
<datetime>2020-06-06T11:35:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>825</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-06T11:35:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>826</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-06T11:35:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>827</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-06-2020 11:35:00.587'</string>
</history>
<history>
<datetime>2020-06-06T11:35:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>828</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Attribute; import matrix.db.AttributeType; import matrix.db.AttributeList; import matrix.db.BusinessObject; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipItr; import matrix.db.RelationshipType; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.*;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relatio</string>
</history>
<history>
<datetime>2020-06-08T10:35:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>829</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-08T10:35:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>830</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-08T10:35:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>831</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-08-2020 10:35:34.036'</string>
</history>
<history>
<datetime>2020-06-08T10:35:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>832</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-08T12:17:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>833</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-08T12:17:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>834</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-08T12:17:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>835</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-08-2020 12:17:03.315'</string>
</history>
<history>
<datetime>2020-06-08T12:17:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>836</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-08T12:31:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>837</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-08T12:31:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>838</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-08T12:31:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>839</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-08-2020 12:31:47.921'</string>
</history>
<history>
<datetime>2020-06-08T12:31:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>840</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-08T12:33:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>841</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-08T12:33:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>842</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-08T12:33:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>843</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-08-2020 12:33:17.610'</string>
</history>
<history>
<datetime>2020-06-08T12:33:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>844</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-08T16:23:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>845</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-08T16:23:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>846</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-08T16:23:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>847</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-08-2020 16:23:01.106'</string>
</history>
<history>
<datetime>2020-06-08T16:23:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>848</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T09:54:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>849</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T09:54:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>850</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T09:54:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>851</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 09:53:43.109'</string>
</history>
<history>
<datetime>2020-06-10T09:54:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>852</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T09:56:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>853</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T09:56:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>854</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T09:56:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>855</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 09:56:03.174'</string>
</history>
<history>
<datetime>2020-06-10T09:56:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>856</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T09:59:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>857</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T09:59:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>858</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T09:59:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>859</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 09:59:17.426'</string>
</history>
<history>
<datetime>2020-06-10T09:59:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>860</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T12:35:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>861</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T12:35:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>862</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T12:35:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>863</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 12:34:36.590'</string>
</history>
<history>
<datetime>2020-06-10T12:35:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>864</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T12:36:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>865</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T12:36:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>866</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T12:36:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>867</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 12:36:15.347'</string>
</history>
<history>
<datetime>2020-06-10T12:36:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>868</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T12:39:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>869</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T12:39:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>870</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T12:39:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>871</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 12:39:44.318'</string>
</history>
<history>
<datetime>2020-06-10T12:39:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>872</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T12:56:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>873</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T12:56:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>874</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T12:56:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>875</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 12:55:48.377'</string>
</history>
<history>
<datetime>2020-06-10T12:56:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>876</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T13:06:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>877</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T13:06:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>878</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T13:06:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>879</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 13:06:46.914'</string>
</history>
<history>
<datetime>2020-06-10T13:06:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>880</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T13:09:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>881</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T13:09:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>882</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T13:09:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>883</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 13:09:21.905'</string>
</history>
<history>
<datetime>2020-06-10T13:09:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>884</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T13:21:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>885</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T13:21:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>886</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T13:21:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>887</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 13:21:22.325'</string>
</history>
<history>
<datetime>2020-06-10T13:21:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>888</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T14:03:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>889</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T14:03:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>890</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T14:03:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>891</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 14:03:06.104'</string>
</history>
<history>
<datetime>2020-06-10T14:03:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>892</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T14:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>893</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T14:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>894</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T14:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>895</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 14:47:59.223'</string>
</history>
<history>
<datetime>2020-06-10T14:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>896</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T15:10:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>897</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T15:10:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>898</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T15:10:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>899</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 15:10:31.304'</string>
</history>
<history>
<datetime>2020-06-10T15:10:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>900</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-10T15:49:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>901</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-10T15:49:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>902</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-10T15:49:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>903</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-10-2020 15:49:27.908'</string>
</history>
<history>
<datetime>2020-06-10T15:49:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>904</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T06:25:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>905</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T06:25:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>906</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T06:25:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>907</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 06:24:46.816'</string>
</history>
<history>
<datetime>2020-06-11T06:25:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>908</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T07:13:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>909</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T07:13:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>910</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T07:13:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>911</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 07:13:40.934'</string>
</history>
<history>
<datetime>2020-06-11T07:13:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>912</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T07:15:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>913</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T07:15:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>914</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T07:15:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>915</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 07:15:45.216'</string>
</history>
<history>
<datetime>2020-06-11T07:15:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>916</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T07:17:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>917</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T07:17:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>918</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T07:17:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>919</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 07:16:59.933'</string>
</history>
<history>
<datetime>2020-06-11T07:17:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>920</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T07:24:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>921</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T07:24:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>922</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T07:24:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>923</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 07:24:25.631'</string>
</history>
<history>
<datetime>2020-06-11T07:24:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>924</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T07:27:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>925</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T07:27:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>926</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T07:27:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>927</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 07:27:55.796'</string>
</history>
<history>
<datetime>2020-06-11T07:27:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>928</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T07:51:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>929</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T07:51:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>930</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T07:51:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>931</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 07:51:35.115'</string>
</history>
<history>
<datetime>2020-06-11T07:51:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>932</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T07:57:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>933</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T07:57:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>934</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T07:57:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>935</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 07:57:29.250'</string>
</history>
<history>
<datetime>2020-06-11T07:57:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>936</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T08:01:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>937</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T08:01:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>938</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T08:01:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>939</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 08:01:07.889'</string>
</history>
<history>
<datetime>2020-06-11T08:01:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>940</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T08:06:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>941</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T08:06:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>942</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T08:06:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>943</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 08:06:52.736'</string>
</history>
<history>
<datetime>2020-06-11T08:06:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>944</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T08:12:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>945</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T08:12:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>946</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T08:12:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>947</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 08:12:32.999'</string>
</history>
<history>
<datetime>2020-06-11T08:12:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>948</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T08:23:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>949</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T08:23:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>950</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T08:23:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>951</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 08:23:20.256'</string>
</history>
<history>
<datetime>2020-06-11T08:23:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>952</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T08:37:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>953</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T08:37:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>954</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T08:37:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>955</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 08:37:20.252'</string>
</history>
<history>
<datetime>2020-06-11T08:37:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>956</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T08:37:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>957</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T08:37:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>958</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T08:37:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>959</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 08:37:45.158'</string>
</history>
<history>
<datetime>2020-06-11T08:37:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>960</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T08:45:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>961</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T08:45:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>962</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T08:45:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>963</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 08:45:39.344'</string>
</history>
<history>
<datetime>2020-06-11T08:45:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>964</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T08:46:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>965</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T08:46:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>966</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T08:46:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>967</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 08:45:59.048'</string>
</history>
<history>
<datetime>2020-06-11T08:46:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>968</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T08:56:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>969</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T08:56:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>970</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T08:56:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>971</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 08:56:32.608'</string>
</history>
<history>
<datetime>2020-06-11T08:56:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>972</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T08:58:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>973</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T08:58:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>974</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T08:58:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>975</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 08:58:16.331'</string>
</history>
<history>
<datetime>2020-06-11T08:58:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>976</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T09:09:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>977</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T09:09:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>978</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T09:09:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>979</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 09:09:20.767'</string>
</history>
<history>
<datetime>2020-06-11T09:09:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>980</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T09:23:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>981</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T09:23:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>982</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T09:23:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>983</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 09:23:56.048'</string>
</history>
<history>
<datetime>2020-06-11T09:23:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>984</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T09:38:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>985</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T09:38:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>986</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T09:38:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>987</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 09:38:02.896'</string>
</history>
<history>
<datetime>2020-06-11T09:38:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>988</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T09:38:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>989</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T09:38:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>990</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T09:38:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>991</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 09:38:29.208'</string>
</history>
<history>
<datetime>2020-06-11T09:38:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>992</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T09:39:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>993</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T09:39:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>994</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T09:39:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>995</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 09:39:27.569'</string>
</history>
<history>
<datetime>2020-06-11T09:39:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>996</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T09:49:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>997</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T09:49:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>998</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T09:49:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>999</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 09:49:26.708'</string>
</history>
<history>
<datetime>2020-06-11T09:49:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1000</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T09:52:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1001</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T09:52:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1002</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T09:52:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1003</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 09:52:09.946'</string>
</history>
<history>
<datetime>2020-06-11T09:52:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1004</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T10:39:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1005</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T10:39:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1006</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T10:39:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1007</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 10:39:37.421'</string>
</history>
<history>
<datetime>2020-06-11T10:39:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1008</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T10:44:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1009</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T10:44:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1010</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T10:44:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1011</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 10:44:29.311'</string>
</history>
<history>
<datetime>2020-06-11T10:44:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1012</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T10:54:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1013</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T10:54:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1014</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T10:54:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1015</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 10:54:14.567'</string>
</history>
<history>
<datetime>2020-06-11T10:54:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1016</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T11:11:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1017</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T11:11:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1018</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T11:11:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1019</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 11:11:09.363'</string>
</history>
<history>
<datetime>2020-06-11T11:11:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1020</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T12:14:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1021</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T12:14:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1022</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T12:14:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1023</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 12:14:06.858'</string>
</history>
<history>
<datetime>2020-06-11T12:14:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1024</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T12:16:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1025</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T12:16:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1026</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T12:16:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1027</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 12:15:57.279'</string>
</history>
<history>
<datetime>2020-06-11T12:16:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1028</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T12:18:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1029</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T12:18:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1030</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T12:18:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1031</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 12:18:05.331'</string>
</history>
<history>
<datetime>2020-06-11T12:18:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1032</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T12:49:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1033</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T12:49:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1034</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T12:49:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1035</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 12:49:02.056'</string>
</history>
<history>
<datetime>2020-06-11T12:49:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1036</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T13:23:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1037</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T13:23:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1038</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T13:23:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1039</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 13:23:12.280'</string>
</history>
<history>
<datetime>2020-06-11T13:23:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1040</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T13:25:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1041</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T13:25:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1042</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T13:25:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1043</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 13:24:58.748'</string>
</history>
<history>
<datetime>2020-06-11T13:25:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1044</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T13:32:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1045</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T13:32:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1046</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T13:32:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1047</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 13:32:40.809'</string>
</history>
<history>
<datetime>2020-06-11T13:32:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1048</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T13:33:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1049</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T13:33:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1050</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T13:33:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1051</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 13:33:06.090'</string>
</history>
<history>
<datetime>2020-06-11T13:33:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1052</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T13:38:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1053</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T13:38:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1054</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T13:38:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1055</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 13:38:56.999'</string>
</history>
<history>
<datetime>2020-06-11T13:38:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1056</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T14:00:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1057</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T14:00:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1058</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T14:00:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1059</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 14:00:06.795'</string>
</history>
<history>
<datetime>2020-06-11T14:00:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1060</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T14:02:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1061</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T14:02:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1062</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T14:02:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1063</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 14:02:25.269'</string>
</history>
<history>
<datetime>2020-06-11T14:02:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1064</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T14:12:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1065</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T14:12:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1066</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T14:12:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1067</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 14:12:38.431'</string>
</history>
<history>
<datetime>2020-06-11T14:12:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1068</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T14:23:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1069</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T14:23:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1070</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T14:23:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1071</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 14:23:17.900'</string>
</history>
<history>
<datetime>2020-06-11T14:23:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1072</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-11T16:32:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1073</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-11T16:32:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1074</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-11T16:32:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1075</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-11-2020 16:32:16.900'</string>
</history>
<history>
<datetime>2020-06-11T16:32:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1076</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-12T21:51:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1077</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-12T21:51:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1078</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-12T21:51:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1079</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-12-2020 21:51:34.190'</string>
</history>
<history>
<datetime>2020-06-12T21:51:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1080</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-12T21:52:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1081</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-12T21:52:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1082</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-12T21:52:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1083</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-12-2020 21:52:23.972'</string>
</history>
<history>
<datetime>2020-06-12T21:52:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1084</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-12T21:55:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1085</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-12T21:55:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1086</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-12T21:55:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1087</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-12-2020 21:55:31.329'</string>
</history>
<history>
<datetime>2020-06-12T21:55:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1088</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-13T08:06:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1089</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-13T08:06:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1090</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-13T08:06:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1091</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-13-2020 08:06:49.644'</string>
</history>
<history>
<datetime>2020-06-13T08:06:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1092</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-13T08:23:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1093</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-13T08:23:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1094</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-13T08:23:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1095</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-13-2020 08:23:20.732'</string>
</history>
<history>
<datetime>2020-06-13T08:23:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1096</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER</string>
</history>
<history>
<datetime>2020-06-15T09:23:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1097</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-15T09:23:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1098</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-15T09:23:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1099</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-15-2020 09:23:03.728'</string>
</history>
<history>
<datetime>2020-06-15T09:23:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1100</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(cont</string>
</history>
<history>
<datetime>2020-06-15T10:57:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1101</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-15T10:57:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1102</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-15T10:57:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1103</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-15-2020 10:57:48.273'</string>
</history>
<history>
<datetime>2020-06-15T10:57:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1104</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(cont</string>
</history>
<history>
<datetime>2020-06-15T12:44:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1105</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-15T12:44:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1106</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-15T12:44:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1107</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-15-2020 12:43:58.168'</string>
</history>
<history>
<datetime>2020-06-15T12:44:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1108</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-15T12:44:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1109</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-15T12:44:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1110</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-15T12:44:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1111</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-15-2020 12:43:58.168'</string>
</history>
<history>
<datetime>2020-06-15T12:44:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1112</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-15T12:48:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1113</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-15T12:48:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1114</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-15T12:48:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1115</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-15-2020 12:48:44.210'</string>
</history>
<history>
<datetime>2020-06-15T12:48:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1116</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-15T12:59:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1117</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-15T12:59:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1118</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-15T12:59:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1119</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-15-2020 12:59:24.771'</string>
</history>
<history>
<datetime>2020-06-15T12:59:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1120</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-15T13:07:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1121</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-15T13:07:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1122</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-15T13:07:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1123</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-15-2020 13:07:22.163'</string>
</history>
<history>
<datetime>2020-06-15T13:07:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1124</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-15T13:42:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1125</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-15T13:42:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1126</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-15T13:42:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1127</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-15-2020 13:42:18.020'</string>
</history>
<history>
<datetime>2020-06-15T13:42:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1128</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T09:26:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1129</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T09:26:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1130</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T09:26:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1131</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 09:26:31.319'</string>
</history>
<history>
<datetime>2020-06-16T09:26:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1132</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T09:33:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1133</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T09:33:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1134</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T09:33:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1135</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 09:33:08.682'</string>
</history>
<history>
<datetime>2020-06-16T09:33:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1136</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T09:37:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1137</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T09:37:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1138</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T09:37:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1139</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 09:37:39.333'</string>
</history>
<history>
<datetime>2020-06-16T09:37:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1140</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T09:46:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1141</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T09:46:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1142</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T09:46:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1143</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 09:46:33.630'</string>
</history>
<history>
<datetime>2020-06-16T09:46:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1144</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T09:51:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1145</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T09:51:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1146</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T09:51:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1147</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 09:51:50.850'</string>
</history>
<history>
<datetime>2020-06-16T09:51:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1148</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T09:56:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1149</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T09:56:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1150</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T09:56:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1151</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 09:51:50.850'</string>
</history>
<history>
<datetime>2020-06-16T09:56:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1152</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:09:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1153</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:09:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1154</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:09:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1155</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:09:42.271'</string>
</history>
<history>
<datetime>2020-06-16T10:09:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1156</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:21:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1157</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:21:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1158</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:21:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1159</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:20:58.439'</string>
</history>
<history>
<datetime>2020-06-16T10:21:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1160</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:25:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1161</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:25:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1162</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:25:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1163</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:25:08.167'</string>
</history>
<history>
<datetime>2020-06-16T10:25:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1164</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:28:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1165</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:28:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1166</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:28:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1167</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:27:54.689'</string>
</history>
<history>
<datetime>2020-06-16T10:28:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1168</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:32:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1169</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:32:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1170</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:32:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1171</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:32:45.680'</string>
</history>
<history>
<datetime>2020-06-16T10:32:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1172</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:34:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1173</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:34:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1174</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:34:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1175</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:34:33.963'</string>
</history>
<history>
<datetime>2020-06-16T10:34:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1176</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:38:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1177</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:38:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1178</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:38:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1179</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:38:46.949'</string>
</history>
<history>
<datetime>2020-06-16T10:38:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1180</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:42:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1181</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:42:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1182</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:42:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1183</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:42:15.784'</string>
</history>
<history>
<datetime>2020-06-16T10:42:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1184</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:47:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1185</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:47:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1186</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:47:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1187</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:47:06.374'</string>
</history>
<history>
<datetime>2020-06-16T10:47:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1188</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:53:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1189</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:53:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1190</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:53:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1191</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:53:53.123'</string>
</history>
<history>
<datetime>2020-06-16T10:53:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1192</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T10:59:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1193</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T10:59:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1194</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T10:59:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1195</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 10:59:50.610'</string>
</history>
<history>
<datetime>2020-06-16T10:59:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1196</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T11:00:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1197</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T11:00:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1198</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T11:00:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1199</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 11:00:07.685'</string>
</history>
<history>
<datetime>2020-06-16T11:00:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1200</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T11:05:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1201</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T11:05:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1202</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T11:05:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1203</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 11:05:04.312'</string>
</history>
<history>
<datetime>2020-06-16T11:05:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1204</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T11:18:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1205</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T11:18:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1206</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T11:18:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1207</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 11:18:19.045'</string>
</history>
<history>
<datetime>2020-06-16T11:18:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1208</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T11:18:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1209</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T11:18:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1210</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T11:18:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1211</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 11:18:19.045'</string>
</history>
<history>
<datetime>2020-06-16T11:18:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1212</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T11:40:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1213</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T11:40:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1214</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T11:40:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1215</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 11:18:19.045'</string>
</history>
<history>
<datetime>2020-06-16T11:40:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1216</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T14:04:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1217</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T14:04:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1218</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T14:04:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1219</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 14:04:31.634'</string>
</history>
<history>
<datetime>2020-06-16T14:04:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1220</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {  MapList result = new MapList(); try { String where = new String(); SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = Domain</string>
</history>
<history>
<datetime>2020-06-16T14:31:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1221</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T14:31:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1222</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T14:31:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1223</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 14:31:35.913'</string>
</history>
<history>
<datetime>2020-06-16T14:31:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1224</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result = new MapList(); try { String where = new String(); where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE</string>
</history>
<history>
<datetime>2020-06-16T17:16:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1225</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-16T17:16:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1226</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-16T17:16:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1227</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-16-2020 17:16:34.807'</string>
</history>
<history>
<datetime>2020-06-16T17:16:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1228</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result = new MapList(); try { String where = new String(); where = "current == Approved"; SelectList select = new SelectList(1); select.addElement("id"); result = DomainObject.findObjects(context, "IMS_PM_Statement", null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Uses to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE</string>
</history>
<history>
<datetime>2020-06-17T08:48:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1229</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T08:48:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1230</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T08:48:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1231</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 08:48:08.258'</string>
</history>
<history>
<datetime>2020-06-17T08:48:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1232</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRela</string>
</history>
<history>
<datetime>2020-06-17T10:16:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1233</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T10:16:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1234</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T10:16:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1235</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 10:15:55.123'</string>
</history>
<history>
<datetime>2020-06-17T10:16:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1236</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.HashMap; import java.util.Hashtable; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRela</string>
</history>
<history>
<datetime>2020-06-17T10:17:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1237</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T10:17:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1238</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T10:17:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1239</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 10:17:17.888'</string>
</history>
<history>
<datetime>2020-06-17T10:17:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1240</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T10:21:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1241</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T10:21:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1242</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T10:21:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1243</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 10:21:33.912'</string>
</history>
<history>
<datetime>2020-06-17T10:21:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1244</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T10:48:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1245</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T10:48:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1246</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T10:48:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1247</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 10:48:44.628'</string>
</history>
<history>
<datetime>2020-06-17T10:48:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1248</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T11:14:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1249</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T11:14:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1250</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T11:14:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1251</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 11:14:37.218'</string>
</history>
<history>
<datetime>2020-06-17T11:14:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1252</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T11:16:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1253</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T11:16:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1254</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T11:16:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1255</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 11:16:19.290'</string>
</history>
<history>
<datetime>2020-06-17T11:16:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1256</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T12:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1257</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T12:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1258</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T12:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1259</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 12:39:56.844'</string>
</history>
<history>
<datetime>2020-06-17T12:39:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1260</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T13:02:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1261</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T13:02:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1262</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T13:02:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1263</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 13:02:21.670'</string>
</history>
<history>
<datetime>2020-06-17T13:02:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1264</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T13:37:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1265</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T13:37:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1266</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T13:37:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1267</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 13:36:56.503'</string>
</history>
<history>
<datetime>2020-06-17T13:37:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1268</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T13:51:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1269</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T13:51:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1270</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T13:51:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1271</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 13:51:33.389'</string>
</history>
<history>
<datetime>2020-06-17T13:51:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1272</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T14:19:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1273</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T14:19:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1274</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T14:19:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1275</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 14:19:12.135'</string>
</history>
<history>
<datetime>2020-06-17T14:19:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1276</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T14:37:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1277</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T14:37:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1278</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T14:37:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1279</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 14:37:21.718'</string>
</history>
<history>
<datetime>2020-06-17T14:37:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1280</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T14:41:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1281</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T14:41:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1282</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T14:41:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1283</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 14:41:27.476'</string>
</history>
<history>
<datetime>2020-06-17T14:41:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1284</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T14:44:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1285</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T14:44:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1286</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T14:44:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1287</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 14:44:13.601'</string>
</history>
<history>
<datetime>2020-06-17T14:44:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1288</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T19:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1289</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T19:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1290</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T19:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1291</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 19:30:49.129'</string>
</history>
<history>
<datetime>2020-06-17T19:30:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1292</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T19:42:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1293</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T19:42:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1294</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T19:42:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1295</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 19:42:13.139'</string>
</history>
<history>
<datetime>2020-06-17T19:42:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1296</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T20:46:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1297</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T20:46:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1298</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T20:46:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1299</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 20:46:27.889'</string>
</history>
<history>
<datetime>2020-06-17T20:46:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1300</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T21:00:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1301</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T21:00:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1302</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T21:00:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1303</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 21:00:29.928'</string>
</history>
<history>
<datetime>2020-06-17T21:00:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1304</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T21:09:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1305</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T21:09:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1306</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T21:09:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1307</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 21:09:17.567'</string>
</history>
<history>
<datetime>2020-06-17T21:09:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1308</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T21:26:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1309</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T21:26:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1310</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T21:26:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1311</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 21:26:11.539'</string>
</history>
<history>
<datetime>2020-06-17T21:26:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1312</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T21:44:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1313</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T21:44:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1314</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T21:44:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1315</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 21:44:13.934'</string>
</history>
<history>
<datetime>2020-06-17T21:44:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1316</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T21:45:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1317</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T21:45:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1318</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T21:45:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1319</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 21:45:51.188'</string>
</history>
<history>
<datetime>2020-06-17T21:45:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1320</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T21:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1321</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T21:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1322</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T21:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1323</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 21:48:00.946'</string>
</history>
<history>
<datetime>2020-06-17T21:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1324</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T21:54:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1325</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T21:54:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1326</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T21:54:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1327</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 21:54:09.356'</string>
</history>
<history>
<datetime>2020-06-17T21:54:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1328</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T21:55:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1329</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T21:55:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1330</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T21:55:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1331</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 21:55:29.612'</string>
</history>
<history>
<datetime>2020-06-17T21:55:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1332</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T22:01:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1333</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T22:01:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1334</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T22:01:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1335</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 22:01:27.241'</string>
</history>
<history>
<datetime>2020-06-17T22:01:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1336</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T22:10:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1337</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T22:10:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1338</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T22:10:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1339</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 22:10:00.061'</string>
</history>
<history>
<datetime>2020-06-17T22:10:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1340</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T22:11:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1341</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T22:11:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1342</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T22:11:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1343</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 22:11:06.317'</string>
</history>
<history>
<datetime>2020-06-17T22:11:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1344</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-17T22:12:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1345</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-17T22:12:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1346</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-17T22:12:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1347</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-17-2020 22:12:54.632'</string>
</history>
<history>
<datetime>2020-06-17T22:12:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1348</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-18T08:34:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1349</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-18T08:34:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1350</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-18T08:34:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1351</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-18-2020 08:34:03.306'</string>
</history>
<history>
<datetime>2020-06-18T08:34:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1352</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-18T09:05:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1353</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-18T09:05:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1354</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-18T09:05:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1355</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-18-2020 09:05:20.373'</string>
</history>
<history>
<datetime>2020-06-18T09:05:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1356</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-18T09:19:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1357</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-18T09:19:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1358</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-18T09:19:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1359</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-18-2020 09:19:46.909'</string>
</history>
<history>
<datetime>2020-06-18T09:19:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1360</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-18T09:41:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1361</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-18T09:41:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1362</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-18T09:41:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1363</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-18-2020 09:41:04.360'</string>
</history>
<history>
<datetime>2020-06-18T09:41:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1364</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-18T09:50:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1365</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-18T09:50:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1366</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-18T09:50:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1367</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-18-2020 09:50:04.337'</string>
</history>
<history>
<datetime>2020-06-18T09:50:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1368</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-18T10:36:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1369</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-18T10:36:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1370</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-18T10:36:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1371</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-18-2020 10:33:56.897'</string>
</history>
<history>
<datetime>2020-06-18T10:36:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1372</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-18T11:14:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1373</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-18T11:14:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1374</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-18T11:14:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1375</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-18-2020 11:14:39.707'</string>
</history>
<history>
<datetime>2020-06-18T11:14:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1376</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-18T11:41:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1377</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-18T11:41:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1378</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-18T11:41:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1379</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-18-2020 11:41:26.601'</string>
</history>
<history>
<datetime>2020-06-18T11:41:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1380</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-18T11:49:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1381</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-18T11:49:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1382</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-18T11:49:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1383</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-18-2020 11:49:03.042'</string>
</history>
<history>
<datetime>2020-06-18T11:49:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1384</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-18T13:21:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1385</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-18T13:21:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1386</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-18T13:21:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1387</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-18-2020 13:21:04.004'</string>
</history>
<history>
<datetime>2020-06-18T13:21:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1388</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-19T06:54:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1389</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T06:54:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1390</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T06:54:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1391</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 06:54:09.921'</string>
</history>
<history>
<datetime>2020-06-19T06:54:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1392</order>
<string>mod program IMS_PM_StatementUtils code 'import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); select.addElement(DomainConstants.SELECT_ID); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RE</string>
</history>
<history>
<datetime>2020-06-19T06:54:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1393</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T06:54:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1394</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T06:54:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1395</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 06:54:10.640'</string>
</history>
<history>
<datetime>2020-06-19T06:54:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1396</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } e</string>
</history>
<history>
<datetime>2020-06-19T06:55:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1397</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T06:55:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1398</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T06:55:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1399</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 06:55:28.069'</string>
</history>
<history>
<datetime>2020-06-19T06:55:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1400</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } e</string>
</history>
<history>
<datetime>2020-06-19T07:07:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1401</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T07:07:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1402</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T07:07:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1403</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 07:07:28.517'</string>
</history>
<history>
<datetime>2020-06-19T07:07:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1404</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } e</string>
</history>
<history>
<datetime>2020-06-19T07:08:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1405</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T07:08:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1406</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T07:08:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1407</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 07:08:45.941'</string>
</history>
<history>
<datetime>2020-06-19T07:08:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1408</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } e</string>
</history>
<history>
<datetime>2020-06-19T07:23:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1409</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T07:23:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1410</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T07:23:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1411</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 07:23:54.263'</string>
</history>
<history>
<datetime>2020-06-19T07:23:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1412</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } e</string>
</history>
<history>
<datetime>2020-06-19T07:25:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1413</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T07:25:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1414</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T07:25:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1415</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 07:25:45.875'</string>
</history>
<history>
<datetime>2020-06-19T07:25:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1416</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UINavigatorUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statemen</string>
</history>
<history>
<datetime>2020-06-19T08:29:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1417</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T08:29:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1418</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T08:29:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1419</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 08:29:03.660'</string>
</history>
<history>
<datetime>2020-06-19T08:29:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1420</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UINavigatorUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statemen</string>
</history>
<history>
<datetime>2020-06-19T08:57:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1421</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T08:57:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1422</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T08:57:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1423</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 08:57:52.717'</string>
</history>
<history>
<datetime>2020-06-19T08:57:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1424</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UINavigatorUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statemen</string>
</history>
<history>
<datetime>2020-06-19T09:00:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1425</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T09:00:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1426</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T09:00:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1427</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 09:00:43.730'</string>
</history>
<history>
<datetime>2020-06-19T09:00:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1428</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UINavigatorUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statemen</string>
</history>
<history>
<datetime>2020-06-19T09:35:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1429</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T09:35:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1430</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T09:35:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1431</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 09:35:01.359'</string>
</history>
<history>
<datetime>2020-06-19T09:35:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1432</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UINavigatorUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statemen</string>
</history>
<history>
<datetime>2020-06-19T09:43:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1433</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T09:43:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1434</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T09:43:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1435</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 09:42:55.493'</string>
</history>
<history>
<datetime>2020-06-19T09:43:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1436</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UINavigatorUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statemen</string>
</history>
<history>
<datetime>2020-06-19T09:57:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1437</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T09:57:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1438</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T09:57:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1439</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 09:57:08.395'</string>
</history>
<history>
<datetime>2020-06-19T09:57:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1440</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UINavigatorUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.MatrixException; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statemen</string>
</history>
<history>
<datetime>2020-06-19T13:55:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1441</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-19T13:55:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1442</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-19T13:55:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1443</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-19-2020 13:55:25.420'</string>
</history>
<history>
<datetime>2020-06-19T13:55:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1444</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T07:06:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1445</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T07:06:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1446</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T07:06:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1447</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 07:06:42.121'</string>
</history>
<history>
<datetime>2020-06-22T07:06:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1448</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T07:17:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1449</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T07:17:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1450</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T07:17:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1451</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 07:17:43.201'</string>
</history>
<history>
<datetime>2020-06-22T07:17:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1452</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T08:14:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1453</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T08:14:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1454</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T08:14:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1455</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 08:14:52.095'</string>
</history>
<history>
<datetime>2020-06-22T08:14:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1456</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T13:52:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1457</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T13:52:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1458</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T13:52:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1459</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 13:52:09.808'</string>
</history>
<history>
<datetime>2020-06-22T13:52:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1460</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T13:59:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1461</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T13:59:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1462</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T13:59:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1463</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 13:58:58.618'</string>
</history>
<history>
<datetime>2020-06-22T13:59:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1464</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T14:37:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1465</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T14:37:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1466</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T14:37:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1467</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 14:37:50.397'</string>
</history>
<history>
<datetime>2020-06-22T14:37:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1468</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T14:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1469</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T14:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1470</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T14:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1471</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 14:39:53.738'</string>
</history>
<history>
<datetime>2020-06-22T14:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1472</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T14:44:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1473</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T14:44:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1474</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T14:44:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1475</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 14:44:03.734'</string>
</history>
<history>
<datetime>2020-06-22T14:44:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1476</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T14:47:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1477</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T14:47:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1478</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T14:47:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1479</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 14:47:16.134'</string>
</history>
<history>
<datetime>2020-06-22T14:47:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1480</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T14:50:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1481</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T14:50:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1482</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T14:50:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1483</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 14:50:01.122'</string>
</history>
<history>
<datetime>2020-06-22T14:50:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1484</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T14:51:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1485</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T14:51:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1486</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T14:51:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1487</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 14:51:00.873'</string>
</history>
<history>
<datetime>2020-06-22T14:51:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1488</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T15:17:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1489</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T15:17:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1490</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T15:17:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1491</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 15:17:06.607'</string>
</history>
<history>
<datetime>2020-06-22T15:17:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1492</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T19:56:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1493</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T19:56:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1494</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T19:56:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1495</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 19:56:17.176'</string>
</history>
<history>
<datetime>2020-06-22T19:56:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1496</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T20:17:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1497</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T20:17:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1498</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T20:17:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1499</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 20:17:21.181'</string>
</history>
<history>
<datetime>2020-06-22T20:17:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1500</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T20:19:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1501</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T20:19:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1502</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T20:19:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1503</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 20:19:01.292'</string>
</history>
<history>
<datetime>2020-06-22T20:19:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1504</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T20:25:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1505</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T20:25:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1506</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T20:25:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1507</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 20:25:03.988'</string>
</history>
<history>
<datetime>2020-06-22T20:25:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1508</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T20:30:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1509</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T20:30:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1510</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T20:30:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1511</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 20:30:13.695'</string>
</history>
<history>
<datetime>2020-06-22T20:30:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1512</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T20:33:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1513</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T20:33:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1514</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T20:33:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1515</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 20:33:11.115'</string>
</history>
<history>
<datetime>2020-06-22T20:33:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1516</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T20:37:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1517</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T20:37:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1518</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T20:37:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1519</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 20:37:42.076'</string>
</history>
<history>
<datetime>2020-06-22T20:37:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1520</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T20:40:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1521</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T20:40:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1522</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T20:40:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1523</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 20:40:10.515'</string>
</history>
<history>
<datetime>2020-06-22T20:40:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1524</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T20:42:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1525</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T20:42:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1526</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T20:42:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1527</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 20:42:01.744'</string>
</history>
<history>
<datetime>2020-06-22T20:42:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1528</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T20:49:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1529</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T20:49:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1530</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T20:49:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1531</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 20:49:49.232'</string>
</history>
<history>
<datetime>2020-06-22T20:49:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1532</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T20:57:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1533</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T20:57:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1534</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T20:57:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1535</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 20:57:04.239'</string>
</history>
<history>
<datetime>2020-06-22T20:57:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1536</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T21:00:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1537</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T21:00:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1538</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T21:00:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1539</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 21:00:45.301'</string>
</history>
<history>
<datetime>2020-06-22T21:00:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1540</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T21:12:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1541</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T21:12:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1542</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T21:12:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1543</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 21:12:27.944'</string>
</history>
<history>
<datetime>2020-06-22T21:12:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1544</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T21:24:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1545</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T21:24:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1546</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T21:24:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1547</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 21:12:27.944'</string>
</history>
<history>
<datetime>2020-06-22T21:24:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1548</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T21:25:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1549</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T21:25:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1550</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T21:25:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1551</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 21:24:55.487'</string>
</history>
<history>
<datetime>2020-06-22T21:25:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1552</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T21:27:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1553</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T21:27:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1554</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T21:27:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1555</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 21:24:55.487'</string>
</history>
<history>
<datetime>2020-06-22T21:27:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1556</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T21:41:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1557</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T21:41:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1558</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T21:41:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1559</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 21:40:59.045'</string>
</history>
<history>
<datetime>2020-06-22T21:41:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1560</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T21:43:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1561</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T21:43:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1562</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T21:43:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1563</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 21:43:45.985'</string>
</history>
<history>
<datetime>2020-06-22T21:43:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1564</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T21:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1565</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T21:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1566</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T21:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1567</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 21:57:22.282'</string>
</history>
<history>
<datetime>2020-06-22T21:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1568</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T22:10:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1569</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T22:10:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1570</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T22:10:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1571</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 22:10:13.285'</string>
</history>
<history>
<datetime>2020-06-22T22:10:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1572</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T22:12:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1573</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T22:12:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1574</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T22:12:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1575</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 22:12:40.691'</string>
</history>
<history>
<datetime>2020-06-22T22:12:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1576</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T22:14:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1577</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T22:14:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1578</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T22:14:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1579</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 22:14:28.878'</string>
</history>
<history>
<datetime>2020-06-22T22:14:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1580</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T22:15:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1581</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T22:15:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1582</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T22:15:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1583</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 22:15:39.084'</string>
</history>
<history>
<datetime>2020-06-22T22:15:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1584</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T22:20:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1585</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T22:20:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1586</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T22:20:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1587</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 22:20:55.212'</string>
</history>
<history>
<datetime>2020-06-22T22:20:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1588</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T22:34:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1589</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T22:34:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1590</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T22:34:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1591</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 22:34:03.599'</string>
</history>
<history>
<datetime>2020-06-22T22:34:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1592</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T22:46:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1593</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T22:46:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1594</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T22:46:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1595</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 22:46:24.840'</string>
</history>
<history>
<datetime>2020-06-22T22:46:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1596</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T22:46:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1597</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T22:46:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1598</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T22:46:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1599</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 22:46:49.809'</string>
</history>
<history>
<datetime>2020-06-22T22:46:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1600</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T23:05:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1601</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T23:05:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1602</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T23:05:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1603</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 23:02:37.759'</string>
</history>
<history>
<datetime>2020-06-22T23:05:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1604</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T23:06:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1605</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T23:06:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1606</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T23:06:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1607</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 23:05:56.563'</string>
</history>
<history>
<datetime>2020-06-22T23:06:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1608</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T23:11:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1609</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T23:11:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1610</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T23:11:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1611</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 23:11:46.107'</string>
</history>
<history>
<datetime>2020-06-22T23:11:48Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1612</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T23:23:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1613</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T23:23:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1614</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T23:23:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1615</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 23:23:51.468'</string>
</history>
<history>
<datetime>2020-06-22T23:23:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1616</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-22T23:27:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1617</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-22T23:27:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1618</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-22T23:27:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1619</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-22-2020 23:27:32.200'</string>
</history>
<history>
<datetime>2020-06-22T23:27:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1620</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T00:02:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1621</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T00:02:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1622</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T00:02:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1623</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 00:01:55.655'</string>
</history>
<history>
<datetime>2020-06-23T00:02:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1624</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T00:04:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1625</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T00:04:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1626</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T00:04:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1627</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 00:04:26.640'</string>
</history>
<history>
<datetime>2020-06-23T00:04:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1628</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T00:12:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1629</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T00:12:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1630</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T00:12:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1631</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 00:12:26.722'</string>
</history>
<history>
<datetime>2020-06-23T00:12:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1632</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T06:56:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1633</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T06:56:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1634</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T06:56:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1635</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 06:56:51.220'</string>
</history>
<history>
<datetime>2020-06-23T06:56:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1636</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T06:57:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1637</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T06:57:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1638</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T06:57:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1639</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 06:56:54.111'</string>
</history>
<history>
<datetime>2020-06-23T06:57:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1640</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T07:39:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1641</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T07:39:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1642</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T07:39:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1643</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 07:39:11.476'</string>
</history>
<history>
<datetime>2020-06-23T07:39:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1644</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T07:41:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1645</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T07:41:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1646</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T07:41:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1647</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 07:41:02.150'</string>
</history>
<history>
<datetime>2020-06-23T07:41:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1648</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T07:45:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1649</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T07:45:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1650</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T07:45:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1651</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 07:45:28.741'</string>
</history>
<history>
<datetime>2020-06-23T07:45:31Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1652</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T08:08:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1653</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T08:08:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1654</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T08:08:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1655</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 08:07:58.246'</string>
</history>
<history>
<datetime>2020-06-23T08:08:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1656</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T08:19:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1657</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T08:19:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1658</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T08:19:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1659</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 08:19:50.348'</string>
</history>
<history>
<datetime>2020-06-23T08:19:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1660</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T08:41:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1661</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T08:41:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1662</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T08:41:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1663</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 08:41:27.068'</string>
</history>
<history>
<datetime>2020-06-23T08:41:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1664</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T08:42:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1665</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T08:42:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1666</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T08:42:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1667</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 08:41:27.068'</string>
</history>
<history>
<datetime>2020-06-23T08:42:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1668</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T08:52:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1669</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T08:52:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1670</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T08:52:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1671</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 08:52:08.806'</string>
</history>
<history>
<datetime>2020-06-23T08:52:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1672</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T08:56:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1673</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T08:56:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1674</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T08:56:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1675</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 08:55:41.350'</string>
</history>
<history>
<datetime>2020-06-23T08:56:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1676</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T08:56:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1677</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T08:56:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1678</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T08:56:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1679</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 08:56:33.615'</string>
</history>
<history>
<datetime>2020-06-23T08:56:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1680</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T09:57:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1681</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T09:57:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1682</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T09:57:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1683</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 09:57:42.719'</string>
</history>
<history>
<datetime>2020-06-23T09:57:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1684</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-23T11:31:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1685</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-23T11:31:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1686</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-23T11:31:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1687</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-23-2020 11:31:24.992'</string>
</history>
<history>
<datetime>2020-06-23T11:31:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1688</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-26T11:06:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1689</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-26T11:06:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1690</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-26T11:06:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1691</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-26-2020 11:05:53.237'</string>
</history>
<history>
<datetime>2020-06-26T11:06:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1692</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-26T11:24:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1693</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-26T11:24:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1694</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-26T11:24:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1695</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-26-2020 11:24:31.172'</string>
</history>
<history>
<datetime>2020-06-26T11:24:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1696</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-26T11:36:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1697</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-26T11:36:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1698</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-26T11:36:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1699</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-26-2020 11:36:48.124'</string>
</history>
<history>
<datetime>2020-06-26T11:36:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1700</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-26T11:39:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1701</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-26T11:39:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1702</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-26T11:39:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1703</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-26-2020 11:39:03.632'</string>
</history>
<history>
<datetime>2020-06-26T11:39:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1704</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-28T20:36:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1705</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-28T20:36:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1706</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-28T20:36:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1707</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-28-2020 20:36:43.038'</string>
</history>
<history>
<datetime>2020-06-28T20:36:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1708</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-28T20:56:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1709</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-28T20:56:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1710</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-28T20:56:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1711</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-28-2020 20:56:53.155'</string>
</history>
<history>
<datetime>2020-06-28T20:56:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1712</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T16:07:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1713</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T16:07:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1714</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T16:07:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1715</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 16:06:59.419'</string>
</history>
<history>
<datetime>2020-06-29T16:07:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1716</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T16:36:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1717</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T16:36:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1718</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T16:36:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1719</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 16:36:52.692'</string>
</history>
<history>
<datetime>2020-06-29T16:36:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1720</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T17:12:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1721</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T17:12:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1722</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T17:12:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1723</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 17:12:46.082'</string>
</history>
<history>
<datetime>2020-06-29T17:12:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1724</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T17:15:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1725</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T17:15:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1726</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T17:15:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1727</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 17:15:38.852'</string>
</history>
<history>
<datetime>2020-06-29T17:15:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1728</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T17:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1729</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T17:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1730</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T17:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1731</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 17:18:05.963'</string>
</history>
<history>
<datetime>2020-06-29T17:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1732</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T17:20:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1733</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T17:20:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1734</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T17:20:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1735</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 17:20:19.785'</string>
</history>
<history>
<datetime>2020-06-29T17:20:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1736</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T19:21:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1737</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T19:21:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1738</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T19:21:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1739</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 19:21:36.544'</string>
</history>
<history>
<datetime>2020-06-29T19:21:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1740</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T19:28:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1741</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T19:28:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1742</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T19:28:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1743</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 19:28:18.674'</string>
</history>
<history>
<datetime>2020-06-29T19:28:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1744</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T20:27:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1745</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T20:27:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1746</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T20:27:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1747</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 20:27:46.161'</string>
</history>
<history>
<datetime>2020-06-29T20:27:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1748</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T20:58:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1749</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T20:58:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1750</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T20:58:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1751</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 20:58:25.124'</string>
</history>
<history>
<datetime>2020-06-29T20:58:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1752</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T21:54:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1753</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T21:54:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1754</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T21:54:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1755</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 21:54:28.926'</string>
</history>
<history>
<datetime>2020-06-29T21:54:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1756</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T21:57:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1757</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T21:57:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1758</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T21:57:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1759</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 21:57:35.922'</string>
</history>
<history>
<datetime>2020-06-29T21:57:39Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1760</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T22:24:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1761</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T22:24:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1762</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T22:24:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1763</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 22:24:10.408'</string>
</history>
<history>
<datetime>2020-06-29T22:24:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1764</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T22:33:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1765</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T22:33:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1766</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T22:33:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1767</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 22:33:00.394'</string>
</history>
<history>
<datetime>2020-06-29T22:33:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1768</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T22:35:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1769</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T22:35:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1770</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T22:35:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1771</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 22:35:49.703'</string>
</history>
<history>
<datetime>2020-06-29T22:35:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1772</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T22:47:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1773</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T22:47:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1774</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T22:47:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1775</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 22:47:40.111'</string>
</history>
<history>
<datetime>2020-06-29T22:47:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1776</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T22:51:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1777</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T22:51:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1778</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T22:51:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1779</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 22:50:58.121'</string>
</history>
<history>
<datetime>2020-06-29T22:51:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1780</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T22:52:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1781</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T22:52:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1782</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T22:52:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1783</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 22:52:32.714'</string>
</history>
<history>
<datetime>2020-06-29T22:52:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1784</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T22:58:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1785</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T22:58:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1786</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T22:58:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1787</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 22:58:15.064'</string>
</history>
<history>
<datetime>2020-06-29T22:58:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1788</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T22:59:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1789</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T22:59:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1790</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T22:59:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1791</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 22:59:20.329'</string>
</history>
<history>
<datetime>2020-06-29T22:59:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1792</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T23:05:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1793</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T23:05:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1794</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T23:05:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1795</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 23:05:26.589'</string>
</history>
<history>
<datetime>2020-06-29T23:05:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1796</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-29T23:11:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1797</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-29T23:11:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1798</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-29T23:11:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1799</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-29-2020 23:11:11.057'</string>
</history>
<history>
<datetime>2020-06-29T23:11:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1800</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-30T07:01:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1801</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T07:01:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1802</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T07:01:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1803</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 07:01:28.665'</string>
</history>
<history>
<datetime>2020-06-30T07:01:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1804</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-30T09:29:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1805</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T09:29:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1806</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T09:29:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1807</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 09:29:03.049'</string>
</history>
<history>
<datetime>2020-06-30T09:29:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1808</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-30T09:49:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1809</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T09:49:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1810</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T09:49:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1811</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 09:49:34.185'</string>
</history>
<history>
<datetime>2020-06-30T09:49:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1812</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-30T10:24:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1813</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T10:24:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1814</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T10:24:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1815</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 10:24:04.950'</string>
</history>
<history>
<datetime>2020-06-30T10:24:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1816</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-30T10:51:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1817</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T10:51:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1818</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T10:51:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1819</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 10:51:00.582'</string>
</history>
<history>
<datetime>2020-06-30T10:51:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1820</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute); } else if (type.equals(TYPE_IMS_PM_STA</string>
</history>
<history>
<datetime>2020-06-30T10:52:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1821</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T10:52:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1822</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T10:52:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1823</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 10:52:52.930'</string>
</history>
<history>
<datetime>2020-06-30T10:52:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1824</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T11:44:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1825</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T11:44:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1826</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T11:44:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1827</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 11:44:26.389'</string>
</history>
<history>
<datetime>2020-06-30T11:44:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1828</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T11:57:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1829</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T11:57:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1830</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T11:57:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1831</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 11:57:03.085'</string>
</history>
<history>
<datetime>2020-06-30T11:57:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1832</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T12:36:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1833</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T12:36:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1834</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T12:36:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1835</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 12:30:00.997'</string>
</history>
<history>
<datetime>2020-06-30T12:36:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1836</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T13:07:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1837</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T13:07:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1838</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T13:07:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1839</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 13:07:02.784'</string>
</history>
<history>
<datetime>2020-06-30T13:07:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1840</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T13:38:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1841</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T13:38:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1842</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T13:38:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1843</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 13:38:08.804'</string>
</history>
<history>
<datetime>2020-06-30T13:38:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1844</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T15:49:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1845</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T15:49:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1846</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T15:49:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1847</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 15:49:29.852'</string>
</history>
<history>
<datetime>2020-06-30T15:49:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1848</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T15:52:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1849</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T15:52:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1850</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T15:52:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1851</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 15:52:37.973'</string>
</history>
<history>
<datetime>2020-06-30T15:52:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1852</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T15:56:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1853</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T15:56:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1854</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T15:56:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1855</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 15:55:26.971'</string>
</history>
<history>
<datetime>2020-06-30T15:56:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1856</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T15:58:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1857</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T15:58:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1858</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T15:58:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1859</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 15:58:16.454'</string>
</history>
<history>
<datetime>2020-06-30T15:58:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1860</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T16:02:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1861</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T16:02:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1862</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T16:02:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1863</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 16:02:39.606'</string>
</history>
<history>
<datetime>2020-06-30T16:02:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1864</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T16:09:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1865</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T16:09:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1866</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T16:09:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1867</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 16:08:53.402'</string>
</history>
<history>
<datetime>2020-06-30T16:09:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1868</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T17:03:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1869</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T17:03:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1870</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T17:03:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1871</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 17:03:40.201'</string>
</history>
<history>
<datetime>2020-06-30T17:03:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1872</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T17:04:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1873</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T17:04:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1874</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T17:04:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1875</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 17:04:19.186'</string>
</history>
<history>
<datetime>2020-06-30T17:04:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1876</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T17:07:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1877</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T17:07:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1878</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T17:07:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1879</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 17:07:16.360'</string>
</history>
<history>
<datetime>2020-06-30T17:07:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1880</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T17:28:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1881</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T17:28:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1882</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T17:28:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1883</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 17:22:59.134'</string>
</history>
<history>
<datetime>2020-06-30T17:28:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1884</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-06-30T17:33:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1885</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-06-30T17:33:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1886</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-06-30T17:33:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1887</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '06-30-2020 17:33:09.038'</string>
</history>
<history>
<datetime>2020-06-30T17:33:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1888</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-01T12:56:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1889</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-01T12:56:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1890</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-01T12:56:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1891</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-01-2020 12:55:56.181'</string>
</history>
<history>
<datetime>2020-07-01T12:56:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1892</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-01T12:58:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1893</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-01T12:58:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1894</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-01T12:58:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1895</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-01-2020 12:58:15.995'</string>
</history>
<history>
<datetime>2020-07-01T12:58:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1896</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-01T13:16:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1897</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-01T13:16:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1898</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-01T13:16:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1899</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-01-2020 13:16:18.958'</string>
</history>
<history>
<datetime>2020-07-01T13:16:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1900</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-01T13:53:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1901</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-01T13:53:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1902</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-01T13:53:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1903</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-01-2020 13:53:00.031'</string>
</history>
<history>
<datetime>2020-07-01T13:53:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1904</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-02T15:45:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1905</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-02T15:45:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1906</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-02T15:45:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1907</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-02-2020 15:44:58.485'</string>
</history>
<history>
<datetime>2020-07-02T15:45:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1908</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T11:33:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1909</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T11:33:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1910</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T11:33:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1911</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 11:32:57.239'</string>
</history>
<history>
<datetime>2020-07-03T11:33:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1912</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T11:33:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1913</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T11:33:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1914</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T11:33:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1915</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 11:33:30.410'</string>
</history>
<history>
<datetime>2020-07-03T11:33:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1916</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T12:26:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1917</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T12:26:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1918</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T12:26:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1919</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 12:26:06.518'</string>
</history>
<history>
<datetime>2020-07-03T12:26:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1920</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T12:26:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1921</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T12:26:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1922</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T12:26:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1923</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 12:26:23.831'</string>
</history>
<history>
<datetime>2020-07-03T12:26:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1924</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T13:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1925</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T13:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1926</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T13:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1927</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 13:18:10.197'</string>
</history>
<history>
<datetime>2020-07-03T13:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1928</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T13:32:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1929</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T13:32:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1930</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T13:32:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1931</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 13:32:03.079'</string>
</history>
<history>
<datetime>2020-07-03T13:32:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1932</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T13:45:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1933</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T13:45:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1934</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T13:45:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1935</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 13:45:27.682'</string>
</history>
<history>
<datetime>2020-07-03T13:45:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1936</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T14:02:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1937</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T14:02:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1938</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T14:02:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1939</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 14:02:39.452'</string>
</history>
<history>
<datetime>2020-07-03T14:02:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1940</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T14:16:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1941</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T14:16:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1942</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T14:16:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1943</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 14:16:52.650'</string>
</history>
<history>
<datetime>2020-07-03T14:16:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1944</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T15:08:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1945</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T15:08:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1946</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T15:08:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1947</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 15:08:04.284'</string>
</history>
<history>
<datetime>2020-07-03T15:08:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1948</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T15:22:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1949</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T15:22:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1950</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T15:22:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1951</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 15:22:00.405'</string>
</history>
<history>
<datetime>2020-07-03T15:22:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1952</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T15:48:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1953</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T15:48:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1954</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T15:48:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1955</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 15:48:15.829'</string>
</history>
<history>
<datetime>2020-07-03T15:48:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1956</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T15:53:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1957</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T15:53:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1958</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T15:53:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1959</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 15:53:13.900'</string>
</history>
<history>
<datetime>2020-07-03T15:53:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1960</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T16:14:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1961</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T16:14:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1962</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T16:14:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1963</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 16:14:38.266'</string>
</history>
<history>
<datetime>2020-07-03T16:14:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1964</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-03T16:34:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1965</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-03T16:34:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1966</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-03T16:34:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1967</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-03-2020 16:34:01.453'</string>
</history>
<history>
<datetime>2020-07-03T16:34:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1968</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-06T18:30:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1969</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-06T18:30:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1970</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-06T18:30:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1971</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-06-2020 18:30:56.211'</string>
</history>
<history>
<datetime>2020-07-06T18:30:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1972</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-06T19:28:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1973</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-06T19:28:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1974</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-06T19:28:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1975</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-06-2020 19:28:34.778'</string>
</history>
<history>
<datetime>2020-07-06T19:28:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1976</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-06T19:45:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1977</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-06T19:45:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1978</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-06T19:45:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1979</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-06-2020 19:45:30.204'</string>
</history>
<history>
<datetime>2020-07-06T19:45:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1980</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-06T20:12:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1981</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-06T20:12:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1982</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-06T20:12:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1983</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-06-2020 20:12:03.523'</string>
</history>
<history>
<datetime>2020-07-06T20:12:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1984</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-06T21:18:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1985</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-06T21:18:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1986</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-06T21:18:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1987</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-06-2020 21:18:31.049'</string>
</history>
<history>
<datetime>2020-07-06T21:18:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1988</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-06T21:26:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1989</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-06T21:26:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1990</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-06T21:26:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1991</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-06-2020 21:26:11.384'</string>
</history>
<history>
<datetime>2020-07-06T21:26:14Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1992</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
<history>
<datetime>2020-07-06T21:30:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1993</order>
<string>mod program IMS_PM_StatementUtils remove property 'file date'</string>
</history>
<history>
<datetime>2020-07-06T21:30:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1994</order>
<string>mod program IMS_PM_StatementUtils java</string>
</history>
<history>
<datetime>2020-07-06T21:30:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1995</order>
<string>mod program IMS_PM_StatementUtils add property 'file date' value '07-06-2020 21:30:21.570'</string>
</history>
<history>
<datetime>2020-07-06T21:30:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>1996</order>
<string>mod program IMS_PM_StatementUtils code "import com.matrixone.apps.domain.DomainAccess; import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.DomainRelationship; import com.matrixone.apps.domain.util.*; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.*; import matrix.util.SelectList; import matrix.util.StringList;  import java.util.*; import static java.lang.String.format;  public class ${CLASSNAME} {  private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement"; private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem"; private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster"; private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass"; private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster"; private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState"; private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName"; private static final String ATTRIBUTE_IMS_CODE = "IMS_Code"; private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel"; private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason"; private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision"; private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem"; private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem"; private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";  public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception { MapList result; try { String where = "current == Approved"; SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static MapList getAllStatementMasters(Context context, String[] args) throws Exception { MapList result; try { String where = new String(); SelectList select = new SelectList(1); result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  /** * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement */ public static void createMasterObject(Context context, String[] args) throws Exception { try { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); HashMap requestMap = (HashMap) programMap.get("requestMap"); String objectId = (String) paramMap.get("objectId"); String parentId = (String) requestMap.get("parentOID");  DomainObject statementMaster = DomainObject.newInstance(context); DomainObject statement = DomainObject.newInstance(context, objectId); String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE); String type = statement.getTypeName(); HashMap attribute = new HashMap(); attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT)); if (type.equals(TYPE_IMS_PM_STATEMENT)) { statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-", POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName()); statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title); DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement); relation.setAttributeValues(context, attribute);</string>
</history>
</historyList>
</adminProperties>
<code><![CDATA[import com.matrixone.apps.domain.DomainAccess;
import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.DomainRelationship;
import com.matrixone.apps.domain.util.*;
import com.matrixone.apps.framework.ui.UIUtil;
import matrix.db.*;
import matrix.util.SelectList;
import matrix.util.StringList;

import java.util.*;
import static java.lang.String.format;

public class ${CLASSNAME} {

    private static final String TYPE_IMS_PM_STATEMENT = "IMS_PM_Statement";
    private static final String TYPE_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster";
    private static final String TYPE_IMS_PM_STATEMENT_ITEM = "IMS_PM_StatementItem";
    private static final String TYPE_IMS_PM_STATEMENT_ITEM_MASTER = "IMS_PM_StatementItemMaster";
    private static final String TYPE_IMS_ADM_GENERAL_CLASS = "IMS_Adm_GeneralClass";
    private static final String POLICY_IMS_PM_STATEMENT_MASTER = "IMS_PM_StatementMaster";
    private static final String ATTRIBUTE_IMS_PM_STATEMENT_STATE = "IMS_PM_StatementState";
    private static final String ATTRIBUTE_IMS_FIELD_NAME = "IMS_FieldName";
    private static final String ATTRIBUTE_IMS_CODE = "IMS_Code";
    private static final String ATTRIBUTE_IMS_DOCUMENT_LEVEL = "IMS_DocumentLevel";
    private static final String ATTRIBUTE_IMS_DEVELOPMENT_REASON = "IMS_DevelopmentReason";
    private static final String RELATIONSHIP_IMS_PM_REVISION = "IMS_PM_Revision";
    private static final String RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER = "IMS_PM_Master2ItemMaster";
    private static final String RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM = "IMS_PM_Statement2StatementItem";
    private static final String RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM = "IMS_PM_StatementItem2StatementItem";
    private static final String RELATIONSHIP_IMS_CLASSIFIED_ITEM = "IMS_ClassifiedItem";

    public static MapList getAllApprovedStatements(Context context, String[] args) throws Exception {
        MapList result;
        try {
            String where = "current == Approved";
            SelectList select = new SelectList(1);
            select.addElement(DomainConstants.SELECT_ID);
            result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT, null, where, select);
        } catch (Exception exp) {
            exp.printStackTrace();
            throw new Exception(exp.toString());
        }
        return result;
    }

    public static MapList getAllStatementMasters(Context context, String[] args) throws Exception {
        MapList result;
        try {
            String where = new String();
            SelectList select = new SelectList(1);
            select.addElement(DomainConstants.SELECT_ID);
            result = DomainObject.findObjects(context, TYPE_IMS_PM_STATEMENT_MASTER, null, where, select);
        } catch (Exception exp) {
            exp.printStackTrace();
            throw new Exception(exp.toString());
        }
        return result;
    }

    /**
     * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement
     */
    public static void createMasterObject(Context context, String[] args) throws Exception {
        try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            HashMap paramMap = (HashMap) programMap.get("paramMap");
            HashMap requestMap = (HashMap) programMap.get("requestMap");
            String objectId = (String) paramMap.get("objectId");
            String parentId = (String) requestMap.get("parentOID");

            DomainObject statementMaster = DomainObject.newInstance(context);
            DomainObject statement = DomainObject.newInstance(context, objectId);
            String title = statement.getAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE);
            String type = statement.getTypeName();
            HashMap attribute = new HashMap();
            attribute.put(ATTRIBUTE_IMS_PM_STATEMENT_STATE, statement.getInfo(context, DomainConstants.SELECT_CURRENT));
            if (type.equals(TYPE_IMS_PM_STATEMENT)) {
                statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_MASTER, statement.getName(), "-",
                        POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName());
                statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title);
                DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);
                relation.setAttributeValues(context, attribute);
            } else if (type.equals(TYPE_IMS_PM_STATEMENT_ITEM)) {
                statementMaster.createObject(context, TYPE_IMS_PM_STATEMENT_ITEM_MASTER, statement.getName(), "-",
                        POLICY_IMS_PM_STATEMENT_MASTER, context.getVault().getName());
                statementMaster.setAttributeValue(context, DomainConstants.ATTRIBUTE_TITLE, title);
                DomainRelationship relation = DomainRelationship.connect(context, statementMaster, RELATIONSHIP_IMS_PM_REVISION, statement);
                relation.setAttributeValues(context, attribute);
                DomainObject parent = DomainObject.newInstance(context, parentId);
                String parentType = parent.getInfo(context, DomainConstants.SELECT_TYPE);
                if (parentType.equals(TYPE_IMS_PM_STATEMENT_MASTER)) {
                    DomainRelationship.connect(context, parent, RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER, statementMaster);
                } else if (parentType.equals(TYPE_IMS_PM_STATEMENT)) {
                    StringBuilder selects = new StringBuilder();
                    selects.append("to[");
                    selects.append(RELATIONSHIP_IMS_PM_REVISION);
                    selects.append("].from.id");
                    String parentMasterId = parent.getInfo(context, selects.toString());
                    DomainObject parentMaster = DomainObject.newInstance(context, parentMasterId);
                    DomainRelationship.connect(context, parentMaster, RELATIONSHIP_IMS_PM_MASTER_2_ITEM_MASTER, statementMaster);
                }
            }
        } catch (Exception exp) {
            exp.printStackTrace();
            throw new Exception(exp.toString());
        }
    }

    public void updateRelation(Context context, String[] args) throws Exception {
        String objectId = args[0];
        String current = args[1];
        try {
            DomainObject statement = DomainObject.newInstance(context, objectId);
            StringList relSelects = new StringList();
            relSelects.add(DomainObject.SELECT_RELATIONSHIP_ID);
            Map<String, String> map = statement.getRelatedObject(context, RELATIONSHIP_IMS_PM_REVISION, false, null, relSelects);
            String relationId = (String) map.get(DomainConstants.SELECT_RELATIONSHIP_ID);
            if (relationId != null && relationId != "") {
                DomainRelationship.setAttributeValue(context, relationId, ATTRIBUTE_IMS_PM_STATEMENT_STATE, current);
            }
        } catch (Exception ex) {
            ContextUtil.abortTransaction(context);
            ex.printStackTrace();
        }
    }

    public static boolean checkEditAccessForStatement(Context context, String[] args) throws Exception {
        boolean result = true;
        HashMap inputMap = (HashMap) JPO.unpackArgs(args);
        String objectId = (String) inputMap.get("objectId");
        StringBuilder selects = new StringBuilder();
        selects.append("to[");
        selects.append(RELATIONSHIP_IMS_PM_REVISION);
        selects.append("].from.from[");
        selects.append(RELATIONSHIP_IMS_PM_REVISION);
        selects.append("].attribute[");
        selects.append(ATTRIBUTE_IMS_PM_STATEMENT_STATE);
        selects.append("]");
        DomainObject domainObject = DomainObject.newInstance(context, objectId);
        StringList attributeStateList = domainObject.getInfoList(context, selects.toString());
        if (attributeStateList.contains("Create"))
            result = false;
        return result;
    }

    /**
     * Returns Item list for the Statement.
     */
    public static MapList getStatementItemList(Context context, String[] args) throws Exception {
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        HashMap paramMap = (HashMap) programMap.get("paramMap");
        String objectId = (String) paramMap.get("objectId");
        DomainObject domObj = DomainObject.newInstance(context, objectId);

        StringList strSel = new StringList();
        strSel.add(DomainConstants.SELECT_TYPE);

        Map objectMap = domObj.getInfo(context, strSel);
        String objectType = null;
        MapList result = new MapList();
        if (objectMap != null)
            objectType = (String) objectMap.get(DomainConstants.SELECT_TYPE);
        StringList sSelects = new StringList();
        String menu = PropertyUtil.getSchemaProperty(context, "menu_type_IMS_PM_Statement");
        if (objectType != null && objectType.equals(TYPE_IMS_PM_STATEMENT)) {
            try {
                sSelects.add(DomainConstants.SELECT_ID);
                sSelects.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
                StringList selectRelInfo = new StringList();
                selectRelInfo.add(DomainObject.SELECT_RELATIONSHIP_ID);
                result = domObj.getRelatedObjects(context, RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM,
                        DomainObject.TYPE_PROJECT_VAULT, sSelects, selectRelInfo, false, true, (short) 1, null, null, 0);
            } catch (Exception e) {
                throw new Exception(e);
            }
        } else {
            DomainObject subFolder = DomainObject.newInstance(context, objectId);
            StringList selectRelInfo = new StringList();
            selectRelInfo.add(subFolder.SELECT_RELATIONSHIP_ID);
            StringList selectTypeInfo = new StringList();
            selectTypeInfo.add(DomainConstants.SELECT_ID);
            selectTypeInfo.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
            try {
                result = subFolder.getRelatedObjects(context, RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM,
                        DomainObject.TYPE_PROJECT_VAULT, selectTypeInfo, selectRelInfo, false, true, (short) 1, null, null, 0);
            } catch (Exception e) {
                throw new Exception(e);
            }
        }
        for (int i = 0; i < result.size(); i++) {
            Hashtable tempTable = (Hashtable) result.get(i);
            tempTable.put("treeMenu", menu);
        }
        return result;
    }

    public static MapList getRelatedStatementItems(Context context, String[] args) throws Exception {
        MapList relatedItems = new MapList();
        try {
            HashMap programMap = (HashMap) JPO.unpackArgs(args);
            String objectId = (String) programMap.get("objectId");

            if (objectId != null && !objectId.isEmpty()) {
                DomainObject object = DomainObject.newInstance(context, objectId);
                String type = object.getInfo(context, DomainConstants.SELECT_TYPE);
                String relationship = new String();
                if (type.equals(TYPE_IMS_PM_STATEMENT))
                    relationship = RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM;
                else if (type.equals(TYPE_IMS_PM_STATEMENT))
                    relationship = RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM;
                SelectList select = new SelectList(1);
                select.addElement("id");
                relatedItems = object.getRelatedObjects(context, relationship, TYPE_IMS_PM_STATEMENT_ITEM,
                        select, new StringList(), false, true, (short) 1, null, null, 0);
            }
        } catch (Exception exp) {
            exp.printStackTrace();
            throw new Exception(exp.toString());
        }
        return relatedItems;
    }

    public String getCloneDescription(Context context, String[] args) throws Exception {
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        HashMap requestMap = (HashMap) programMap.get("requestMap");
        String objectId = (String) requestMap.get("objectId");
        DomainObject object = DomainObject.newInstance(context, objectId);
        String desc = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION);
        return desc;
    }

    public String getCloneAttribute(Context context, String[] args) throws Exception {
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        HashMap requestMap = (HashMap) programMap.get("requestMap");
        HashMap fieldMap = (HashMap) programMap.get("fieldMap");
        HashMap<String, String> settings = (HashMap) fieldMap.get("settings");
        String attrName = settings.get("Attribute");
        String objectId = (String) requestMap.get("objectId");
        DomainObject object = DomainObject.newInstance(context, objectId);
        String attributeValue = object.getAttributeValue(context, attrName);
        return attributeValue;
    }


    public HashMap getCloneRangeAttribute(Context context, String[] args) throws Exception {
        HashMap<String, StringList> result = new HashMap<>();
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        HashMap fieldMap = (HashMap) programMap.get("fieldMap");
        HashMap<String, String> settings = (HashMap) fieldMap.get("settings");
        String attrName = settings.get("Attribute");

        StringList ranges = FrameworkUtil.getRanges(context, attrName);
        StringList translatedRanges = new StringList();
        if (ranges != null) {
            for (String range : ranges) {
                String rangeProperty = EnoviaResourceBundle.getProperty(context, "Framework",
                        "emxFramework.Range." + attrName + "." + range, context.getSession().getLanguage());
                translatedRanges.add(rangeProperty);
            }
        }
        result.put("field_choices", ranges);
        result.put("field_display_choices", translatedRanges);
        return result;
    }


    public void connectClassificationItem(Context context, String[] args) throws Exception {
        System.out.println("connectClassificationItem");
        Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args);
        Map<String, Object> paramMap = programMap.get("paramMap");
        String newValue = new String();
        String oldValue = new String();
        String oldRelationId = new String();
        Map fieldMap = programMap.get("fieldMap");
        String fieldName = fieldMap.get("name").toString();
        String objectId = (String) paramMap.get("objectId");
        if (paramMap.containsKey("New Value")) {
            newValue = (String) paramMap.get("New Value");
        }
        StringList objectSelect = new StringList();
        objectSelect.add(DomainConstants.SELECT_ID);
        StringList relationSelect = new StringList();
        relationSelect.add(DomainConstants.SELECT_RELATIONSHIP_ID);
        StringBuffer where = new StringBuffer();
        where.append("from[");
        where.append(RELATIONSHIP_IMS_CLASSIFIED_ITEM);
        where.append("].to.id == ");
        where.append(objectId);
        where.append(" && from[");
        where.append(RELATIONSHIP_IMS_CLASSIFIED_ITEM);
        where.append("].attribute[");
        where.append(ATTRIBUTE_IMS_FIELD_NAME);
        where.append("] == \"");
        where.append(fieldName);
        where.append("\"");
        DomainObject object = DomainObject.newInstance(context, objectId);
        MapList relatedClassificationItem = object.getRelatedObjects(context, RELATIONSHIP_IMS_CLASSIFIED_ITEM,
                TYPE_IMS_ADM_GENERAL_CLASS, objectSelect, relationSelect, true, false, (short) 1, where.toString(), null, 0);
        if (relatedClassificationItem.size() > 0) {
            Object temp = relatedClassificationItem.get(0);
            Map<String, String> oldClassificationItem = (Map) temp;
            oldValue = oldClassificationItem.get(DomainConstants.SELECT_ID);
            oldRelationId = oldClassificationItem.get(DomainConstants.SELECT_RELATIONSHIP_ID);
        }
        if (oldValue != newValue) {
            if (!UIUtil.isNullOrEmpty(oldValue)) {
                DomainRelationship oldRelation = DomainRelationship.newInstance(context, oldRelationId);
                oldRelation.remove(context);
            }
            if (!UIUtil.isNullOrEmpty(newValue)) {
                DomainObject classificationObject = DomainObject.newInstance(context, newValue);
                DomainRelationship relation = DomainRelationship.connect(context, classificationObject, RELATIONSHIP_IMS_CLASSIFIED_ITEM, object);
                relation.setAttributeValue(context, ATTRIBUTE_IMS_FIELD_NAME, fieldName);
            }
        }
    }

    public String getRelatedClassificationItem(Context context, String[] args) throws Exception {
        Map<String, Map<String, Object>> programMap = JPO.unpackArgs(args);
        Map<String, Object> paramMap = programMap.get("paramMap");
        Map fieldMap = programMap.get("fieldMap");
        String fieldName = fieldMap.get("name").toString();
        String objectId = (String) paramMap.get("objectId");
        DomainObject object = DomainObject.newInstance(context, objectId);
        StringList select = new StringList(DomainConstants.SELECT_RELATIONSHIP_ID);
        StringBuffer where = new StringBuffer();
        where.append("from[");
        where.append(RELATIONSHIP_IMS_CLASSIFIED_ITEM);
        where.append("].to.id == ");
        where.append(objectId);
        where.append(" && from[");
        where.append(RELATIONSHIP_IMS_CLASSIFIED_ITEM);
        where.append("].attribute[");
        where.append(ATTRIBUTE_IMS_FIELD_NAME);
        where.append("] == \"");
        where.append(fieldName);
        where.append("\"");
        //find the related classified item that is defined for the selected field
        MapList relatedClassificationItem = object.getRelatedObjects(context, RELATIONSHIP_IMS_CLASSIFIED_ITEM,
                TYPE_IMS_ADM_GENERAL_CLASS, new StringList(DomainConstants.SELECT_ATTRIBUTE_TITLE),
                select, true, false, (short) 1, where.toString(), null, 0);
        if (relatedClassificationItem.size() > 0) {
            Object temp = relatedClassificationItem.get(0);
            Map ClassificationItem = (Map) temp;
            String classTitle = (String) ClassificationItem.get(DomainConstants.SELECT_ATTRIBUTE_TITLE);
            return classTitle;
        }
        return new String();
    }

    public String getClonedStatement(Context context, String[] args) throws Exception {
        Map paramMap = (Map) JPO.unpackArgs(args);
        String statementId = (String) paramMap.get("statementId");
        String description = (String) paramMap.get("description");
        String title = (String) paramMap.get("title");
        String newStatementId = cloneStatement(context, statementId, description, title, null);
        return newStatementId;
    }

    private String cloneStatement(Context context, String statementId, String description, String title, String clonedChildId) throws Exception {
        DomainObject statement = DomainObject.newInstance(context, statementId);
        String masterId = statement.getInfo(context, "to[" + RELATIONSHIP_IMS_PM_REVISION + "].from.id");

        BusinessObject boStatement = statement.getLastRevision(context);
        boStatement.open(context);
        String revision = boStatement.getNextSequence(context);
        String vault = boStatement.getVault();

        BusinessObject master = new BusinessObject(masterId);
        BusinessObject boCloneObj = boStatement.revise(context, revision, vault);

        boCloneObj.open(context);
        String newStatementId = boCloneObj.getObjectId();

        if (UIUtil.isNotNullAndNotEmpty(description)) {
            boCloneObj.setDescription(context, description);
        }
        AttributeList templateAttrList = new AttributeList();
        if (UIUtil.isNotNullAndNotEmpty(title)) {
            AttributeType attrType = new AttributeType("Title");
            Attribute attr = new Attribute(attrType, title);
            templateAttrList.add(attr);
        }
        boCloneObj.setAttributeValues(context, templateAttrList);
        boCloneObj.update(context);
        boCloneObj.connect(context, new RelationshipType(RELATIONSHIP_IMS_PM_REVISION), false, master);
        RelationshipItr relationshipItr = new RelationshipItr(boStatement.getFromRelationship(context));

        while (relationshipItr.next()) {
            Relationship relationship = relationshipItr.obj();
            if (relationship.getTypeName().equals(RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM)) {
                BusinessObject boConnectedSI = relationship.getTo();
                boConnectedSI.open(context);
                if (UIUtil.isNullOrEmpty(clonedChildId) || !clonedChildId.equals(boConnectedSI.getObjectId(context))) {
                    boConnectedSI.connect(context, new RelationshipType(RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM), false, boCloneObj);
                }
                boConnectedSI.close(context);
            }
        }
        boStatement.close(context);
        try {
            DomainAccess.updateOwnershipOnClone(context, statementId, newStatementId);
        } catch (Exception e) {
            throw new Exception(e);
        }
        boCloneObj.close(context);
        return newStatementId;
    }

    public HashMap getClonedStatementItem(Context context, String[] args) throws Exception {
        HashMap returnMap = new HashMap();
        Map<String, String> paramMap = (Map) JPO.unpackArgs(args);
        String statementItemId = paramMap.get("statementItemId");
        String description = paramMap.get("description");
        String title = paramMap.get("title");
        String developmentReason = paramMap.get("developmentReason");
        String documentLevel = paramMap.get("documentLevel");
        String elementType = paramMap.get("elementType");
        String controlNumber = paramMap.get("controlNumber");
        String projectStage = paramMap.get("projectStage");

        DomainObject statementItem = DomainObject.newInstance(context, statementItemId);
        BusinessObject boCloneObj = cloneStatementItem(context, statementItemId, description, title, developmentReason, documentLevel, null, elementType, controlNumber, projectStage);
        StringBuilder result = new StringBuilder();
        result.append(getParentInStateCreate(context, statementItem, boCloneObj));
        if (UIUtil.isNullOrEmpty(result.toString())) {
            result.append(cloneParentInStateApproved(context, statementItem, boCloneObj));
        }
        String cloneObjectId = boCloneObj.getObjectId(context);

        returnMap.put("parentId", result.toString());
        returnMap.put("cloneId", cloneObjectId);
        return returnMap;
    }

    private BusinessObject cloneStatementItem(Context context, String statementItemId, String description, String title, String developmentReason, String documentLevel, String cloneChildId, String elementType, String controlNumber, String projectStage) throws Exception {
        DomainObject statementItem = DomainObject.newInstance(context, statementItemId);
        String masterId = statementItem.getInfo(context, "to[" + RELATIONSHIP_IMS_PM_REVISION + "].from.id");
        String code = statementItem.getAttributeValue(context, ATTRIBUTE_IMS_CODE);

        BusinessObject boStatementItem = statementItem.getLastRevision(context);
        boStatementItem.open(context);
        String revision = boStatementItem.getNextSequence(context);
        String vault = boStatementItem.getVault();

        BusinessObject master = new BusinessObject(masterId);
        BusinessObject boCloneObj = boStatementItem.revise(context, revision, vault);

        boCloneObj.open(context);
        String newStatementId = boCloneObj.getObjectId();
        if (UIUtil.isNotNullAndNotEmpty(description)) {
            boCloneObj.setDescription(context, description);
        }
        boCloneObj.setAttributeValue(context, ATTRIBUTE_IMS_CODE, code);
        AttributeList templateAttrList = new AttributeList();
        if (UIUtil.isNotNullAndNotEmpty(title)) {
            AttributeType attrType = new AttributeType("Title");
            Attribute attr = new Attribute(attrType, title);
            templateAttrList.add(attr);
        }
        if (UIUtil.isNotNullAndNotEmpty(documentLevel)) {
            AttributeType attrType = new AttributeType(ATTRIBUTE_IMS_DOCUMENT_LEVEL);
            Attribute attr = new Attribute(attrType, documentLevel);
            templateAttrList.add(attr);
        }
        if (developmentReason != null) {
            AttributeType attrType = new AttributeType(ATTRIBUTE_IMS_DEVELOPMENT_REASON);
            Attribute attr = new Attribute(attrType, developmentReason);
            templateAttrList.add(attr);
        }
        MapList classifiedItems = new MapList();
        if (elementType != null) {
            Map<String, String> classifiedItem = new HashMap<>();
            classifiedItem.put("fieldName", "Element Type");
            classifiedItem.put("newValue", elementType);
            classifiedItems.add(classifiedItem);
        }
        if (controlNumber != null) {
            Map<String, String> classifiedItem = new HashMap<>();
            classifiedItem.put("fieldName", "Control Number");
            classifiedItem.put("newValue", controlNumber);
            classifiedItems.add(classifiedItem);
        }
        if (UIUtil.isNotNullAndNotEmpty(projectStage)) {
            Map<String, String> classifiedItem = new HashMap<>();
            classifiedItem.put("fieldName", "Project Stage");
            classifiedItem.put("newValue", projectStage);
            classifiedItems.add(classifiedItem);
        }
        if (!classifiedItems.isEmpty()) {
            editClassificationItemsOnNewRevision(context, newStatementId, classifiedItems);
        }

        if (!templateAttrList.isEmpty())
            boCloneObj.setAttributeValues(context, templateAttrList);
        boCloneObj.update(context);
        boCloneObj.connect(context, new RelationshipType(RELATIONSHIP_IMS_PM_REVISION), false, master);
        RelationshipItr relationshipItr = new RelationshipItr(boStatementItem.getFromRelationship(context));

        while (relationshipItr.next()) {
            Relationship relationship = relationshipItr.obj();
            if (relationship.getTypeName().equals(RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM)) {
                BusinessObject boConnectedSI = relationship.getTo();
                boConnectedSI.open(context);
                if (UIUtil.isNullOrEmpty(cloneChildId) || !cloneChildId.equals(boConnectedSI.getObjectId(context))) {
                    boConnectedSI.connect(context, new RelationshipType(RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM), false, boCloneObj);
                }
                boConnectedSI.close(context);
            }
        }
        boStatementItem.close(context);
        try {
            DomainAccess.updateOwnershipOnClone(context, statementItemId, newStatementId);
        } catch (Exception e) {
            throw new Exception(e);
        }
        System.out.println("cloneStIt:res-"+boCloneObj);
        return boCloneObj;
    }

    private String getParentInStateCreate(Context context, DomainObject statementItem, BusinessObject boCloneObj) throws Exception {
        StringBuilder result = new StringBuilder();
        StringList sSelects = new StringList(2);
        sSelects.add(DomainConstants.SELECT_ID);
        sSelects.add(DomainConstants.SELECT_REVISION);
        sSelects.add(DomainConstants.SELECT_CURRENT);
        StringList selectRelInfo = new StringList();
        selectRelInfo.add(DomainObject.SELECT_RELATIONSHIP_ID);
        StringBuilder whereExpression = new StringBuilder();
        whereExpression.append(DomainConstants.SELECT_CURRENT);
        whereExpression.append(" == Create");
        MapList relatedStatementItems = statementItem.getRelatedObjects(context, RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM,
                TYPE_IMS_PM_STATEMENT_ITEM, sSelects, selectRelInfo, true, false, (short) 1, whereExpression.toString(), null, 0);
        if (!relatedStatementItems.isEmpty()) {
            Map relSI = (Map) relatedStatementItems.get(0);
            String parentId = (String) relSI.get(DomainConstants.SELECT_ID);
            if (!(boCloneObj == null)) {
                BusinessObject parent = new BusinessObject(parentId);
                parent.open(context);
                BusinessObject boStatementItem = new BusinessObject(statementItem.getId(context));
                parent.disconnect(context, new RelationshipType(RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM), true, boStatementItem);
                parent.connect(context, new RelationshipType(RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM), true, boCloneObj);
            }
            result.append(getParentInStateCreate(context, DomainObject.newInstance(context, parentId), null));
        } else {
            MapList relatedStatements = statementItem.getRelatedObjects(context, RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM,
                    TYPE_IMS_PM_STATEMENT, sSelects, selectRelInfo, true, false, (short) 1, whereExpression.toString(), null, 0);
            if (!relatedStatements.isEmpty()) {
                Map relSI = (Map) relatedStatements.get(0);
                String parentStatement = (String) relSI.get(DomainConstants.SELECT_ID);
                if (!(boCloneObj == null)) {
                    BusinessObject parent = new BusinessObject(parentStatement);
                    parent.open(context);
                    BusinessObject boStatementItem = new BusinessObject(statementItem.getId(context));
                    parent.disconnect(context, new RelationshipType(RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM), true, boStatementItem);
                    parent.connect(context, new RelationshipType(RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM), true, boCloneObj);
                }
                result.append(parentStatement);
            }
        }
        System.out.println("getParCreate:res-"+result);
        return result.toString();
    }

    private String cloneParentInStateApproved(Context context, DomainObject statementItem, BusinessObject boCloneObj) throws Exception {
        StringBuilder result = new StringBuilder();
        StringList sSelects = new StringList(2);
        sSelects.add(DomainConstants.SELECT_ID);
        sSelects.add(DomainConstants.SELECT_REVISION);
        sSelects.add(DomainConstants.SELECT_CURRENT);
        StringList selectRelInfo = new StringList();
        selectRelInfo.add(DomainObject.SELECT_RELATIONSHIP_ID);
        StringBuilder whereExpression = new StringBuilder();
        whereExpression.append(DomainConstants.SELECT_CURRENT);
        whereExpression.append(" == Approved");
        MapList relatedStatementItems = statementItem.getRelatedObjects(context, RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM,
                TYPE_IMS_PM_STATEMENT_ITEM, sSelects, selectRelInfo, true, false, (short) 1, whereExpression.toString(), null, 0);
        if (!relatedStatementItems.isEmpty()) {
            Map relSI = (Map) relatedStatementItems.get(0);
            String parentId = (String) relSI.get(DomainConstants.SELECT_ID);
            BusinessObject cloneParent = cloneStatementItem(context, parentId, null, null, null, null, statementItem.getId(context), null, null, null);
            cloneParent.connect(context, new RelationshipType(RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM), true, boCloneObj);
            result.append(cloneParentInStateApproved(context, DomainObject.newInstance(context, parentId), cloneParent));
        } else {
            result.append(getParentInStateCreate(context, statementItem, boCloneObj));
            if (UIUtil.isNullOrEmpty(result.toString())) {
                MapList relatedStatements = statementItem.getRelatedObjects(context, RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM,
                        TYPE_IMS_PM_STATEMENT, sSelects, selectRelInfo, true, false, (short) 1, whereExpression.toString(), null, 0);
                if (!relatedStatements.isEmpty()) {
                    Map relSI = (Map) relatedStatements.get(0);
                    String parentStatement = (String) relSI.get(DomainConstants.SELECT_ID);
                    String clonedParentStatementId = cloneStatement(context, parentStatement, null, null, statementItem.getId(context));
                    BusinessObject clonedParent = new BusinessObject(clonedParentStatementId);
                    clonedParent.connect(context, new RelationshipType(RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM), true, boCloneObj);
                    result.append(clonedParentStatementId);
                }
            }
        }
        System.out.println("getParAppr:res-"+result);
        return result.toString();
    }

    public void editClassificationItemsOnNewRevision(Context context, String newStatementItemId, MapList classifiedItems) throws Exception {
        DomainObject statementItem = DomainObject.newInstance(context, newStatementItemId);
        for (Object classifiedItem : classifiedItems) {
            Map classification = (Map) classifiedItem;
            String fieldName = (String) classification.get("fieldName");
            String newValue = (String) classification.get("newValue");
            String oldValue = new String();
            String oldRelationId = new String();
            String oldValueTitle = new String();

            StringList objectSelect = new StringList();
            objectSelect.add(DomainConstants.SELECT_ID);
            objectSelect.add(DomainConstants.SELECT_ATTRIBUTE_TITLE);
            StringList relationSelect = new StringList();
            relationSelect.add(DomainConstants.SELECT_RELATIONSHIP_ID);
            StringBuffer where = new StringBuffer();
            where.append("from[");
            where.append(RELATIONSHIP_IMS_CLASSIFIED_ITEM);
            where.append("].to.id == ");
            where.append(newStatementItemId);
            where.append(" && from[");
            where.append(RELATIONSHIP_IMS_CLASSIFIED_ITEM);
            where.append("].attribute[");
            where.append(ATTRIBUTE_IMS_FIELD_NAME);
            where.append("] == \"");
            where.append(fieldName);
            where.append("\"");
            MapList relatedClassificationItem = statementItem.getRelatedObjects(context, RELATIONSHIP_IMS_CLASSIFIED_ITEM,
                    TYPE_IMS_ADM_GENERAL_CLASS, objectSelect, relationSelect, true, false, (short) 1, where.toString(), null, 0);
            if (relatedClassificationItem.size() > 0) {
                Object temp = relatedClassificationItem.get(0);
                Map<String, String> oldClassificationItem = (Map) temp;
                oldValue = oldClassificationItem.get(DomainConstants.SELECT_ID);
                oldRelationId = oldClassificationItem.get(DomainConstants.SELECT_RELATIONSHIP_ID);
                oldValueTitle = oldClassificationItem.get(DomainConstants.SELECT_ATTRIBUTE_TITLE);
            }
            if (!oldValue.equals(newValue) && !oldValueTitle.equals(newValue)) {
                if (!UIUtil.isNullOrEmpty(oldValue)) {
                    DomainRelationship oldRelation = DomainRelationship.newInstance(context, oldRelationId);
                    oldRelation.remove(context);
                }
                if (!UIUtil.isNullOrEmpty(newValue)) {
                    DomainObject classificationObject = DomainObject.newInstance(context, newValue);
                    DomainRelationship relation = DomainRelationship.connect(context, classificationObject, RELATIONSHIP_IMS_CLASSIFIED_ITEM, statementItem);
                    relation.setAttributeValue(context, ATTRIBUTE_IMS_FIELD_NAME, fieldName);
                }
            }
        }
    }

    public Vector getRelatedClassificationItems(Context context, String[] args) throws Exception {
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        MapList objectList = (MapList) programMap.get("objectList");
        Vector result = new Vector(objectList.size());
        Map<String, String> columnMap = (Map) programMap.get("columnMap");
        String fieldName = columnMap.get("name");
        for (Object temp : objectList) {
            Map<String, String> object = (Map) temp;
            String id = object.get(DomainConstants.SELECT_ID);
            DomainObject statementItem = DomainObject.newInstance(context, id);
            String classifiedItem = new String();
            StringBuffer where = new StringBuffer();
            where.append("from[");
            where.append(RELATIONSHIP_IMS_CLASSIFIED_ITEM);
            where.append("].to.id == ");
            where.append(id);
            where.append(" && from[");
            where.append(RELATIONSHIP_IMS_CLASSIFIED_ITEM);
            where.append("].attribute[");
            where.append(ATTRIBUTE_IMS_FIELD_NAME);
            where.append("] == \"");
            where.append(fieldName);
            where.append("\"");
            MapList relatedClassificationItem = statementItem.getRelatedObjects(context, RELATIONSHIP_IMS_CLASSIFIED_ITEM,
                    TYPE_IMS_ADM_GENERAL_CLASS, new StringList(DomainConstants.SELECT_ATTRIBUTE_TITLE), new StringList(), true,
                    false, (short) 1, where.toString(), null, 0);
            if (relatedClassificationItem.size() > 0) {
                Map<String, String> classifiedItemMap = (Map) relatedClassificationItem.get(0);
                classifiedItem = classifiedItemMap.get(DomainConstants.SELECT_ATTRIBUTE_TITLE);
            }
            result.add(classifiedItem);
        }
        return result;
    }

    public HashMap deleteStatementItemFromStatement(Context context, String[] args) throws Exception {
        try {
            HashMap<String, String> argumentsMap = (HashMap) JPO.unpackArgs(args);
            String objectId = argumentsMap.get("objectId");
            DomainObject object = DomainObject.newInstance(context, objectId);
            HashMap returnMap = new HashMap();
            StringBuilder result = new StringBuilder();
            result.append(getParentInStateCreate(context, object, null));
            if (UIUtil.isNullOrEmpty(result.toString())) {
                BusinessObject boCloneObj = cloneStatementItem(context, objectId, null,
                        null, null,
                        null, null, null, null, null);
                result.append(cloneParentInStateApproved(context, object, boCloneObj));
                DomainObject clone = DomainObject.newInstance(context, boCloneObj.getObjectId());
                deleteStatementItem(context, clone);
                MapList relatedItems = clone.getRelatedObjects(context, RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM,
                        TYPE_IMS_PM_STATEMENT_ITEM, new StringList(DomainConstants.SELECT_ID), new StringList(),
                        false, true, (short) 0, null, null, 0);
                for (Object temp : relatedItems) {
                    Map<String, String> childItemInfo = (Map) temp;
                    DomainObject childItem = DomainObject.newInstance(context, childItemInfo.get(DomainConstants.SELECT_ID));
                    deleteStatementItem(context, childItem);
                }
            } else {
                MapList relatedItems = object.getRelatedObjects(context, RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM,
                        TYPE_IMS_PM_STATEMENT_ITEM, new StringList(DomainConstants.SELECT_ID), new StringList(),
                        false, true, (short) 0, null, null, 0);
                for (Object temp : relatedItems) {
                    Map<String, String> childItemInfo = (Map) temp;
                    DomainObject childItem = DomainObject.newInstance(context, childItemInfo.get(DomainConstants.SELECT_ID));
                    deleteStatementItem(context, childItem);
                }
                deleteStatementItem(context, object);
            }
            returnMap.put("parentId", result.toString());
            return returnMap;
        } catch (Exception exp) {
            exp.printStackTrace();
            throw new Exception(exp.toString());
        }
    }

    /*
     * Used in trigger IMS_PM_PolicyIMSPMStatementPromoteAction. Promote all connected Items
     * args[0] - objectId
     */
    public void promoteConnectedStatementItems(Context context, String[] args) throws Exception {
        System.out.println("promoteConnectedStatementItems STARTED for ");
        
        String objectId = args[0];
        String current = args[1];
        System.out.println("objectId = "+objectId);
        System.out.println("current = "+current);
        String action = "promote";
        try {
            if (current.equals("Approved"))
                action = "Approved";
            System.out.println("if :: ACTION: = "+action);
            List<String> relObjectsList = new ArrayList<String>();
            
            DomainObject statement = DomainObject.newInstance(context, objectId);
            relObjectsList.addAll(findRelatedStatementItems(context, statement));
            System.out.println("relObjectsList = "+relObjectsList);
            promoteRelatedStatementItems(context, relObjectsList, action);
            ContextUtil.startTransaction(context, true);
            MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3", objectId, action, action);
            ContextUtil.commitTransaction(context);
            System.out.println("promoteConnectedStatementItems");
            obsoleteOldRevision(context, statement, TYPE_IMS_PM_STATEMENT);
            System.out.println("end promoteConnectedStatementItems");
			
			            obsoleteDeletedItems(context, statement);
						
						
        } catch (Exception ex) {
            ContextUtil.abortTransaction(context);
            ex.printStackTrace();
        }
    }

    private List<String> findRelatedStatementItems(Context context, DomainObject classificationObject) throws Exception {
        List<String> relObjectsList = new ArrayList<String>();
        StringList QAGbusSelects = new StringList();  // Object
        QAGbusSelects.add(DomainConstants.SELECT_ID);
        QAGbusSelects.add(DomainConstants.SELECT_CURRENT);
        StringList QAGrelSelects = new StringList();  // Rel
        StringBuilder whereExpression = new StringBuilder();
        whereExpression.append("current == Create");
        MapList mlResult = classificationObject.getRelatedObjects(context,
                RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM + "," + RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM,
                TYPE_IMS_PM_STATEMENT_ITEM,
                QAGbusSelects,
                QAGrelSelects,
                /*from*/ false,
                /*to*/ true,
                (short) 0,
                whereExpression.toString(),
                null,
                0);
        for (Object relatedSubclass : mlResult) {
            Map relSubclass = (Map) relatedSubclass;
            String relSubclassId = (String) relSubclass.get(DomainConstants.SELECT_ID);
            relObjectsList.add(relSubclassId);
        }
        return relObjectsList;
    }

    private void promoteRelatedStatementItems(Context context, List<String> relObjectsList, String action) throws Exception {
        try {
            System.out.println("promoteRelatedStatementItems STARTED");
            ContextUtil.startTransaction(context, true);
            MqlUtil.mqlCommand(context, "trigger off", true, false);
            for (String relatedSubclass : relObjectsList) {
                DomainObject relObject = DomainObject.newInstance(context, relatedSubclass);
                System.out.println("relObject = "+relObject);
                obsoleteOldRevision(context, relObject, TYPE_IMS_PM_STATEMENT_ITEM);
                String[] args = new String[2];
                relObject.promote(context);
                args[0] = relatedSubclass;
                args[1] = relObject.getInfo(context, DomainConstants.SELECT_CURRENT);
                updateRelation(context, args);
                MqlUtil.mqlCommand(context, "modify bus $1 add history $2 comment $3", relatedSubclass, action, action);
            }
            MqlUtil.mqlCommand(context, "trigger on", true, false);
            ContextUtil.commitTransaction(context);
        } catch (Exception e) {
            ContextUtil.abortTransaction(context);
            e.printStackTrace();
        }
    }

    private void obsoleteOldRevision(Context context, DomainObject relObject, String type) throws Exception {
        System.out.println("obsoleteOldRevision STARTED");
        String masterObjectId = relObject.getInfo(context, "to[" + RELATIONSHIP_IMS_PM_REVISION + "].from.id");
        DomainObject masterObject = DomainObject.newInstance(context, masterObjectId);
        StringList QAGbusSelects = new StringList();  // Object
        QAGbusSelects.add(DomainConstants.SELECT_ID);
        QAGbusSelects.add(DomainConstants.SELECT_CURRENT);
        StringList QAGrelSelects = new StringList();  // Rel
        StringBuilder whereExpression = new StringBuilder();
        whereExpression.append("current == Approved && id != ");
        whereExpression.append(relObject.getId(context));
        MapList approvedObjects = masterObject.getRelatedObjects(context,
                RELATIONSHIP_IMS_PM_REVISION,
                type,
                QAGbusSelects,
                QAGrelSelects,
                /*from*/ false,
                /*to*/ true,
                (short) 0,
                whereExpression.toString(),
                null,
                0);
        System.out.println("approvedObjects="+approvedObjects);
        if (!approvedObjects.isEmpty()) {
            Map approvedObject = (Map) approvedObjects.get(0);
            System.out.println("approvedObject="+approvedObject);
            String approvedObjectId = (String) approvedObject.get(DomainConstants.SELECT_ID);
            DomainObject approvedObj = DomainObject.newInstance(context, approvedObjectId);
            System.out.println("=approvedObj-"+approvedObj);
            approvedObj.promote(context);
        }
    }

    public Vector getTitleLink(Context context, String[] args) throws Exception {
        try {
            Map programMap = JPO.unpackArgs(args);
            MapList objectList = (MapList) programMap.get("objectList");
            Vector columnValues = new Vector(objectList.size());
            for (Object listPart : objectList) {
                StringBuilder objectId = new StringBuilder();
                Map objectMap = (Map) listPart;
                String type = (String) objectMap.get("type");
                String id = (String) objectMap.get("id");
                DomainObject object = DomainObject.newInstance(context, id);
                String title = object.getInfo(context, DomainConstants.SELECT_ATTRIBUTE_TITLE);
                if (type.equals(TYPE_IMS_PM_STATEMENT_MASTER)) {
                    StringList objectSelect = new StringList();
                    objectSelect.add(DomainConstants.SELECT_ID);
                    StringList relationSelect = new StringList();
                    StringBuffer where = new StringBuffer();
                    where.append("revision == last");
                    MapList statements = object.getRelatedObjects(context,
                            RELATIONSHIP_IMS_PM_REVISION,
                            TYPE_IMS_PM_STATEMENT,
                            objectSelect,
                            relationSelect,
                            false,
                            true,
                            (short) 0,
                            where.toString(),
                            null,
                            0);
                    if (statements.size() > 0) {
                        Object statement = statements.get(0);
                        Map<String, String> relStatement = (Map) statement;
                        objectId.append(relStatement.get(DomainConstants.SELECT_ID));
                    }
                } else {
                    objectId.append(id);
                }
                StringBuffer sb = new StringBuffer(256);
                sb.append("<a title=\"");
                sb.append(title);
                sb.append("\" href=\"JavaScript:emxTableColumnLinkClick('../common/emxTree.jsp?suiteKey=ApparelAccelerator&amp;emxSuiteDirectory=fao");
                sb.append("&amp;objectId=" + objectId.toString() + "', '', '', 'false', 'content', '')\" class=\"object\">");
                sb.append(title);
                sb.append("</a>");
                columnValues.add(sb.toString());
            }
            return columnValues;
        } catch (Exception e) {
            e.printStackTrace();
            throw new FrameworkException(e);
        }
    }

    /**
     * Used in command IMS_PM_DeleteStatementItem
     */
    public boolean checkAccessToDeleteStatementItem(Context context, String[] args) throws Exception {
        boolean showButton = false;
        HashMap inputMap = (HashMap) JPO.unpackArgs(args);
        String objectId = (String) inputMap.get("objectId");
        DomainObject statementItem = DomainObject.newInstance(context, objectId);
        boolean lastRevision = statementItem.isLastRevision(context);
        String current = statementItem.getInfo(context, DomainConstants.SELECT_CURRENT);
        if (current.equals("Create") || (current.equals("Approved") && lastRevision)) {
            showButton = true;
        } else if (current.equals("Approved")) {
            StringList select = new SelectList();
            select.add(DomainConstants.SELECT_CURRENT);
            BusinessObject lastRev = statementItem.getLastRevision(context);
            DomainObject lastRevObject = DomainObject.newInstance(context, lastRev.getObjectId());
            MapList relatedParents = lastRevObject.getRelatedObjects(context, RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM +
                            "," + RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM,
                    TYPE_IMS_PM_STATEMENT_ITEM + "," + TYPE_IMS_PM_STATEMENT, select, new SelectList(),
                    true, false, (short) 0, new String(), null, 0);
            for (Object temp : relatedParents) {
                Map<String, String> parentItem = (Map) temp;
                if (parentItem.get(DomainConstants.SELECT_CURRENT).equals("Create")) {
                    return false;
                }
            }
            showButton = true;
        }
        return showButton;
    }

    /**
     * PostprocessJPO - connects object IMS_PM_StatementItem to clone from Approved parent
     * used in command IMS_PM_CreateNewStatementItemInApprovedParent
     */
    public void createStatementItemInApprovedParent(Context context, String[] args) throws Exception {
        createMasterObject(context, args);
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        HashMap paramMap = (HashMap) programMap.get("paramMap");
        HashMap requestMap = (HashMap) programMap.get("requestMap");
        String objectId = (String) paramMap.get("objectId");
        String parentId = (String) requestMap.get("parentOID");
        DomainObject parent = DomainObject.newInstance(context, parentId);
        BusinessObject lastRev = parent.getLastRevision(context);
        BusinessObject object = new BusinessObject(objectId);
        if (parent.getInfo(context, DomainConstants.SELECT_TYPE).equals(TYPE_IMS_PM_STATEMENT_ITEM)) {
            lastRev.connect(context, new RelationshipType(RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM), true, object);
        } else if (parent.getInfo(context, DomainConstants.SELECT_TYPE).equals(TYPE_IMS_PM_STATEMENT)) {
            lastRev.connect(context, new RelationshipType(RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM), true, object);
        }
    }

    /**
     * Used to create object IMS_PM_StatementMaster which contains all revisions for one Statement
     */
    public String[] cloneParentTree(Context context, String[] args) throws Exception {
        StringBuilder result = new StringBuilder();
        HashMap inputMap = (HashMap) JPO.unpackArgs(args);
        String parentId = (String) inputMap.get("parentId");
        String cloneParentId = "";
        String[] parentsArray = new String[1];
        DomainObject parent = DomainObject.newInstance(context, parentId);
        if (parent.getInfo(context, DomainConstants.SELECT_TYPE).equals(TYPE_IMS_PM_STATEMENT_ITEM)) {
            BusinessObject cloneParentObj = cloneStatementItem(context, parentId, null, null, null, null, null, null, null, null);
            DomainObject oldParent = DomainObject.newInstance(context, parentId);
            result.append(getParentInStateCreate(context, oldParent, cloneParentObj));
            cloneParentId = cloneParentObj.getObjectId(context);
            if (UIUtil.isNullOrEmpty(result.toString())) {
                result.append(cloneParentInStateApproved(context, oldParent, cloneParentObj));
            }
            StringList objectSelect = new StringList();
            objectSelect.add(DomainConstants.SELECT_ID);
            StringList relationSelect = new StringList();
            StringBuffer where = new StringBuffer();
            where.append("current == Create");
            DomainObject cloneParent = DomainObject.newInstance(context, cloneParentId);
            MapList parents = cloneParent.getRelatedObjects(context,
                    RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM+","+RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM,
                    TYPE_IMS_PM_STATEMENT_ITEM+","+TYPE_IMS_PM_STATEMENT,
                    objectSelect,
                    relationSelect,
                    true,
                    false,
                    (short) 0,
                    where.toString(),
                    null,
                    0);
            parentsArray = new String[parents.size()+1];
            parentsArray[parents.size()] = cloneParentId;
            int i = parents.size()-1;
            if (parents.size() > 0) {
                for (Object tempParent : parents) {
                    Map mapParent = (Map) tempParent;
                    parentsArray[i] = (String) mapParent.get(DomainConstants.SELECT_ID);
                    i--;
                }
            }
        } else if (parent.getInfo(context, DomainConstants.SELECT_TYPE).equals(TYPE_IMS_PM_STATEMENT)) {
            String clonedParentStatementId = cloneStatement(context, parentId, null, null, null);
            parentsArray[0] = clonedParentStatementId;
        }
        return parentsArray;
    }

    public void deleteStatementItem(Context context, DomainObject item) throws Exception {
        StringList select = new StringList();
        select.add(DomainConstants.SELECT_ID);
        Map<String, String> masterInfo = item.getRelatedObject(context, RELATIONSHIP_IMS_PM_REVISION, false, select, new SelectList());
        item.remove(context);
        if (masterInfo.size() > 0) {
            DomainObject masterObject = DomainObject.newInstance(context, masterInfo.get(DomainConstants.SELECT_ID));

            Map<String, String> relatedItems = masterObject.getRelatedObject(context, RELATIONSHIP_IMS_PM_REVISION, true, select, new SelectList());
            if (relatedItems == null || relatedItems.size() == 0) {
                masterObject.remove(context);
            }
        }
    }
	
	  /*
     * Method is called after the Statement promoted to state "Approved"
     * and promotes to state "Obsolete" all items that exist in the old Statement and deleted from new Statement.
     */
     private void obsoleteDeletedItems(Context context, DomainObject statement) throws Exception {
        String masterObjectId = statement.getInfo(context, "to[" + RELATIONSHIP_IMS_PM_REVISION + "].from.id");
        DomainObject masterObject = DomainObject.newInstance(context, masterObjectId);
        MapList obsoletedStatementRelatedItems = getItemsForStatementRevision(context, masterObject, "Obsolete");
        MapList approvedStatementRelatedItems = getItemsForStatementRevision(context, masterObject, "Approved");
        
        System.out.println(">> >> >> obsoletedStatementRelatedItems"+obsoletedStatementRelatedItems);
        System.out.println(">> >> >> approvedStatementRelatedItems"+approvedStatementRelatedItems);
        List<String> approvedStatementItems = new ArrayList<>();
        for (Object temp : approvedStatementRelatedItems) {
            Map<String, String> approvedItem = (Map) temp;
            String id = approvedItem.get(DomainConstants.SELECT_ID);
            approvedStatementItems.add(id);
        }
        System.out.println("!!! approvedStatementItems list = "+approvedStatementItems);
        for (Object temp : obsoletedStatementRelatedItems) {
            Map<String, String> relatedItem = (Map) temp;
            String id = relatedItem.get(DomainConstants.SELECT_ID);
            System.out.println("for + "+approvedStatementItems);
            if (!approvedStatementItems.contains(id)) {
                DomainObject item = DomainObject.newInstance(context, relatedItem.get(DomainConstants.SELECT_ID));
                if (item.getInfo(context, DomainConstants.SELECT_CURRENT).equals("Approved")) {
                    System.out.println("PROMOTE");
                    item.promote(context);
                }
            }
        }
    }

    private MapList getItemsForStatementRevision(Context context, DomainObject masterObject, String state) throws Exception {
        MapList relatedItems = new MapList();
        StringList select = new StringList();
        select.add(DomainConstants.SELECT_ID);
        MapList statements = masterObject.getRelatedObjects(context, RELATIONSHIP_IMS_PM_REVISION,
                TYPE_IMS_PM_STATEMENT, select, new SelectList(), false, true, (short) 0,
                "current == " + state, null, 0);
        if (statements != null && statements.size() > 0) {
            Map<String, String> statementRevisionInfo = (Map) statements.get(0);
            String statementRevisionId = statementRevisionInfo.get(DomainConstants.SELECT_ID);
            DomainObject statementRevision = DomainObject.newInstance(context, statementRevisionId);
            relatedItems = statementRevision.getRelatedObjects(context,
                    RELATIONSHIP_IMS_PM_STATEMENT_ITEM_2_STATEMENT_ITEM + "," + RELATIONSHIP_IMS_PM_STATEMENT_2_STATEMENT_ITEM,
                    TYPE_IMS_PM_STATEMENT_ITEM, select, new SelectList(), false, true, (short) 0, null,
                    null, 0);
        }
        return relatedItems;
    }
}
]]></code>
<javaProgram/>
</program>
</ematrix>
