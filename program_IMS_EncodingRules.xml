<?xml version="1.0" encoding="UTF-8" ?>
<!-- Copyright (c) 2010-2014 Dassault Systemes, 1993 - 2014 -->
<!DOCTYPE ematrix SYSTEM "ematrixml.dtd">
<ematrix>
<creationProperties>
<release>3DEXPERIENCE R2019x HotFix 7(29.0.0.0)</release>
<datetime>2020-07-13T05:28:51Z</datetime>
<event>export</event>
<dtdInfo>&ematrixProductDtd;</dtdInfo>
</creationProperties>


<program id="0.1.25078.41876">
<adminProperties>
<name>IMS_EncodingRules</name>
<creationInfo>
<datetime>2020-05-06T10:21:41Z</datetime>
</creationInfo>
<modificationInfo>
<datetime>2020-06-04T10:06:38Z</datetime>
</modificationInfo>
<propertyList count="1">
<property>
<name>file date</name>
<value>05-29-2020 16:05:09.857</value>
<flags>0</flags>
</property>
</propertyList>
<historyList count="556">
<history>
<datetime>2020-05-06T10:21:41Z</datetime>
<agent>admin_platform</agent>
<event>create</event>
<order>1</order>
<string>add program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T10:21:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>2</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T10:21:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>3</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 10:16:49.443'</string>
</history>
<history>
<datetime>2020-05-06T10:21:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>4</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); return ruleHandler.encodeDocument(context, document); }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T10:32:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>5</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T10:32:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>6</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T10:32:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>7</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 10:16:49.443'</string>
</history>
<history>
<datetime>2020-05-06T10:32:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>8</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); return ruleHandler.encodeDocument(context, document); }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T10:49:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>9</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T10:49:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>10</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T10:49:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>11</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 10:16:49.443'</string>
</history>
<history>
<datetime>2020-05-06T10:49:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>12</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); return ruleHandler.encodeDocument(context, document); }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T11:15:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>13</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:15:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>14</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T11:15:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>15</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 10:16:49.443'</string>
</history>
<history>
<datetime>2020-05-06T11:15:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>16</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); return ruleHandler.encodeDocument(context, document); }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T11:16:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>17</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:16:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>18</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T11:16:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>19</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 10:16:49.443'</string>
</history>
<history>
<datetime>2020-05-06T11:16:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>20</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); return ruleHandler.encodeDocument(context, document); }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T11:20:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>21</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:20:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>22</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T11:20:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>23</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 10:16:49.443'</string>
</history>
<history>
<datetime>2020-05-06T11:20:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>24</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); return ruleHandler.encodeDocument(context, document); }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T11:35:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>25</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:35:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>26</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T11:35:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>27</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 11:34:56.274'</string>
</history>
<history>
<datetime>2020-05-06T11:35:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>28</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) { RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); DomainObject document = new DomainObject(); return ruleHandler.encodeDocument(context, document); }  public static String testMethod(Context context, String[] args){ return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T11:44:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>29</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:44:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>30</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T11:44:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>31</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 11:44:27.252'</string>
</history>
<history>
<datetime>2020-05-06T11:44:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>32</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) throws ClassNotFoundException { RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); Class classe = ${CLASSNAME}.class.getClassLoader().loadClass("${CLASSNAME}"); classe.getClass(); return null; }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T11:45:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>33</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:45:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>34</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T11:45:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>35</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 11:45:39.851'</string>
</history>
<history>
<datetime>2020-05-06T11:45:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>36</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) { RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); DomainObject document = new DomainObject(); return ruleHandler.encodeDocument(context, document); }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T11:49:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>37</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:49:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>38</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T11:49:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>39</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 11:49:04.085'</string>
</history>
<history>
<datetime>2020-05-06T11:49:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>40</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) throws ClassNotFoundException { //RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); Class classe = ${CLASSNAME}.class.getClassLoader().loadClass("${CLASSNAME}"); System.out.println(classe.getName()) return null; }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T11:49:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>41</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:49:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>42</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T11:49:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>43</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 11:49:47.866'</string>
</history>
<history>
<datetime>2020-05-06T11:49:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>44</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) throws ClassNotFoundException { //RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); Class classe = ${CLASSNAME}.class.getClassLoader().loadClass(${CLASSNAME}.getName()); System.out.println(classe.getName()) return null; }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T11:50:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>45</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:50:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>46</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T11:50:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>47</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 11:50:29.741'</string>
</history>
<history>
<datetime>2020-05-06T11:50:46Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>48</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) throws ClassNotFoundException { //RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); Class classe = ${CLASSNAME}.class.getClassLoader().loadClass(${CLASSNAME}.getName()); System.out.println(classe.getName()); return null; }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T11:53:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>49</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T11:53:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>50</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T11:53:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>51</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 11:53:22.758'</string>
</history>
<history>
<datetime>2020-05-06T11:53:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>52</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import matrix.db.Context; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) throws ClassNotFoundException { //RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); Class classe = ${CLASSNAME}.class.getClassLoader().loadClass(${CLASSNAME}.class.getName()); System.out.println(classe.getName()); return null; }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T12:05:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>53</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T12:05:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>54</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T12:05:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>55</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 12:04:52.991'</string>
</history>
<history>
<datetime>2020-05-06T12:05:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>56</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.util.Vector;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); Vector vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, Vector.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class)); for(Object item: vector.toArray()) { System.out.println(item); } return null; }  public static String testMethod() { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T12:05:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>57</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T12:05:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>58</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T12:05:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>59</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 12:05:50.181'</string>
</history>
<history>
<datetime>2020-05-06T12:05:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>60</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.util.Vector;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); Vector vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, Vector.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class)); for(Object item: vector.toArray()) { System.out.println(item); } return null; }  public static String testMethod(Context context, String[] args) { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T12:06:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>61</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T12:06:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>62</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T12:06:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>63</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 12:06:37.510'</string>
</history>
<history>
<datetime>2020-05-06T12:06:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>64</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.util.Vector;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(item);  return null; }  public static String testMethod(Context context, String[] args) { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T12:07:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>65</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T12:07:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>66</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T12:07:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>67</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 12:07:16.107'</string>
</history>
<history>
<datetime>2020-05-06T12:07:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>68</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.util.Vector;  public class ${CLASSNAME} { public static String encodeDocument(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(${CLASSNAME}.class.getClassLoader()); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector);  return null; }  public static String testMethod(Context context, String[] args) { return "testString"; } } '</string>
</history>
<history>
<datetime>2020-05-06T13:17:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>69</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T13:17:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>70</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T13:17:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>71</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 13:17:33.443'</string>
</history>
<history>
<datetime>2020-05-06T13:17:43Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>72</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.37733.51931"; DomainObject domainObject = DomainObject.newInstance(context, objectId); for(File file: domainObject.getFiles(context)) { System.out.println(file.getName()); } //ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector);  return null; }  public static String testMethod(Context context, String[] args) { return "testString"; } } ']]></string>
</history>
<history>
<datetime>2020-05-06T13:18:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>73</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T13:18:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>74</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T13:18:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>75</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 13:18:35.915'</string>
</history>
<history>
<datetime>2020-05-06T13:18:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>76</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.37733.51931"; DomainObject domainObject = DomainObject.newInstance(context, objectId); for(File file: domainObject.getFiles(context)) { System.out.println(file.getName()); } //ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector);  return null; }  public static String testMethod(Context context, String[] args) { return "testString"; } } ']]></string>
</history>
<history>
<datetime>2020-05-06T14:11:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>77</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T14:11:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>78</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T14:11:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>79</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 14:11:04.049'</string>
</history>
<history>
<datetime>2020-05-06T14:11:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>80</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.37733.51931"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); //ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector);  return null; }  public static String testMethod(Context context, String[] args) { return "testString"; } } ']]></string>
</history>
<history>
<datetime>2020-05-06T14:12:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>81</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T14:12:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>82</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T14:12:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>83</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 14:12:06.284'</string>
</history>
<history>
<datetime>2020-05-06T14:12:13Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>84</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.37733.51931"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); //ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector);  return null; }  public static String testMethod(Context context, String[] args) { return "testString"; } } ']]></string>
</history>
<history>
<datetime>2020-05-06T14:44:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>85</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T14:44:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>86</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T14:44:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>87</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 14:44:25.122'</string>
</history>
<history>
<datetime>2020-05-06T14:44:41Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>88</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.37733.51931"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector);  return null; }  public static String testMethod(Context context, String[] args) { return "testString"; } } ']]></string>
</history>
<history>
<datetime>2020-05-06T18:34:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>89</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T18:34:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>90</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T18:34:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>91</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 18:32:45.600'</string>
</history>
<history>
<datetime>2020-05-06T18:34:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>92</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.37733.51931"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector);  return null; }  public static boolean testValid(Context context, String[] args) { return true; } } ']]></string>
</history>
<history>
<datetime>2020-05-06T18:35:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>93</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T18:35:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>94</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T18:35:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>95</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 18:35:50.591'</string>
</history>
<history>
<datetime>2020-05-06T18:35:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>96</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.10397.38485"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { //RuleHandler ruleHandler = new DefaultRuleHandler(); //DomainObject document = new DomainObject(); //MqlUtil.mqlCommand(context, "exec prog $1", prog); Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector);  return null; }  public static boolean testValid(Context context, String[] args) { return true; } } ']]></string>
</history>
<history>
<datetime>2020-05-06T19:12:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>97</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T19:12:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>98</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T19:12:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>99</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 19:12:29.482'</string>
</history>
<history>
<datetime>2020-05-06T19:12:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>100</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.10397.38485"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); String code = ruleHandler.encodeDocument(context, document); System.out.println(code); /*Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector); */ return null; }  public static boolean testValid(Context context, String[] args) { return true; } } ']]></string>
</history>
<history>
<datetime>2020-05-06T19:32:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>101</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T19:32:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>102</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T19:32:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>103</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 19:32:17.916'</string>
</history>
<history>
<datetime>2020-05-06T19:32:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>104</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.10397.38485"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); String code = ruleHandler.getCodeForDocument(context, document); System.out.println(code); /*Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector); */ return null; }  public static boolean testValid(Context context, String[] args) { return true; } } ']]></string>
</history>
<history>
<datetime>2020-05-06T19:34:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>105</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T19:34:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>106</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T19:34:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>107</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 19:34:12.247'</string>
</history>
<history>
<datetime>2020-05-06T19:34:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>108</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.10397.38485"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); String code = ruleHandler.getCodeForDocument(context, document); System.out.println(code); /*Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector); */ return null; }  public static boolean testValid(Context context, String[] args) { return true; } public void reloadCache(Context context, String[] args) throws FrameworkException { StringList selectStmts = new StringList(1); selectStmts.addElement("id"); MapList objectsMapList = DomainObject.findObjects( context, "IMS_Adm_Rule", "*", "*", selectStmts ); for (Object objectMap: objectsMapList) { System.out.println(((Map)objectMap).get("id")); } } } ']]></string>
</history>
<history>
<datetime>2020-05-06T19:35:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>109</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T19:35:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>110</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T19:35:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>111</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 19:34:53.653'</string>
</history>
<history>
<datetime>2020-05-06T19:35:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>112</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.10397.38485"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); String code = ruleHandler.getCodeForDocument(context, document); System.out.println(code); /*Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector); */ return null; }  public static boolean testValid(Context context, String[] args) { return true; } public void reloadCache(Context context, String[] args) throws FrameworkException { StringList selectStmts = new StringList(1); selectStmts.addElement("id"); MapList objectsMapList = DomainObject.findObjects( context, "IMS_Adm_Rule", "*", null, selectStmts ); for (Object objectMap: objectsMapList) { System.out.println(((Map)objectMap).get("id")); } } } ']]></string>
</history>
<history>
<datetime>2020-05-06T19:46:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>113</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T19:46:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>114</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T19:46:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>115</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 19:43:48.692'</string>
</history>
<history>
<datetime>2020-05-06T19:46:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>116</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.10397.38485"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); String code = ruleHandler.getCodeForDocument(context, document); System.out.println(code); /*Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector); */ return null; }  public static boolean testValid(Context context, String[] args) { return true; } } ']]></string>
</history>
<history>
<datetime>2020-05-06T20:53:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>117</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-06T20:53:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>118</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-06T20:53:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>119</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-06-2020 20:53:21.136'</string>
</history>
<history>
<datetime>2020-05-06T20:53:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>120</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.10397.38485"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); String code = rule.getCode(context, document); System.out.println(code); /*Map<String, String> paramMap = new HashMap<>(); paramMap.put("objectId", "8559.27862.37733.51931"); String vector = JPO.invoke(context, "IMS_EncodingRules", null, "testMethod", null, String.class); //vecTemp  = (Vector) (JPO.invoke(context,"emxProgramCentralUtil",null,"getPersonFullName",JPO.packArgs(paramMap),Vector.class));  System.out.println(vector); */ return null; }  public static boolean testValid(Context context, String[] args) { return true; } public static String getSimpleText(Context context, String[] args) { return "program"; } } ']]></string>
</history>
<history>
<datetime>2020-05-07T12:35:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>121</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-07T12:35:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>122</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-07T12:35:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>123</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-07-2020 12:35:41.599'</string>
</history>
<history>
<datetime>2020-05-07T12:35:59Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>124</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); String objectId = "8559.27862.10397.38485"; DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) { return true; } public static String getSimpleText(Context context, String[] args) { return "program"; } } '</string>
</history>
<history>
<datetime>2020-05-07T14:38:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>125</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-07T14:38:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>126</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-07T14:38:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>127</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-07-2020 14:38:33.927'</string>
</history>
<history>
<datetime>2020-05-07T14:38:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>128</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws MatrixException { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); //String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); //System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) { return true; } public static String getSimpleText(Context context, String[] args) { return "program"; } } '</string>
</history>
<history>
<datetime>2020-05-07T14:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>129</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-07T14:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>130</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-07T14:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>131</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-07-2020 14:39:53.632'</string>
</history>
<history>
<datetime>2020-05-07T14:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>132</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); //String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); //System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) { return true; } public static String getSimpleText(Context context, String[] args) { return "program"; } } '</string>
</history>
<history>
<datetime>2020-05-07T14:48:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>133</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-07T14:48:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>134</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-07T14:48:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>135</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-07-2020 14:48:37.833'</string>
</history>
<history>
<datetime>2020-05-07T14:48:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>136</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) { return true; } public static String getSimpleText(Context context, String[] args) { return "program"; } } '</string>
</history>
<history>
<datetime>2020-05-07T19:21:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>137</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-07T19:21:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>138</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-07T19:21:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>139</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-07-2020 19:20:55.621'</string>
</history>
<history>
<datetime>2020-05-07T19:21:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>140</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) { return true; } public static String getSimpleText(Context context, String[] args) { return "program"; FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule") } public static void autoName(Context context, String[] args) { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  } '</string>
</history>
<history>
<datetime>2020-05-07T19:23:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>141</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-07T19:23:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>142</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-07T19:23:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>143</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-07-2020 19:22:54.594'</string>
</history>
<history>
<datetime>2020-05-07T19:23:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>144</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws MatrixException { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) { return true; } public static String getSimpleText(Context context, String[] args) { return "program"; } public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  } '</string>
</history>
<history>
<datetime>2020-05-07T19:24:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>145</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-07T19:24:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>146</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-07T19:24:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>147</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-07-2020 19:23:56.499'</string>
</history>
<history>
<datetime>2020-05-07T19:24:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>148</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) { return true; } public static String getSimpleText(Context context, String[] args) { return "program"; } public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  } '</string>
</history>
<history>
<datetime>2020-05-07T21:58:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>149</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-07T21:58:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>150</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-07T21:58:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>151</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-07-2020 21:58:30.069'</string>
</history>
<history>
<datetime>2020-05-07T21:58:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>152</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) { return true; } public static String getSimpleText(Context context, String[] args) { return "program"; } public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } '</string>
</history>
<history>
<datetime>2020-05-07T22:00:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>153</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-07T22:00:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>154</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-07T22:00:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>155</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-07-2020 22:00:06.713'</string>
</history>
<history>
<datetime>2020-05-07T22:00:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>156</order>
<string>mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = new DomainObject(); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) { return true; } public static String getSimpleText(Context context, String[] args) { return "program"; } public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } '</string>
</history>
<history>
<datetime>2020-05-08T09:40:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>157</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-08T09:40:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>158</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-08T09:40:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>159</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-08-2020 09:40:00.054'</string>
</history>
<history>
<datetime>2020-05-08T09:40:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>160</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) { return true; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-08T09:52:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>161</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-08T09:52:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>162</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-08T09:52:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>163</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-08-2020 09:52:07.782'</string>
</history>
<history>
<datetime>2020-05-08T09:52:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>164</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); if (revision.equals("0") && current.equals("IN_WORK")) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-08T09:54:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>165</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-08T09:54:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>166</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-08T09:54:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>167</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-08-2020 09:53:42.022'</string>
</history>
<history>
<datetime>2020-05-08T09:54:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>168</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("revision " + revision + "; current = " + current); if (revision.equals("0") && current.equals("IN_WORK")) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-08T09:55:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>169</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-08T09:55:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>170</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-08T09:55:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>171</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-08-2020 09:55:38.124'</string>
</history>
<history>
<datetime>2020-05-08T09:55:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>172</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("revision " + revision + "; current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-08T10:07:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>173</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-08T10:07:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>174</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-08T10:07:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>175</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-08-2020 10:07:34.013'</string>
</history>
<history>
<datetime>2020-05-08T10:07:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>176</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\nNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-08T10:09:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>177</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-08T10:09:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>178</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-08T10:09:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>179</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-08-2020 10:08:49.276'</string>
</history>
<history>
<datetime>2020-05-08T10:09:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>180</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-12T10:55:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>181</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T10:55:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>182</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T10:55:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>183</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 10:55:34.566'</string>
</history>
<history>
<datetime>2020-05-12T10:55:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>184</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static String encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); Map<String, String> paramMap = JPO.unpackArgs(args); System.out.println("map = "+paramMap); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return null; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(]]></string>
</history>
<history>
<datetime>2020-05-12T12:08:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>185</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T12:08:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>186</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T12:08:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>187</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 12:08:48.272'</string>
</history>
<history>
<datetime>2020-05-12T12:08:52Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>188</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); Map<String, String> paramMap = JPO.unpackArgs(args); System.out.println("map = "+paramMap); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Ex]]></string>
</history>
<history>
<datetime>2020-05-12T12:46:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>189</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T12:46:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>190</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T12:46:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>191</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 12:46:09.452'</string>
</history>
<history>
<datetime>2020-05-12T12:46:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>192</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); Map<String, String> paramMap = JPO.unpackArgs(args); System.out.println("map = "+paramMap); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); thr]]></string>
</history>
<history>
<datetime>2020-05-12T13:03:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>193</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T13:03:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>194</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T13:03:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>195</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 13:03:23.863'</string>
</history>
<history>
<datetime>2020-05-12T13:03:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>196</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { System.out.println("encodeDocument Started"); RuleHandler ruleHandler = new DefaultRuleHandler(); Map<String, String> paramMap = JPO.unpackArgs(args); System.out.println("map = "+paramMap); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }ca]]></string>
</history>
<history>
<datetime>2020-05-12T14:13:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>197</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T14:13:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>198</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T14:13:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>199</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 14:13:09.039'</string>
</history>
<history>
<datetime>2020-05-12T14:13:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>200</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { System.out.println("encodeDocument Started"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-12T14:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>201</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T14:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>202</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T14:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>203</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 14:17:56.995'</string>
</history>
<history>
<datetime>2020-05-12T14:18:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>204</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { System.out.println("encodeDocument Started"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); System.out.println("rule = "+rule); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codePart = "+codePart); System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.pri]]></string>
</history>
<history>
<datetime>2020-05-12T14:24:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>205</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T14:24:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>206</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T14:24:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>207</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 14:24:01.228'</string>
</history>
<history>
<datetime>2020-05-12T14:24:06Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>208</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { System.out.println("encodeDocument Started with "+ args[0]); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); System.out.println("rule = "+rule); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codePart = "+codePart); System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exceptio]]></string>
</history>
<history>
<datetime>2020-05-12T14:31:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>209</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T14:31:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>210</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T14:31:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>211</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 14:31:09.395'</string>
</history>
<history>
<datetime>2020-05-12T14:31:15Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>212</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { System.out.println("encodeDocument Started with "+ args[0]); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); System.out.println("rule = "+rule.toString()); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codePart = "+codePart); System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); r]]></string>
</history>
<history>
<datetime>2020-05-12T14:46:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>213</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T14:46:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>214</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T14:46:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>215</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 14:46:33.738'</string>
</history>
<history>
<datetime>2020-05-12T14:46:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>216</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { System.out.println("encodeDocument Started with "+ args[0]); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME) + " type = "+document.getInfo(context, DomainConstants.SELECT_TYPE)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); System.out.println("rule = "+rule.toString()); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codePart = "+codePart); System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); System.out.println(code); return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); Selec]]></string>
</history>
<history>
<datetime>2020-05-12T15:02:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>217</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T15:02:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>218</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T15:02:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>219</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 15:02:36.731'</string>
</history>
<history>
<datetime>2020-05-12T15:02:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>220</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { System.out.println("encodeDocument Started with "+ args[0]); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME) + " type = "+document.getInfo(context, DomainConstants.SELECT_TYPE)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); System.out.println("rule = "+rule.toString()); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codePart = "+codePart); System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); String attribute = rule.getEncodeAttributeName(); System.out.println("["attribute + "] = " +code); return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { ]]></string>
</history>
<history>
<datetime>2020-05-12T15:06:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>221</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T15:06:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>222</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T15:06:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>223</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 15:06:42.603'</string>
</history>
<history>
<datetime>2020-05-12T15:06:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>224</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { System.out.println("encodeDocument Started with "+ args[0]); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME) + " type = "+document.getInfo(context, DomainConstants.SELECT_TYPE)); EncodingRule rule = ruleHandler.getRuleForDocument(context, document); System.out.println("rule = "+rule.toString()); for(CodePart codePart: rule.getCodeParts()) { if(codePart instanceof NumericGenerator) { System.out.println("codePart = "+codePart); System.out.println("codepart id" + ((NumericGenerator) codePart).getId()); } } System.out.println(rule.getCodeParts()); String code = rule.getCode(context, document); String attribute = rule.getEncodeAttributeName(); System.out.println("[" + attribute + "] = " +code); return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception]]></string>
</history>
<history>
<datetime>2020-05-12T15:17:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>225</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T15:17:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>226</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T15:17:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>227</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 15:17:02.251'</string>
</history>
<history>
<datetime>2020-05-12T15:17:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>228</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.HashMap; import java.util.Map; import java.util.Vector;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { System.out.println("encodeDocument Started with "+ args[0]); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Â Â Â Â Collection<EncodingRule>Â rulesÂ = ruleHandler.getRulesForDocument(context,Â document); Â Â Â Â for(EncodingRule rule:Â rules) { Â Â Â Â Â Â Â Â document.setAttributeValue(context,Â rule.getEncodeAttributeName(),Â rule.getCode(context,Â document)); Â Â Â Â } return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-12T15:30:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>229</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T15:30:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>230</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T15:30:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>231</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 15:29:58.385'</string>
</history>
<history>
<datetime>2020-05-12T15:30:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>232</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { System.out.println("encodeDocument Started with "+ args[0]); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Â Â Â Â Collection<EncodingRule>Â rulesÂ = ruleHandler.getRulesForDocument(context,Â document); Â Â Â Â for(EncodingRule rule:Â rules) { Â Â Â Â Â Â Â Â document.setAttributeValue(context,Â rule.getEncodeAttributeName(),Â rule.getCode(context,Â document)); Â Â Â Â } return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-12T15:33:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>233</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T15:33:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>234</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T15:33:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>235</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 15:33:09.578'</string>
</history>
<history>
<datetime>2020-05-12T15:33:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>236</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-12T15:41:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>237</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T15:41:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>238</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T15:41:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>239</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 15:40:58.528'</string>
</history>
<history>
<datetime>2020-05-12T15:41:17Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>240</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { document.setAttributeValue(context, "attribute_" + rule.getEncodeAttributeName(), rule.getCode(context, document)); } return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-12T15:44:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>241</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T15:44:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>242</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T15:44:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>243</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 15:44:32.533'</string>
</history>
<history>
<datetime>2020-05-12T15:44:47Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>244</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { System.out.println("for rule = "+rule); System.out.println(rule.getEncodeAttributeName()); document.setAttributeValue(context, "attribute_" + rule.getEncodeAttributeName(), rule.getCode(context, document)); } return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-12T15:59:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>245</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T15:59:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>246</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T15:59:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>247</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 15:59:30.085'</string>
</history>
<history>
<datetime>2020-05-12T15:59:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>248</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { System.out.println("for rule = "+rule); System.out.println(rule.getEncodeAttributeName()); document.setAttributeValue(context,  rule.getEncodeAttributeName(), rule.getCode(context, document)); } return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-12T16:07:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>249</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T16:07:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>250</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T16:07:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>251</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 16:06:47.894'</string>
</history>
<history>
<datetime>2020-05-12T16:07:20Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>252</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { System.out.println("for rule = "+rule); System.out.println(rule.getEncodeAttributeName()); System.out.println(rule.getCode(context, document)); document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return resul]]></string>
</history>
<history>
<datetime>2020-05-12T16:09:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>253</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T16:09:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>254</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T16:09:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>255</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 16:09:04.590'</string>
</history>
<history>
<datetime>2020-05-12T16:09:10Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>256</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static int encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { System.out.println("for rule = "+rule); System.out.println(rule.getEncodeAttributeName()); System.out.println(rule.getCode(context, document)); System.out.println("for end"); document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } return 0; }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(]]></string>
</history>
<history>
<datetime>2020-05-12T16:12:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>257</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T16:12:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>258</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T16:12:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>259</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 16:12:15.781'</string>
</history>
<history>
<datetime>2020-05-12T16:12:21Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>260</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { System.out.println("for rule = "+rule); System.out.println(rule.getEncodeAttributeName()); System.out.println(rule.getCode(context, document)); System.out.println("for end"); document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toStr]]></string>
</history>
<history>
<datetime>2020-05-12T16:15:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>261</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T16:15:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>262</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T16:15:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>263</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 16:12:15.781'</string>
</history>
<history>
<datetime>2020-05-12T16:15:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>264</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { System.out.println("for rule = "+rule); System.out.println(rule.getEncodeAttributeName()); System.out.println(rule.getCode(context, document)); System.out.println("for end"); document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toStr]]></string>
</history>
<history>
<datetime>2020-05-12T17:47:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>265</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T17:47:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>266</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T17:47:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>267</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 17:47:29.307'</string>
</history>
<history>
<datetime>2020-05-12T17:47:49Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>268</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator; import org.apache.log4j.Logger;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;   public class ${CLASSNAME} { private static final Logger log = Logger.getLogger("IsaevaLogger");  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws Exception { MqlUtil.mqlCommand(context, "trigger off", true, false); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { System.out.println("for rule = "+rule); System.out.println(rule.getEncodeAttributeName()); System.out.println(rule.getCode(context, document)); System.out.println("for end"); document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } MqlUtil.mqlCommand(context, "trigger on", true, false); }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (revision.contains("0") && current.contains("IN_WORK")) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", n]]></string>
</history>
<history>
<datetime>2020-05-12T18:13:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>269</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T18:13:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>270</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T18:13:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>271</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 18:12:44.707'</string>
</history>
<history>
<datetime>2020-05-12T18:13:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>272</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, "8559.27862.796.54083"); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); System.out.println("objectType " + objectType); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (objectType.contains(type)) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-12T18:19:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>273</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-12T18:19:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>274</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-12T18:19:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>275</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-12-2020 18:18:54.992'</string>
</history>
<history>
<datetime>2020-05-12T18:19:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>276</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws Exception { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for(EncodingRule rule: rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String revision = object.getInfo(context, DomainConstants.SELECT_REVISION); String current = object.getInfo(context, DomainConstants.SELECT_CURRENT); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); System.out.println("objectType " + objectType); System.out.println("Criteria:\n\tNeeded revision = 0, current " + revision + "\n\tNeeded state = IN_WORK, current = " + current); if (objectType.contains(type)) result = true; System.out.println("result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println("Program Generator:\n\tAdd to code value of Description; Description = " + value); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args)throws Exception { MapList result = new MapList(); try{ String sbWhere = new String(); SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, sbWhere.toString(), ruleSelect); }catch(Exception exp){ exp.printStackTrace(); throw new Exception(exp.toString()); } return result; } } ']]></string>
</history>
<history>
<datetime>2020-05-19T09:15:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>277</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-19T09:15:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>278</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-19T09:15:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>279</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-19-2020 09:15:38.778'</string>
</history>
<history>
<datetime>2020-05-19T09:15:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>280</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (MatrixException ex) { System.out.println("!!!: " + ex.getMessage()); ex.printStackTrace(); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String attributeName = paramMap.get("attributeName"); DomainObject object = DomainObject.newInstance(context, id); String attributeValue = object.getAttributeValue(context, attributeName); return attribu]]></string>
</history>
<history>
<datetime>2020-05-19T09:26:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>281</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-19T09:26:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>282</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-19T09:26:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>283</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-19-2020 09:26:04.084'</string>
</history>
<history>
<datetime>2020-05-19T09:26:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>284</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.MqlUtil; import matrix.db.Context; import matrix.db.File; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.CodePart; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.encoding.models.NumericGenerator;  import java.io.BufferedInputStream; import java.io.FileInputStream; import java.io.InputStream; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (MatrixException ex) { System.out.println("!!!: " + ex.getMessage()); throw new MatrixException(ex); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String attributeName = paramMap.get("attributeName"); DomainObject object = DomainObject.newInstance(context, id); String attributeValue = object.getAttributeValue(context, attributeName); retur]]></string>
</history>
<history>
<datetime>2020-05-20T06:16:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>285</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T06:16:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>286</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T06:16:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>287</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 06:15:30.498'</string>
</history>
<history>
<datetime>2020-05-20T06:16:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>288</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); String objectOriginated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); System.out.println("objectOriginated " + objectOriginated); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); StringBuilder result = new StringBuilder(); String id = paramMap.get("id"); String attributeName = paramMap.get("attributeName"); try { DomainObject object = DomainObject.newInstance(context, id); result.append(object.get]]></string>
</history>
<history>
<datetime>2020-05-20T06:53:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>289</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T06:53:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>290</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T06:53:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>291</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 06:53:07.278'</string>
</history>
<history>
<datetime>2020-05-20T06:53:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>292</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE);  SimpleDateFormat sdfOutF = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss"); String objectOriginated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); Date dd = sdfOutF.parse(objectOriginated);  System.out.println("objectOriginated " + objectOriginated + "; dd = " + dd); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public ]]></string>
</history>
<history>
<datetime>2020-05-20T06:54:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>293</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T06:54:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>294</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T06:54:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>295</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 06:54:35.046'</string>
</history>
<history>
<datetime>2020-05-20T06:54:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>296</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.eMatrixDateFormat; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE);  SimpleDateFormat sdfOutF = new SimpleDateFormat(eMatrixDateFormat.getEMatrixDateFormat()); String objectOriginated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); Date dd = sdfOutF.parse(objectOriginated);  System.out.println("objectOriginated " + objectOriginated + "; dd = " + dd); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUt]]></string>
</history>
<history>
<datetime>2020-05-20T06:58:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>297</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T06:58:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>298</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T06:58:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>299</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 06:58:01.952'</string>
</history>
<history>
<datetime>2020-05-20T06:58:28Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>300</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE);  SimpleDateFormat sdfOutF = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); String objectOriginated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); Date dd = sdfOutF.parse(objectOriginated);  System.out.println("objectOriginated " + objectOriginated + "; dd = " + dd); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  publi]]></string>
</history>
<history>
<datetime>2020-05-20T07:56:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>301</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T07:56:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>302</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T07:56:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>303</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 07:56:30.758'</string>
</history>
<history>
<datetime>2020-05-20T07:56:42Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>304</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE);   Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); String objectOriginated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); cal.setTime(sdf.parse(objectOriginated));  System.out.println("objectOriginated " + objectOriginated + "; cal = " + cal); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberG]]></string>
</history>
<history>
<datetime>2020-05-20T08:03:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>305</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T08:03:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>306</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T08:03:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>307</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 08:03:14.596'</string>
</history>
<history>
<datetime>2020-05-20T08:03:32Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>308</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE);   Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); String objectOriginated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); cal.setTime(sdf.parse(objectOriginated)); System.out.println("objectOriginated " + objectOriginated + "; cal = " + cal);  int day = cal.get(Calendar.DAY_OF_MONTH); int month = cal.get(Calendar.MONTH); int year = cal.get(Calendar.YEAR); System.out.println("day " + day + "; month = " + month + "; year = " + year); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to cod]]></string>
</history>
<history>
<datetime>2020-05-20T09:08:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>309</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T09:08:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>310</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T09:08:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>311</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 09:08:08.134'</string>
</history>
<history>
<datetime>2020-05-20T09:08:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>312</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE);   Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); String objectOriginated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); cal.setTime(sdf.parse(objectOriginated)); System.out.println("objectOriginated " + objectOriginated + "; cal = " + cal);  int day = cal.get(Calendar.DATE); int month = cal.get(Calendar.MONTH); int year = cal.get(Calendar.YEAR);  String.format("%02d", day);  System.out.println("day " + day + "; month = " + month + "; year = " + year); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Ge]]></string>
</history>
<history>
<datetime>2020-05-20T09:22:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>313</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T09:22:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>314</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T09:22:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>315</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 09:21:58.662'</string>
</history>
<history>
<datetime>2020-05-20T09:22:12Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>316</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE);   Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); String objectOriginated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); cal.setTime(sdf.parse(objectOriginated)); System.out.println("objectOriginated " + objectOriginated + "; cal = " + cal);  String day = String.format("%02d", cal.get(Calendar.DATE)); String month = String.format("%02d", cal.get(Calendar.MONTH)); String year = String.format("%02d", cal.get(Calendar.YEAR));  System.out.println("day " + day + "; month = " + month + "; year = " + year); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConst]]></string>
</history>
<history>
<datetime>2020-05-20T09:40:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>317</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T09:40:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>318</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T09:40:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>319</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 09:28:39.491'</string>
</history>
<history>
<datetime>2020-05-20T09:40:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>320</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE);   Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); String objectOriginated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); cal.setTime(sdf.parse(objectOriginated)); System.out.println("objectOriginated " + objectOriginated + "; cal = " + cal);  String day = String.format("%02d", cal.get(Calendar.DATE)); String month = String.format("%02d", (cal.get(Calendar.MONTH) + 1)); String year = String.format("%02d", cal.get(Calendar.YEAR));  System.out.println("day " + day + "; month = " + month + "; year = " + year); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, Domai]]></string>
</history>
<history>
<datetime>2020-05-20T10:22:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>321</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T10:22:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>322</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T10:22:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>323</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 10:22:07.195'</string>
</history>
<history>
<datetime>2020-05-20T10:22:19Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>324</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); String originated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); String format = "yy"; Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yy hh:mm:ss a"); cal.setTime(sdf.parse(originated)); if (format.equalsIgnoreCase("dd")) { System.out.println("dd = " + String.format("%02d", cal.get(Calendar.DATE))); } else if (format.equalsIgnoreCase("mm")) { System.out.println("mm = " + String.format("%02d", (cal.get(Calendar.MONTH) + 1))); } else if (format.equalsIgnoreCase("yy")) { System.out.println("yy = " + String.format("%02d", cal.get(Calendar.YEAR))); } else if (format.equalsIgnoreCase("yyyy")) { System.out.println("yyyy = " +String.format("%04", cal.get(Calendar.YEAR))); } if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs]]></string>
</history>
<history>
<datetime>2020-05-20T10:38:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>325</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T10:38:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>326</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T10:38:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>327</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 10:37:52.032'</string>
</history>
<history>
<datetime>2020-05-20T10:38:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>328</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.sun.xml.internal.ws.api.model.wsdl.WSDLPortType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.DateFormat; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); String originated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); String format = "yy"; Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yy hh:mm:ss a"); cal.setTime(sdf.parse(originated)); if (format.equalsIgnoreCase("dd")) { System.out.println("dd = " + String.format("%02d", cal.get(Calendar.DATE))); } else if (format.equalsIgnoreCase("mm")) { System.out.println("mm = " + String.format("%02d", (cal.get(Calendar.MONTH) + 1))); } else if (format.equalsIgnoreCase("yy")) { System.out.println("yy = " + String.format("%02d", cal.get(Calendar.YEAR))); } else if (format.equalsIgnoreCase("yyyy")) { System.out.println("yyyy = " +String.format("%04", cal.get(Calendar.YEAR))); } if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context]]></string>
</history>
<history>
<datetime>2020-05-20T10:39:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>329</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T10:39:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>330</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T10:39:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>331</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 10:39:15.843'</string>
</history>
<history>
<datetime>2020-05-20T10:39:30Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>332</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.sun.xml.internal.ws.api.model.wsdl.WSDLPortType; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.DateFormat; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); String originated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); String format = "yy"; Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yy hh:mm:ss a"); cal.setTime(sdf.parse(originated)); if (format.equalsIgnoreCase("dd")) { System.out.println("dd = " + String.format("%02d", cal.get(Calendar.DATE))); } else if (format.equalsIgnoreCase("mm")) { System.out.println("mm = " + String.format("%02d", (cal.get(Calendar.MONTH) + 1))); } else if (format.equalsIgnoreCase("yy")) { SimpleDateFormat df = new SimpleDateFormat("yy"); // Just the year, with 2 digits String formattedDate = df.format(cal.getTime()); System.out.println("formattedDate " + formattedDate); } else if (format.equalsIgnoreCase("yyyy")) { System.out.println("yyyy = " +String.format("%04", cal.get(Calendar.YEAR))); } if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exce]]></string>
</history>
<history>
<datetime>2020-05-20T10:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>333</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T10:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>334</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T10:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>335</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 10:39:43.241'</string>
</history>
<history>
<datetime>2020-05-20T10:39:58Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>336</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); String originated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); String format = "yy"; Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yy hh:mm:ss a"); cal.setTime(sdf.parse(originated)); if (format.equalsIgnoreCase("dd")) { System.out.println("dd = " + String.format("%02d", cal.get(Calendar.DATE))); } else if (format.equalsIgnoreCase("mm")) { System.out.println("mm = " + String.format("%02d", (cal.get(Calendar.MONTH) + 1))); } else if (format.equalsIgnoreCase("yy")) { SimpleDateFormat df = new SimpleDateFormat("yy"); // Just the year, with 2 digits String formattedDate = df.format(cal.getTime()); System.out.println("formattedDate " + formattedDate); } else if (format.equalsIgnoreCase("yyyy")) { System.out.println("yyyy = " +String.format("%04", cal.get(Calendar.YEAR))); } if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String ge]]></string>
</history>
<history>
<datetime>2020-05-20T10:52:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>337</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T10:52:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>338</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T10:52:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>339</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 10:52:37.788'</string>
</history>
<history>
<datetime>2020-05-20T10:52:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>340</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); String originated = object.getInfo(context, DomainConstants.SELECT_ORIGINATED); String format = "yy"; Calendar cal = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yy hh:mm:ss a"); cal.setTime(sdf.parse(originated)); SimpleDateFormat df = new SimpleDateFormat(format); String formattedDate = df.format(cal.getTime()); System.out.println("result1yy = " + formattedDate); format = "dd"; cal.setTime(sdf.parse(originated)); df = new SimpleDateFormat(format); formattedDate = df.format(cal.getTime()); System.out.println("result2dd = " + formattedDate); format = "mm"; df = new SimpleDateFormat(format); formattedDate = df.format(cal.getTime()); System.out.println("result3mm = " + formattedDate); format = "yyyy"; df = new SimpleDateFormat(format); formattedDate = df.format(cal.getTime()); System.out.println("result4yyy = " + formattedDate); format = "MM"; df = new SimpleDateFormat(format); formattedDate = df.format(cal.getTime()); System.out.println("result4MM = " + formattedDate);  if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new ]]></string>
</history>
<history>
<datetime>2020-05-20T11:28:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>341</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T11:28:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>342</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T11:28:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>343</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 11:27:50.484'</string>
</history>
<history>
<datetime>2020-05-20T11:28:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>344</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T12:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>345</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T12:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>346</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T12:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>347</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 12:47:27.492'</string>
</history>
<history>
<datetime>2020-05-20T12:48:05Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>348</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T15:06:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>349</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T15:06:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>350</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T15:06:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>351</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 15:05:14.930'</string>
</history>
<history>
<datetime>2020-05-20T15:06:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>352</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T15:26:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>353</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T15:26:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>354</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T15:26:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>355</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 15:26:06.614'</string>
</history>
<history>
<datetime>2020-05-20T15:26:45Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>356</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T15:45:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>357</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T15:45:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>358</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T15:45:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>359</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 15:45:25.172'</string>
</history>
<history>
<datetime>2020-05-20T15:45:40Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>360</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T15:51:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>361</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T15:51:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>362</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T15:51:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>363</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 15:51:37.128'</string>
</history>
<history>
<datetime>2020-05-20T15:51:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>364</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T16:01:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>365</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T16:01:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>366</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T16:01:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>367</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 16:01:13.799'</string>
</history>
<history>
<datetime>2020-05-20T16:01:29Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>368</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T16:07:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>369</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T16:07:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>370</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T16:07:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>371</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 16:06:47.776'</string>
</history>
<history>
<datetime>2020-05-20T16:07:02Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>372</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T16:08:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>373</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T16:08:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>374</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T16:08:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>375</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 16:07:37.492'</string>
</history>
<history>
<datetime>2020-05-20T16:08:22Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>376</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T16:09:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>377</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T16:09:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>378</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T16:09:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>379</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 16:09:21.709'</string>
</history>
<history>
<datetime>2020-05-20T16:09:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>380</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T16:31:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>381</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T16:31:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>382</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T16:31:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>383</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 16:31:03.218'</string>
</history>
<history>
<datetime>2020-05-20T16:31:26Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>384</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T18:31:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>385</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T18:31:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>386</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T18:31:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>387</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 18:31:12.778'</string>
</history>
<history>
<datetime>2020-05-20T18:31:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>388</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T18:34:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>389</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T18:34:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>390</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T18:34:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>391</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 18:34:14.358'</string>
</history>
<history>
<datetime>2020-05-20T18:34:34Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>392</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T18:36:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>393</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T18:36:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>394</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T18:36:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>395</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 18:36:06.804'</string>
</history>
<history>
<datetime>2020-05-20T18:36:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>396</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); System.out.println("IMS_EncodingRules start"); System.out.println(objectId); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); System.out.println(xmlString); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); System.out.println("Encode document:\n\t" + document.getInfo(context, DomainConstants.SELECT_NAME)); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; System.out.println("testValid: result " + result); return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); System.out.println("Program Generator:\n\tAdd to code value of name."); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new Selec]]></string>
</history>
<history>
<datetime>2020-05-20T19:01:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>397</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T19:01:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>398</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T19:01:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>399</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 19:00:48.414'</string>
</history>
<history>
<datetime>2020-05-20T19:01:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>400</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, String[] args) throws Exception { StringBuilder re]]></string>
</history>
<history>
<datetime>2020-05-20T19:12:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>401</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T19:12:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>402</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T19:12:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>403</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 19:12:06.653'</string>
</history>
<history>
<datetime>2020-05-20T19:12:25Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>404</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { System.out.println(ex.getMessage()); throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, String[] args]]></string>
</history>
<history>
<datetime>2020-05-20T19:13:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>405</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T19:13:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>406</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T19:13:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>407</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 19:13:43.288'</string>
</history>
<history>
<datetime>2020-05-20T19:13:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>408</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { System.out.println("!!!" + ex.getMessage()); throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, Strin]]></string>
</history>
<history>
<datetime>2020-05-20T19:16:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>409</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T19:16:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>410</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T19:16:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>411</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 19:16:02.420'</string>
</history>
<history>
<datetime>2020-05-20T19:16:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>412</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { System.out.println("!!!" + ex.getMessage()); throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, Strin]]></string>
</history>
<history>
<datetime>2020-05-20T19:20:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>413</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T19:20:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>414</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T19:20:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>415</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 19:20:39.998'</string>
</history>
<history>
<datetime>2020-05-20T19:20:53Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>416</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { System.out.println("!!!" + ex.getMessage()); throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, Strin]]></string>
</history>
<history>
<datetime>2020-05-20T20:19:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>417</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T20:19:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>418</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T20:19:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>419</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 20:18:54.049'</string>
</history>
<history>
<datetime>2020-05-20T20:19:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>420</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { System.out.println("!!!" + ex.getMessage()); throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, Strin]]></string>
</history>
<history>
<datetime>2020-05-20T20:38:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>421</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T20:38:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>422</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T20:38:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>423</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 20:38:35.645'</string>
</history>
<history>
<datetime>2020-05-20T20:38:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>424</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { System.out.println("!!!" + ex.getMessage()); throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, Strin]]></string>
</history>
<history>
<datetime>2020-05-20T21:19:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>425</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T21:19:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>426</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T21:19:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>427</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 21:19:01.045'</string>
</history>
<history>
<datetime>2020-05-20T21:19:35Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>428</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { System.out.println("!!!" + ex.getMessage()); throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, Strin]]></string>
</history>
<history>
<datetime>2020-05-20T21:57:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>429</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-20T21:57:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>430</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-20T21:57:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>431</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-20-2020 21:56:49.801'</string>
</history>
<history>
<datetime>2020-05-20T21:57:00Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>432</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { System.out.println("!!!" + ex.getMessage()); throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, String[] args) throws Exception { StringBuilder result = ]]></string>
</history>
<history>
<datetime>2020-05-21T06:53:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>433</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T06:53:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>434</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T06:53:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>435</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 06:52:38.160'</string>
</history>
<history>
<datetime>2020-05-21T06:53:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>436</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { System.out.println("!!!" + ex.getMessage()); throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage()), "q"); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, String[] args) throws Exception { StringBuilder resu]]></string>
</history>
<history>
<datetime>2020-05-21T07:17:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>437</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T07:17:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>438</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T07:17:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>439</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 07:12:30.266'</string>
</history>
<history>
<datetime>2020-05-21T07:17:03Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>440</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { System.out.println("!!!" + ex.getMessage()); throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + ex.getMessage(), context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, String[] args) throws Exception { StringBuilder result = ]]></string>
</history>
<history>
<datetime>2020-05-21T07:28:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>441</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T07:28:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>442</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T07:28:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>443</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 07:27:00.396'</string>
</history>
<history>
<datetime>2020-05-21T07:28:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>444</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if(code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Con]]></string>
</history>
<history>
<datetime>2020-05-21T09:22:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>445</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T09:22:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>446</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T09:22:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>447</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 09:22:27.193'</string>
</history>
<history>
<datetime>2020-05-21T09:22:33Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>448</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if(code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Con]]></string>
</history>
<history>
<datetime>2020-05-21T09:41:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>449</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T09:41:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>450</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T09:41:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>451</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 09:41:30.194'</string>
</history>
<history>
<datetime>2020-05-21T09:41:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>452</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if(code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Con]]></string>
</history>
<history>
<datetime>2020-05-21T09:46:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>453</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T09:46:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>454</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T09:46:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>455</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 09:46:32.121'</string>
</history>
<history>
<datetime>2020-05-21T09:46:36Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>456</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if(code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Con]]></string>
</history>
<history>
<datetime>2020-05-21T09:47:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>457</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T09:47:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>458</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T09:47:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>459</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 09:47:13.635'</string>
</history>
<history>
<datetime>2020-05-21T09:47:18Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>460</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if(code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Con]]></string>
</history>
<history>
<datetime>2020-05-21T09:47:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>461</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T09:47:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>462</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T09:47:55Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>463</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 09:47:51.194'</string>
</history>
<history>
<datetime>2020-05-21T09:47:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>464</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if(code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Con]]></string>
</history>
<history>
<datetime>2020-05-21T09:50:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>465</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T09:50:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>466</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T09:50:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>467</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 09:50:19.268'</string>
</history>
<history>
<datetime>2020-05-21T09:50:27Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>468</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if(code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Con]]></string>
</history>
<history>
<datetime>2020-05-21T09:54:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>469</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T09:54:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>470</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T09:54:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>471</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 09:54:53.291'</string>
</history>
<history>
<datetime>2020-05-21T09:54:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>472</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkException; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); String xmlString =  domainObject.getInfo(context, DomainConstants.SELECT_DESCRIPTION); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if(code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  private String dateConverter(Context context, String InData) throws Exception { String retStr = ""; Calendar c = new GregorianCalendar(); try {  SimpleDateFormat enoviaDate = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a"); Date dd = enoviaDate.parse(InData); c.setTime(dd); Calendar nextDay = (Calendar) c.clone(); nextDay.add(Calendar.DAY_OF_YEAR, +7); Date dateout = nextDay.getTime();  SimpleDateFormat outDate = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss"); retStr = outDate.format(dd);  } catch (Exception e) { System.out.println(e.toString()); } return retStr; }   public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static void autoName(Context context, String[] args) throws FrameworkException { System.out.println(FrameworkUtil.autoName(context, "IMS_Adm_NumberGenerator", "IMS_Adm_Rule")); }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Con]]></string>
</history>
<history>
<datetime>2020-05-21T13:13:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>473</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-21T13:13:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>474</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-21T13:13:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>475</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-21-2020 13:10:57.084'</string>
</history>
<history>
<datetime>2020-05-21T13:13:11Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>476</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap)programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if(code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try{ SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch(Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, String[] args) throws Exception { StringBuilder result = new StringBuilder(); Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String attributeName = paramMap.get("attribute"); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); Boolean date = Boolean.valueOf(paramMap.get("date")); try { DomainObject object = DomainObject.newInstance(context, id); String attrValue = object.getInfo(context, attribute.toString()); if (date) { String format = paramMap.get("format"); result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } catch (MatrixException ex) { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  private static String getAttributeNameProperty(Context context, String attributeName) { StringBuilder attribu]]></string>
</history>
<history>
<datetime>2020-05-22T18:02:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>477</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T18:02:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>478</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-22T18:02:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>479</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-22-2020 18:01:31.449'</string>
</history>
<history>
<datetime>2020-05-22T18:02:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>480</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.EnoviaResourceBundle; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UICache; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.List; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  priv]]></string>
</history>
<history>
<datetime>2020-05-22T18:32:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>481</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T18:32:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>482</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-22T18:32:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>483</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-22-2020 18:32:24.780'</string>
</history>
<history>
<datetime>2020-05-22T18:32:44Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>484</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.EnoviaResourceBundle; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UICache; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.List; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  priv]]></string>
</history>
<history>
<datetime>2020-05-22T18:35:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>485</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T18:35:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>486</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-22T18:35:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>487</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-22-2020 18:35:11.488'</string>
</history>
<history>
<datetime>2020-05-22T18:35:23Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>488</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.EnoviaResourceBundle; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UICache; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.List; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  priv]]></string>
</history>
<history>
<datetime>2020-05-22T18:43:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>489</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T18:43:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>490</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-22T18:43:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>491</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-22-2020 18:42:09.218'</string>
</history>
<history>
<datetime>2020-05-22T18:43:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>492</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.EnoviaResourceBundle; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UICache; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.List; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  priv]]></string>
</history>
<history>
<datetime>2020-05-22T18:46:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>493</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T18:46:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>494</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-22T18:46:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>495</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-22-2020 18:46:41.274'</string>
</history>
<history>
<datetime>2020-05-22T18:46:56Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>496</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.EnoviaResourceBundle; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UICache; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.List; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:Par]]></string>
</history>
<history>
<datetime>2020-05-22T18:50:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>497</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T18:50:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>498</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-22T18:50:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>499</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-22-2020 18:50:18.231'</string>
</history>
<history>
<datetime>2020-05-22T18:50:37Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>500</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.EnoviaResourceBundle; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UICache; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.List; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:Par]]></string>
</history>
<history>
<datetime>2020-05-22T18:55:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>501</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T18:55:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>502</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-22T18:55:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>503</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-22-2020 18:55:46.281'</string>
</history>
<history>
<datetime>2020-05-22T18:55:57Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>504</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.EnoviaResourceBundle; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UICache; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.List; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:Par]]></string>
</history>
<history>
<datetime>2020-05-22T18:58:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>505</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T18:58:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>506</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-22T18:58:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>507</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-22-2020 18:57:43.644'</string>
</history>
<history>
<datetime>2020-05-22T18:58:09Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>508</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.EnoviaResourceBundle; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UICache; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.List; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:Par]]></string>
</history>
<history>
<datetime>2020-05-22T19:03:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>509</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-22T19:03:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>510</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-22T19:03:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>511</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-22-2020 19:02:53.582'</string>
</history>
<history>
<datetime>2020-05-22T19:03:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>512</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.EnoviaResourceBundle; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.domain.util.PropertyUtil; import com.matrixone.apps.framework.ui.UICache; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.List; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:Par]]></string>
</history>
<history>
<datetime>2020-05-25T07:43:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>513</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-25T07:43:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>514</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-25T07:43:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>515</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-25-2020 07:38:23.698'</string>
</history>
<history>
<datetime>2020-05-25T07:43:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>516</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  private static String getAttributeNameProperty(Context context, String attributeName) { StringBuilder attribute = new StringBuilder(3); ]]></string>
</history>
<history>
<datetime>2020-05-25T08:12:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>517</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-25T08:12:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>518</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-25T08:12:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>519</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-25-2020 08:12:34.618'</string>
</history>
<history>
<datetime>2020-05-25T08:12:51Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>520</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { System.out.println("getAttributeValue: attrName = " + attributeName); StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  private static String getAttributeNameProperty(Context context, St]]></string>
</history>
<history>
<datetime>2020-05-25T08:14:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>521</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-25T08:14:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>522</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-25T08:14:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>523</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-25-2020 08:14:43.792'</string>
</history>
<history>
<datetime>2020-05-25T08:14:54Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>524</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { System.out.println("getAttributeValue: attrName = " + attributeName); StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); boolean containsAttr = Boolean.valueOf(checkForAttribute(context, object, attributeName)); if (containsAttr) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  private static String getAttributeNameProperty(Context context, St]]></string>
</history>
<history>
<datetime>2020-05-25T08:19:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>525</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-25T08:19:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>526</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-25T08:19:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>527</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-25-2020 08:19:36.954'</string>
</history>
<history>
<datetime>2020-05-25T08:19:50Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>528</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); String containsAttr = checkForAttribute(context, object, attributeName); if (UIUtil.isNullOrEmpty(containsAttr)) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  private static String getAttributeNameProperty(Context context, String attributeName) { StringBuilder attribute = new StringBuilder(]]></string>
</history>
<history>
<datetime>2020-05-25T08:21:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>529</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-25T08:21:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>530</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-25T08:21:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>531</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-25-2020 08:19:36.954'</string>
</history>
<history>
<datetime>2020-05-25T08:21:08Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>532</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); String containsAttr = checkForAttribute(context, object, attributeName); if (UIUtil.isNullOrEmpty(containsAttr)) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  private static String getAttributeNameProperty(Context context, String attributeName) { StringBuilder attribute = new StringBuilder(]]></string>
</history>
<history>
<datetime>2020-05-29T13:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>533</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T13:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>534</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-29T13:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>535</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-29-2020 13:57:10.660'</string>
</history>
<history>
<datetime>2020-05-29T13:57:24Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>536</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); String containsAttr = checkForAttribute(context, object, attributeName); if (UIUtil.isNullOrEmpty(containsAttr)) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  private static String getAttributeNameProperty(Context context, String attributeName) { StringBuilder attribute = new StringBuilder(]]></string>
</history>
<history>
<datetime>2020-05-29T14:28:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>537</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T14:28:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>538</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-29T14:28:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>539</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-29-2020 14:27:51.120'</string>
</history>
<history>
<datetime>2020-05-29T14:28:01Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>540</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); String containsAttr = checkForAttribute(context, object, attributeName); if (UIUtil.isNullOrEmpty(containsAttr)) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  private static String getAttributeNameProperty(Context context, String attributeName) { StringBuilder attribute = new StringBuilder(]]></string>
</history>
<history>
<datetime>2020-05-29T15:44:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>541</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T15:44:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>542</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-29T15:44:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>543</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-29-2020 15:44:34.471'</string>
</history>
<history>
<datetime>2020-05-29T15:44:38Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>544</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); System.out.println("getAttributeValue:attribute="+attribute); String containsAttr = checkForAttribute(context, object, attributeName); if (UIUtil.isNullOrEmpty(containsAttr)) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  private static String getAttributeNameProperty(Context context, String]]></string>
</history>
<history>
<datetime>2020-05-29T15:59:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>545</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T15:59:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>546</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-29T15:59:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>547</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-29-2020 15:58:59.175'</string>
</history>
<history>
<datetime>2020-05-29T15:59:04Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>548</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { System.out.println("attr="+rule.getEncodeAttributeName()); System.out.println("code="+rule.getCode(context, document)); document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); System.out.println("getAttributeValue:attribute="+attribute); String containsAttr = checkForAttribute(context, object, attributeName); if (UIUtil.isNullOrEmpty(containsAttr)) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:Pa]]></string>
</history>
<history>
<datetime>2020-05-29T16:02:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>549</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T16:02:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>550</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-29T16:02:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>551</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-29-2020 16:02:02.306'</string>
</history>
<history>
<datetime>2020-05-29T16:02:07Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>552</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { System.out.println("!attr="+rule.getEncodeAttributeName()); System.out.println("!code="+rule.getCode(context, document)); document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); System.out.println("document-"+document); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); System.out.println("getAttributeValue:attribute="+attribute); String containsAttr = checkForAttribute(context, object, attributeName); if (UIUtil.isNullOrEmpty(containsAttr)) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { t]]></string>
</history>
<history>
<datetime>2020-05-29T16:05:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>553</order>
<string>mod program IMS_EncodingRules remove property 'file date'</string>
</history>
<history>
<datetime>2020-05-29T16:05:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>554</order>
<string>mod program IMS_EncodingRules java</string>
</history>
<history>
<datetime>2020-05-29T16:05:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>555</order>
<string>mod program IMS_EncodingRules add property 'file date' value '05-29-2020 16:05:09.857'</string>
</history>
<history>
<datetime>2020-05-29T16:05:16Z</datetime>
<agent>admin_platform</agent>
<event>modify</event>
<order>556</order>
<string><![CDATA[mod program IMS_EncodingRules code 'import com.matrixone.apps.domain.DomainConstants; import com.matrixone.apps.domain.DomainObject; import com.matrixone.apps.domain.util.FrameworkUtil; import com.matrixone.apps.domain.util.MapList; import com.matrixone.apps.framework.ui.UISearchUtil; import com.matrixone.apps.framework.ui.UIUtil; import matrix.db.Context; import matrix.db.JPO; import matrix.db.Relationship; import matrix.db.RelationshipList; import matrix.util.MatrixException; import matrix.util.StringList; import matrix.util.SelectList; import ru.ase.md.ims3.encoding.DefaultRuleHandler; import ru.ase.md.ims3.encoding.RuleHandler; import ru.ase.md.ims3.encoding.models.EncodingRule; import ru.ase.md.ims3.exceptions.EncodingRuleException;  import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.*;  public class ${CLASSNAME} {  public static void addRule(Context context, String[] args) throws Exception { HashMap programMap = (HashMap) JPO.unpackArgs(args); HashMap paramMap = (HashMap) programMap.get("paramMap"); String objectId = (String) paramMap.get("objectId"); RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject domainObject = DomainObject.newInstance(context, objectId); ruleHandler.createRule(context, domainObject); }  public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException { try { RuleHandler ruleHandler = new DefaultRuleHandler(); DomainObject document = DomainObject.newInstance(context, args[0]); Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document); for (EncodingRule rule : rules) { document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document)); } } catch (EncodingRuleException ex) { String code = ex.getMessage(); if (code.contains("IMS3Error:")) { code = code.substring(code.lastIndexOf("IMS3Error:") + 10); } throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage())); } }  public static boolean testValid(Context context, String[] args) throws Exception { boolean result = false; Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); String type = paramMap.get("type"); DomainObject object = DomainObject.newInstance(context, id); String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE); if (objectType.contains(type)) result = true; return result; }  public static String getSimpleText(Context context, String[] args) throws Exception { Map<String, String> paramMap = JPO.unpackArgs(args); String id = paramMap.get("id"); DomainObject object = DomainObject.newInstance(context, id); String value = object.getInfo(context, DomainConstants.SELECT_NAME); return value; }  public static MapList getAllRules(Context context, String[] args) throws Exception { MapList result = new MapList(); try { SelectList ruleSelect = new SelectList(1); ruleSelect.addElement("id"); result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect); } catch (Exception exp) { exp.printStackTrace(); throw new Exception(exp.toString()); } return result; }  public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception { StringBuilder result = new StringBuilder(); StringBuilder attribute = new StringBuilder(); attribute.append(getAttributeNameProperty(context, attributeName)); String containsAttr = checkForAttribute(context, object, attributeName); if (UIUtil.isNullOrEmpty(containsAttr)) { String attrValue = object.getInfo(context, attribute.toString()); if (date) { result.append(getFormattedDate(attrValue, format)); } else result.append(attrValue); } else { throw new EncodingRuleException("IMS3Error:ParameterNotFound"); } return result.toString(); }  private static String getAttributeNameProperty(Context context, String attributeName) { StringBuilder attribute = new StringBuilder(]]></string>
</history>
</historyList>
</adminProperties>
<code><![CDATA[import com.matrixone.apps.domain.DomainConstants;
import com.matrixone.apps.domain.DomainObject;
import com.matrixone.apps.domain.util.FrameworkUtil;
import com.matrixone.apps.domain.util.MapList;
import com.matrixone.apps.framework.ui.UISearchUtil;
import com.matrixone.apps.framework.ui.UIUtil;
import matrix.db.Context;
import matrix.db.JPO;
import matrix.db.Relationship;
import matrix.db.RelationshipList;
import matrix.util.MatrixException;
import matrix.util.StringList;
import matrix.util.SelectList;
import ru.ase.md.ims3.encoding.DefaultRuleHandler;
import ru.ase.md.ims3.encoding.RuleHandler;
import ru.ase.md.ims3.encoding.models.EncodingRule;
import ru.ase.md.ims3.exceptions.EncodingRuleException;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

public class ${CLASSNAME} {

    public static void addRule(Context context, String[] args) throws Exception {
        HashMap programMap = (HashMap) JPO.unpackArgs(args);
        HashMap paramMap = (HashMap) programMap.get("paramMap");
        String objectId = (String) paramMap.get("objectId");
        RuleHandler ruleHandler = new DefaultRuleHandler();
        DomainObject domainObject = DomainObject.newInstance(context, objectId);
        ruleHandler.createRule(context, domainObject);
    }

    public static void encodeDocument(Context context, String[] args) throws MatrixException, InterruptedException {
        try {
            RuleHandler ruleHandler = new DefaultRuleHandler();
            DomainObject document = DomainObject.newInstance(context, args[0]);
            Collection<EncodingRule> rules = ruleHandler.getRulesForDocument(context, document);
            for (EncodingRule rule : rules) {
                document.setAttributeValue(context, rule.getEncodeAttributeName(), rule.getCode(context, document));
            }
        } catch (EncodingRuleException ex) {
            String code = ex.getMessage();
            if (code.contains("IMS3Error:")) {
                code = code.substring(code.lastIndexOf("IMS3Error:") + 10);
            }
            throw new EncodingRuleException(FrameworkUtil.i18nStringNow("emxFramework.EncodingRule." + code, context.getLocale().getLanguage()));
        }
    }

    public static boolean testValid(Context context, String[] args) throws Exception {
        boolean result = false;
        Map<String, String> paramMap = JPO.unpackArgs(args);
        String id = paramMap.get("id");
        String type = paramMap.get("type");
        DomainObject object = DomainObject.newInstance(context, id);
        String objectType = object.getInfo(context, DomainConstants.SELECT_TYPE);
        if (objectType.contains(type))
            result = true;
        return result;
    }

    public static String getSimpleText(Context context, String[] args) throws Exception {
        Map<String, String> paramMap = JPO.unpackArgs(args);
        String id = paramMap.get("id");
        DomainObject object = DomainObject.newInstance(context, id);
        String value = object.getInfo(context, DomainConstants.SELECT_NAME);
        return value;
    }

    public static MapList getAllRules(Context context, String[] args) throws Exception {
        MapList result = new MapList();
        try {
            SelectList ruleSelect = new SelectList(1);
            ruleSelect.addElement("id");
            result = DomainObject.findObjects(context, "IMS_Adm_Rule", null, "", ruleSelect);
        } catch (Exception exp) {
            exp.printStackTrace();
            throw new Exception(exp.toString());
        }
        return result;
    }

    public static String getAttributeValue(Context context, DomainObject object, String attributeName, boolean date, String format) throws Exception {
        StringBuilder result = new StringBuilder();
        StringBuilder attribute = new StringBuilder();
        attribute.append(getAttributeNameProperty(context, attributeName));
        String containsAttr = checkForAttribute(context, object, attributeName);
        if (UIUtil.isNullOrEmpty(containsAttr)) {
            String attrValue = object.getInfo(context, attribute.toString());
            if (date) {
                result.append(getFormattedDate(attrValue, format));
            } else
                result.append(attrValue);
        } else {
            throw new EncodingRuleException("IMS3Error:ParameterNotFound");
        }
        return result.toString();
    }

    private static String getAttributeNameProperty(Context context, String attributeName) {
        StringBuilder attribute = new StringBuilder(3);
        if (UIUtil.isNotNullAndNotEmpty(attributeName)) {
            if (attributeName.equalsIgnoreCase(DomainConstants.SELECT_ORIGINATED)) {
                attribute.append(DomainConstants.SELECT_ORIGINATED);
            } else if (attributeName.equalsIgnoreCase(DomainConstants.SELECT_MODIFIED)) {
                attribute.append(DomainConstants.SELECT_MODIFIED);
            } else if (attributeName.equalsIgnoreCase(DomainConstants.SELECT_DESCRIPTION)) {
                attribute.append(DomainConstants.SELECT_DESCRIPTION);
            } else if (attributeName.equalsIgnoreCase(DomainConstants.SELECT_OWNER)) {
                attribute.append(DomainConstants.SELECT_OWNER);
            } else {
                attribute.append("attribute[");
                attribute.append(attributeName);
                attribute.append("]");
            }
        }
        return attribute.toString();
    }

    private static String getFormattedDate(String attrValue, String format) throws ParseException {
        StringBuilder result = new StringBuilder();
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss a");
        cal.setTime(sdf.parse(attrValue));
        if (format.equalsIgnoreCase("mm")) {
            result.append(String.format("%02d", (cal.get(Calendar.MONTH) + 1)));
        } else {
            SimpleDateFormat df = new SimpleDateFormat(format);
            result.append(df.format(cal.getTime()));
        }
        return result.toString();
    }

    public static String getRelatedObjectAttributeValue(Context context, DomainObject object, String relatedObjectType, String relationName, String attributeName, boolean date, String format, String whereExpression) throws Exception {
        StringBuilder result = new StringBuilder();
        StringBuilder attribute = new StringBuilder();
        attribute.append(getAttributeNameProperty(context, attributeName));
        StringList QAGbusSelects = new StringList();  // Object
        QAGbusSelects.add(DomainConstants.SELECT_ID);
        QAGbusSelects.add(attribute.toString());
        StringList QAGrelSelects = new StringList();  // Rel
        MapList mlResult = object.getRelatedObjects(context,
                relationName,
                relatedObjectType,
                QAGbusSelects,
                QAGrelSelects,
                /*from*/ true,
                /*to*/ true,
                (short) 0,
                whereExpression,
                null,
                0);
        if (mlResult.size() > 1) {
            throw new EncodingRuleException("IMS3Error:IncorrectRelatedObjectsCount");
        } else if (mlResult.size() == 1) {
            Map relatedObject = (Map) mlResult.get(0);
            String relatedObjectId = (String) relatedObject.get(DomainConstants.SELECT_ID);
            DomainObject relObject = DomainObject.newInstance(context, relatedObjectId);
            String containsAttr = checkForAttribute(context, relObject, attributeName);
            if (UIUtil.isNullOrEmpty(containsAttr)) {
                String attrValue = (String) relatedObject.get(attribute.toString());
                if (date) {
                    result.append(getFormattedDate(attrValue, format));
                } else
                    result.append(attrValue);
            } else {
                throw new EncodingRuleException("IMS3Error:ParameterNotFound");
            }
        } else {
            throw new EncodingRuleException("IMS3Error:RelatedObjectNotFound");
        }
        return result.toString();
    }

    public static String checkForRelation(Context context, DomainObject object, String relationName) throws Exception {
        StringBuilder result = new StringBuilder();
        RelationshipList relationshipList = object.getAllRelationship(context);
        Map<String, String> relMap = new HashMap<>();
        for (Relationship relationship : relationshipList) {
            relMap.put(relationship.toString(), relationship.getTypeName());
        }
        if (!relMap.containsValue(relationName)) {
            result.append("false");
        }
        return result.toString();
    }

    public static String checkForAttribute(Context context, DomainObject object, String attributeName) throws Exception {
        StringBuilder result = new StringBuilder();
        Map attributeMap = object.getAttributeMap(context);
        if (!attributeMap.containsKey(attributeName) && !UISearchUtil.getBasics(context).contains(attributeName)) {
            result.append("false");
        }
        return result.toString();
    }

    public static String checkForRelatedObject(Context context, DomainObject object, String relationName, String relatedObjectType) throws Exception {
        StringBuilder result = new StringBuilder();
        StringList QAGbusSelects = new StringList();  // Object
        QAGbusSelects.add(DomainConstants.SELECT_ID);
        StringList QAGrelSelects = new StringList();  // Rel
        MapList mlResult = object.getRelatedObjects(context,
                relationName,
                relatedObjectType,
                QAGbusSelects,
                QAGrelSelects,
                /*from*/ true,
                /*to*/ true,
                (short) 0,
                null,
                null,
                0);
        if (mlResult.size() == 0) {
            result.append("false");
        }
        return result.toString();
    }

    public static String checkForRelatedObjectAttribute(Context context, DomainObject object, String relationName, String relatedObjectType, String attributeName) throws Exception {
        StringBuilder result = new StringBuilder();
        StringBuilder attribute = new StringBuilder();
        attribute.append(getAttributeNameProperty(context, attributeName));
        StringList QAGbusSelects = new StringList();  // Object
        QAGbusSelects.add(DomainConstants.SELECT_ID);
        QAGbusSelects.add(attribute.toString());
        StringList QAGrelSelects = new StringList();  // Rel
        MapList mlResult = object.getRelatedObjects(context,
                relationName,
                relatedObjectType,
                QAGbusSelects,
                QAGrelSelects,
                /*from*/ true,
                /*to*/ true,
                (short) 0,
                null,
                null,
                0);
        if (mlResult.size() > 1) {
            throw new EncodingRuleException("IMS3Error:IncorrectRelatedObjectsCount");
        } else if (mlResult.size() == 1) {
            Map relatedObject = (Map) mlResult.get(0);
            String relatedObjectId = (String) relatedObject.get(DomainConstants.SELECT_ID);
            DomainObject relObject = DomainObject.newInstance(context, relatedObjectId);
            Map attributeMap = relObject.getAttributeMap(context);
            if (!attributeMap.containsKey(attributeName)) {
                result.append("false");
            }
        } else {
            throw new EncodingRuleException("IMS3Error:RelatedObjectNotFound");
        }
        return result.toString();
    }

    public static String checkForParameter(Context context, String[] args) throws Exception {
        StringBuilder result = new StringBuilder();
        Map<String, String> paramMap = JPO.unpackArgs(args);
        String id = paramMap.get("id");
        DomainObject object = DomainObject.newInstance(context, id);
        String relatedObjectType = paramMap.get("objecttype");
        String relationName = paramMap.get("relation");
        String attributeName = paramMap.get("attribute");
        if (UIUtil.isNotNullAndNotEmpty(attributeName) && UIUtil.isNullOrEmpty(relationName)) {
            result.append(checkForAttribute(context, object, attributeName));
        } else if (UIUtil.isNotNullAndNotEmpty(relationName) &&
                UIUtil.isNullOrEmpty(relatedObjectType)) {
            result.append(checkForRelation(context, object, relationName));
        } else if (UIUtil.isNotNullAndNotEmpty(relationName) &&
                UIUtil.isNotNullAndNotEmpty(relatedObjectType) &&
                UIUtil.isNullOrEmpty(attributeName)) {
            result.append(checkForRelatedObject(context, object, relationName, relatedObjectType));
        } else if (UIUtil.isNotNullAndNotEmpty(relationName) &&
                UIUtil.isNotNullAndNotEmpty(relatedObjectType) &&
                UIUtil.isNotNullAndNotEmpty(attributeName)) {
            result.append(checkForRelatedObjectAttribute(context, object, relationName, relatedObjectType, attributeName));
        } else
            result.append("false");
        return result.toString();
    }

    public static String getParameterValue(Context context, String[] args) throws Exception {
        StringBuilder result = new StringBuilder();
        Map<String, String> paramMap = JPO.unpackArgs(args);
        String id = paramMap.get("id");
        DomainObject object = DomainObject.newInstance(context, id);
        String relatedObjectType = paramMap.get("objecttype");
        String relationName = paramMap.get("relation");
        String attributeName = paramMap.get("attribute");
        boolean date = Boolean.valueOf(paramMap.get("date"));
        String format = paramMap.get("format");
        String whereExpression = paramMap.get("whereExpression");
        if (UIUtil.isNotNullAndNotEmpty(attributeName) && UIUtil.isNullOrEmpty(relationName)) {
            result.append(getAttributeValue(context, object, attributeName, date, format));
        } else {
            result.append(getRelatedObjectAttributeValue(context, object, relatedObjectType, relationName, attributeName, date, format, whereExpression));
        }
        return result.toString();
    }
}
]]></code>
<javaProgram/>
</program>
</ematrix>
